/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get multiple Actions
         * @description Returns multiple Action objects specified by the `id` parameter.
         *
         *     **Note**: This endpoint previously allowed listing all actions in the project. This functionality was deprecated in July 2023 and removed on 30 January 2025.
         *
         *     - Announcement: https://docs.hetzner.cloud/changelog#2023-07-20-actions-list-endpoint-is-deprecated
         *     - Removal: https://docs.hetzner.cloud/changelog#2025-01-30-listing-arbitrary-actions-in-the-actions-list-endpoint-is-removed
         *
         */
        get: operations["get_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a specific Action object.
         */
        get: operations["get_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certificates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Certificates
         * @description Returns all Certificate objects.
         */
        get: operations["list_certificates"];
        put?: never;
        /**
         * Create a Certificate
         * @description Creates a new Certificate.
         *
         *     The default type **uploaded** allows for uploading your existing `certificate` and `private_key` in PEM format. You have to monitor its expiration date and handle renewal yourself.
         *
         *     In contrast, type **managed** requests a new Certificate from *Let's Encrypt* for the specified `domain_names`. Only domains managed by *Hetzner DNS* are supported. We handle renewal and timely alert the project owner via email if problems occur.
         *
         *     For type `managed` Certificates the `action` key of the response contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null.
         *
         */
        post: operations["create_certificate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certificates/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.
         */
        get: operations["list_certificates_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certificates/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a specific Action object.
         */
        get: operations["get_certificates_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certificates/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Certificate
         * @description Gets a specific Certificate object.
         */
        get: operations["get_certificate"];
        /**
         * Update a Certificate
         * @description Updates the Certificate properties.
         *
         *     Note: if the Certificate object changes during the request, the response will be a “conflict” error.
         *
         */
        put: operations["update_certificate"];
        post?: never;
        /**
         * Delete a Certificate
         * @description Deletes a Certificate.
         */
        delete: operations["delete_certificate"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certificates/{id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions for a Certificate
         * @description Returns all Action objects for a Certificate. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
         *
         *     Only type `managed` Certificates can have Actions. For type `uploaded` Certificates the `actions` key will always contain an empty array.
         *
         */
        get: operations["list_certificate_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certificates/{id}/actions/retry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Retry Issuance or Renewal
         * @description Retry a failed Certificate issuance or renewal.
         *
         *     Only applicable if the type of the Certificate is `managed` and the issuance or renewal status is `failed`.
         *
         *     #### Call specific error codes
         *
         *     | Code                                                    | Description                                                               |
         *     |---------------------------------------------------------|---------------------------------------------------------------------------|
         *     | `caa_record_does_not_allow_ca`                          | CAA record does not allow certificate authority                           |
         *     | `ca_dns_validation_failed`                              | Certificate Authority: DNS validation failed                              |
         *     | `ca_too_many_authorizations_failed_recently`            | Certificate Authority: Too many authorizations failed recently            |
         *     | `ca_too_many_certificates_issued_for_registered_domain` | Certificate Authority: Too many certificates issued for registered domain |
         *     | `ca_too_many_duplicate_certificates`                    | Certificate Authority: Too many duplicate certificates                    |
         *     | `could_not_verify_domain_delegated_to_zone`             | Could not verify domain delegated to zone                                 |
         *     | `dns_zone_not_found`                                    | DNS zone not found                                                        |
         *     | `dns_zone_is_secondary_zone`                            | DNS zone is a secondary zone                                              |
         *
         */
        post: operations["retry_certificate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/certificates/{id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action for a Certificate
         * @description Returns a specific Action for a Certificate. Only type `managed` Certificates have Actions.
         */
        get: operations["get_certificate_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datacenters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Datacenters
         * @description Returns all [Datacenters](#datacenters).
         */
        get: operations["list_datacenters"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/datacenters/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Datacenter
         * @description Returns a single [Datacenter](#datacenters).
         */
        get: operations["get_datacenter"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Firewalls
         * @description Returns all [Firewalls](#firewalls).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_firewalls"];
        put?: never;
        /**
         * Create a Firewall
         * @description Create a [Firewall](#firewalls).
         *
         *     #### Error Codes specific to this Call
         *
         *     | Code                          | Description                                                                 |
         *     |------------------------------ |-----------------------------------------------------------------------------|
         *     | `server_already_added`        | [Server](#servers) applied more than once                                   |
         *     | `incompatible_network_type`   | The resources network type is not supported by [Firewalls](#firewalls)      |
         *     | `firewall_resource_not_found` | The resource the [Firewall](#firewalls) should be attached to was not found |
         *
         */
        post: operations["create_firewall"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Returns all [Actions](#actions) for [Firewalls](#firewalls).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_firewalls_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns the specific [Action](#actions).
         */
        get: operations["get_firewalls_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Firewall
         * @description Returns a single [Firewall](#firewalls).
         */
        get: operations["get_firewall"];
        /**
         * Update a Firewall
         * @description Update a [Firewall](#firewalls).
         *
         *     In case of a parallel running change on the [Firewall](#firewalls) a `conflict` error will be returned.
         *
         */
        put: operations["update_firewall"];
        post?: never;
        /**
         * Delete a Firewall
         * @description Deletes the [Firewall](#firewalls).
         *
         *     #### Error Codes specific to this Call
         *
         *     | Code                 | Description                                        |
         *     |--------------------- |----------------------------------------------------|
         *     | `resource_in_use`    | [Firewall](#firewalls) still applied to a resource |
         *
         */
        delete: operations["delete_firewall"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls/{id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions for a Firewall
         * @description Returns all [Actions](#actions) for the [Firewall](#firewalls).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_firewall_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls/{id}/actions/apply_to_resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Apply to Resources
         * @description Applies a [Firewall](#firewalls) to multiple resources.
         *
         *     Supported resources:
         *     - [Servers](#servers) (with a public network interface)
         *     - [Label Selectors](#label-selector)
         *
         *     A server can be applied to [a maximum of 5 Firewalls](https://docs.hetzner.com/cloud/firewalls/overview#limits).
         *
         *     #### Error Codes specific to this Call
         *
         *     | Code                          | Description                                                                                     |
         *     |-------------------------------|-------------------------------------------------------------------------------------------------|
         *     | `firewall_already_applied`    | [Firewall](#firewalls) is already applied to resource                                           |
         *     | `incompatible_network_type`   | The network type of the resource is not supported by [Firewalls](#firewalls)                    |
         *     | `firewall_resource_not_found` | The resource the [Firewall](#firewalls) should be applied to was not found                      |
         *     | `private_net_only_server`     | The [Server](#servers) the [Firewall](#firewalls) should be applied to has no public interface  |
         *
         */
        post: operations["apply_firewall_to_resources"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls/{id}/actions/remove_from_resources": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove from Resources
         * @description Removes a [Firewall](#firewalls) from multiple resources.
         *
         *     Supported resources:
         *     - [Servers](#servers) (with a public network interface)
         *
         *     #### Error Codes specific to this Call
         *
         *     | Code                                  | Description                                                                                             |
         *     |---------------------------------------|---------------------------------------------------------------------------------------------------------|
         *     | `firewall_already_removed`            | [Firewall](#firewalls) is already removed from the resource                                             |
         *     | `firewall_resource_not_found`         | The resource the [Firewall](#firewalls) should be removed from was not found                            |
         *     | `firewall_managed_by_label_selector`  | [Firewall](#firewall) is applied via a [Label Selector](#label-selector) and cannot be removed manually |
         *
         */
        post: operations["remove_firewall_from_resources"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls/{id}/actions/set_rules": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Set Rules
         * @description Set the rules of a [Firewall](#firewalls).
         *
         *     Overwrites the existing rules with the given ones. Pass an empty array to remove all rules.
         *
         *     Rules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits).
         *
         */
        post: operations["set_firewall_rules"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/firewalls/{id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action for a Firewall
         * @description Returns a specific [Action](#actions) for a [Firewall](#firewalls).
         */
        get: operations["get_firewall_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Floating IPs
         * @description List multiple [Floating IPs](#floating-ips).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_floating_ips"];
        put?: never;
        /**
         * Create a Floating IP
         * @description Create a [Floating IP](#floating-ips).
         *
         *     Provide the `server` attribute to assign the [Floating IP](#floating-ips) to that server or provide a `home_location` to locate the [Floating IP](#floating-ips) at. Note that the [Floating IP](#floating-ips) can be assigned to a [Server](#servers) in any [Location](#locations) later on. For optimal routing it is advised to use the [Floating IP](#floating-ips) in the same [Location](#locations) it was created in.
         *
         */
        post: operations["create_floating_ip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Lists multiple [Actions](#actions).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_floating_ips_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a single [Action](#actions).
         */
        get: operations["get_floating_ips_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Floating IP
         * @description Returns a single [Floating IP](#floating-ips).
         */
        get: operations["get_floating_ip"];
        /**
         * Update a Floating IP
         * @description Update a [Floating IP](#floating-ips).
         *
         */
        put: operations["update_floating_ip"];
        post?: never;
        /**
         * Delete a Floating IP
         * @description Deletes a [Floating IP](#floating-ips).
         *
         *     If the IP is assigned to a resource it will be unassigned.
         *
         */
        delete: operations["delete_floating_ip"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/{id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions for a Floating IP
         * @description Lists [Actions](#actions) for a [Floating IP](#floating-ips).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_floating_ip_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/{id}/actions/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign a Floating IP to a Server
         * @description Assigns a [Floating IP](#floating-ips) to a [Server](#servers).
         */
        post: operations["assign_floating_ip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/{id}/actions/change_dns_ptr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change reverse DNS records for a Floating IP
         * @description Change the reverse DNS records for this [Floating IP](#floating-ips).
         *
         *     Allows to modify the PTR records set for the IP address.
         *
         */
        post: operations["change_floating_ip_dns_ptr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/{id}/actions/change_protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Floating IP Protection
         * @description Changes the protection settings configured for the [Floating IP](#floating-ips).
         */
        post: operations["change_floating_ip_protection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/{id}/actions/unassign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unassign a Floating IP
         * @description Unassigns a [Floating IP](#floating-ips).
         *
         *     Results in the IP being unreachable. Can be assigned to another resource again.
         *
         */
        post: operations["unassign_floating_ip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/floating_ips/{id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action for a Floating IP
         * @description Returns a specific [Action](#actions) for a [Floating IP](#floating-ips).
         */
        get: operations["get_floating_ip_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Images
         * @description Returns all Image objects. You can select specific Image types only and sort the results by using URI parameters.
         */
        get: operations["list_images"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.
         */
        get: operations["list_images_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a specific Action object.
         */
        get: operations["get_images_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Image
         * @description Returns a specific Image object.
         */
        get: operations["get_image"];
        /**
         * Update an Image
         * @description Updates the Image. You may change the description, convert a Backup Image to a Snapshot Image or change the Image labels. Only Images of type `snapshot` and `backup` can be updated.
         *
         */
        put: operations["update_image"];
        post?: never;
        /**
         * Delete an Image
         * @description Deletes an Image. Only Images of type `snapshot` and `backup` can be deleted.
         */
        delete: operations["delete_image"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions for an Image
         * @description Returns all Action objects for an Image. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
         */
        get: operations["list_image_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}/actions/change_protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Image Protection
         * @description Changes the protection configuration of the Image. Can only be used on snapshots.
         */
        post: operations["change_image_protection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/images/{id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action for an Image
         * @description Returns a specific Action for an Image.
         */
        get: operations["get_image_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/isos": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List ISOs
         * @description Returns all available ISO objects.
         */
        get: operations["list_isos"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/isos/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an ISO
         * @description Returns a specific ISO object.
         */
        get: operations["get_iso"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancer_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Load Balancer Types
         * @description Gets all Load Balancer type objects.
         */
        get: operations["list_load_balancer_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancer_types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Load Balancer Type
         * @description Gets a specific Load Balancer type object.
         */
        get: operations["get_load_balancer_type"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Load Balancers
         * @description Gets all existing Load Balancers that you have available.
         */
        get: operations["list_load_balancers"];
        put?: never;
        /**
         * Create a Load Balancer
         * @description Creates a Load Balancer.
         *
         *     #### Call specific error codes
         *
         *     | Code                                    | Description                                                                                           |
         *     |-----------------------------------------|-------------------------------------------------------------------------------------------------------|
         *     | `cloud_resource_ip_not_allowed`         | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |
         *     | `ip_not_owned`                          | The IP is not owned by the owner of the project of the Load Balancer                                  |
         *     | `load_balancer_not_attached_to_network` | The Load Balancer is not attached to a network                                                        |
         *     | `robot_unavailable`                     | Robot was not available. The caller may retry the operation after a short delay.                      |
         *     | `server_not_attached_to_network`        | The server you are trying to add as a target is not attached to the same network as the Load Balancer |
         *     | `source_port_already_used`              | The source port you are trying to add is already in use                                               |
         *     | `missing_ipv4`                          | The server that you are trying to add as a public target does not have a public IPv4 address          |
         *     | `target_already_defined`                | The Load Balancer target you are trying to define is already defined                                  |
         *
         */
        post: operations["create_load_balancer"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.
         */
        get: operations["list_load_balancers_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a specific Action object.
         */
        get: operations["get_load_balancers_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Load Balancer
         * @description Gets a specific Load Balancer object.
         */
        get: operations["get_load_balancer"];
        /**
         * Update a Load Balancer
         * @description Updates a Load Balancer. You can update a Load Balancer’s name and a Load Balancer’s labels.
         *
         *     Note: if the Load Balancer object changes during the request, the response will be a “conflict” error.
         *
         */
        put: operations["update_load_balancer"];
        post?: never;
        /**
         * Delete a Load Balancer
         * @description Deletes a Load Balancer.
         */
        delete: operations["delete_load_balancer"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions for a Load Balancer
         * @description Returns all Action objects for a Load Balancer. You can sort the results by using the `sort` URI parameter, and filter them with the `status` parameter.
         */
        get: operations["list_load_balancer_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/add_service": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Service
         * @description Adds a service to a Load Balancer.
         *
         *     #### Call specific error codes
         *
         *     | Code                       | Description                                             |
         *     |----------------------------|---------------------------------------------------------|
         *     | `source_port_already_used` | The source port you are trying to add is already in use |
         *
         */
        post: operations["add_load_balancer_service"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/add_target": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add Target
         * @description Adds a target to a Load Balancer.
         *
         *     #### Call specific error codes
         *
         *     | Code                                      | Description                                                                                           |
         *     |-------------------------------------------|-------------------------------------------------------------------------------------------------------|
         *     | `cloud_resource_ip_not_allowed`           | The IP you are trying to add as a target belongs to a Hetzner Cloud resource                          |
         *     | `ip_not_owned`                            | The IP you are trying to add as a target is not owned by the Project owner                            |
         *     | `load_balancer_public_interface_disabled` | The Load Balancer's public network interface is disabled                                              |
         *     | `load_balancer_not_attached_to_network`   | The Load Balancer is not attached to a network                                                        |
         *     | `robot_unavailable`                       | Robot was not available. The caller may retry the operation after a short delay.                      |
         *     | `server_not_attached_to_network`          | The server you are trying to add as a target is not attached to the same network as the Load Balancer |
         *     | `missing_ipv4`                            | The server that you are trying to add as a public target does not have a public IPv4 address          |
         *     | `target_already_defined`                  | The Load Balancer target you are trying to define is already defined                                  |
         *
         */
        post: operations["add_load_balancer_target"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/attach_to_network": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach a Load Balancer to a Network
         * @description Attach a Load Balancer to a Network.
         *
         *     **Call specific error codes**
         *
         *     | Code                             | Description                                                           |
         *     |----------------------------------|-----------------------------------------------------------------------|
         *     | `load_balancer_already_attached` | The Load Balancer is already attached to a network                    |
         *     | `ip_not_available`               | The provided Network IP is not available                              |
         *     | `no_subnet_available`            | No Subnet or IP is available for the Load Balancer within the network |
         *
         */
        post: operations["attach_load_balancer_to_network"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/change_algorithm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Algorithm
         * @description Change the algorithm that determines to which target new requests are sent.
         */
        post: operations["change_load_balancer_algorithm"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/change_dns_ptr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change reverse DNS entry for this Load Balancer
         * @description Changes the hostname that will appear when getting the hostname belonging to the public IPs (IPv4 and IPv6) of this Load Balancer.
         *
         *     Floating IPs assigned to the Server are not affected by this.
         *
         */
        post: operations["change_load_balancer_dns_ptr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/change_protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Load Balancer Protection
         * @description Changes the protection configuration of a Load Balancer.
         */
        post: operations["change_load_balancer_protection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/change_type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change the Type of a Load Balancer
         * @description Changes the type (Max Services, Max Targets and Max Connections) of a Load Balancer.
         *
         *     **Call specific error codes**
         *
         *     | Code                         | Description                                                     |
         *     |------------------------------|-----------------------------------------------------------------|
         *     | `invalid_load_balancer_type` | The Load Balancer type does not fit for the given Load Balancer |
         *
         */
        post: operations["change_load_balancer_type"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/delete_service": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete Service
         * @description Delete a service of a Load Balancer.
         */
        post: operations["delete_load_balancer_service"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/detach_from_network": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Detach a Load Balancer from a Network
         * @description Detaches a Load Balancer from a network.
         */
        post: operations["detach_load_balancer_from_network"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/disable_public_interface": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable the public interface of a Load Balancer
         * @description Disable the public interface of a Load Balancer. The Load Balancer will be not accessible from the internet via its public IPs.
         *
         *     #### Call specific error codes
         *
         *     | Code                                      | Description                                                                    |
         *     |-------------------------------------------|--------------------------------------------------------------------------------|
         *     | `load_balancer_not_attached_to_network`   |  The Load Balancer is not attached to a network                                |
         *     | `targets_without_use_private_ip`          | The Load Balancer has targets that use the public IP instead of the private IP |
         *
         */
        post: operations["disable_load_balancer_public_interface"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/enable_public_interface": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable the public interface of a Load Balancer
         * @description Enable the public interface of a Load Balancer. The Load Balancer will be accessible from the internet via its public IPs.
         */
        post: operations["enable_load_balancer_public_interface"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/remove_target": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove Target
         * @description Removes a target from a Load Balancer.
         */
        post: operations["remove_load_balancer_target"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/update_service": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Update Service
         * @description Updates a Load Balancer Service.
         *
         *     #### Call specific error codes
         *
         *     | Code                       | Description                                             |
         *     |----------------------------|---------------------------------------------------------|
         *     | `source_port_already_used` | The source port you are trying to add is already in use |
         *
         */
        post: operations["update_load_balancer_service"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action for a Load Balancer
         * @description Returns a specific Action for a Load Balancer.
         */
        get: operations["get_load_balancer_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/load_balancers/{id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metrics for a LoadBalancer
         * @description You must specify the type of metric to get: `open_connections`, `connections_per_second`, `requests_per_second` or `bandwidth`. You can also specify more than one type by comma separation, e.g. `requests_per_second,bandwidth`.
         *
         *     Depending on the type you will get different time series data:
         *
         *     |Type | Timeseries | Unit | Description |
         *     |---- |------------|------|-------------|
         *     | open_connections | open_connections | number | Open connections |
         *     | connections_per_second | connections_per_second | connections/s | Connections per second |
         *     | requests_per_second | requests_per_second | requests/s | Requests per second |
         *     | bandwidth | bandwidth.in | bytes/s | Ingress bandwidth |
         *     || bandwidth.out | bytes/s | Egress bandwidth |
         *
         *     Metrics are available for the last 30 days only.
         *
         *     If you do not provide the step argument we will automatically adjust it so that 200 samples are returned.
         *
         *     We limit the number of samples to a maximum of 500 and will adjust the step parameter accordingly.
         *
         */
        get: operations["get_load_balancer_metrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Locations
         * @description Returns all [Locations](#locations).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_locations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/locations/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Location
         * @description Returns a [Location](#locations).
         */
        get: operations["get_location"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Networks
         * @description List multiple [Networks](#networks).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_networks"];
        put?: never;
        /**
         * Create a Network
         * @description Creates a [Network](#networks).
         *
         *     The provided `ip_range` can only be extended later on, but not reduced.
         *
         *     Subnets can be added now or later on using the [add subnet action](#network-actions-add-a-subnet-to-a-network). If you do not specify an `ip_range` for the subnet the first available /24 range will be used.
         *
         *     Routes can be added now or later by using the [add route action](#network-actions-add-a-route-to-a-network).
         *
         */
        post: operations["create_network"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Lists multiple [Actions](#actions).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_networks_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a single [Action](#actions).
         */
        get: operations["get_networks_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Network
         * @description Get a specific [Network](#networks).
         */
        get: operations["get_network"];
        /**
         * Update a Network
         * @description Update a [Network](#networks).
         *
         *     If a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.
         *
         */
        put: operations["update_network"];
        post?: never;
        /**
         * Delete a Network
         * @description Deletes a [Network](#networks).
         *
         *     Attached resources will be detached automatically.
         *
         */
        delete: operations["delete_network"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions for a Network
         * @description Lists [Actions](#actions) for a [Network](#networks).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_network_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}/actions/add_route": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a route to a Network
         * @description Adds a route entry to a [Network](#networks).
         *
         *     If a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.
         *
         */
        post: operations["add_network_route"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}/actions/add_subnet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a subnet to a Network
         * @description Adds a new subnet to the [Network](#networks).
         *
         *     If the subnet `ip_range` is not provided, the first available `/24` IP range will be used.
         *
         *     If a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.
         *
         */
        post: operations["add_network_subnet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}/actions/change_ip_range": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change IP range of a Network
         * @description Changes the IP range of a [Network](#networks).
         *
         *     The following restrictions apply to changing the IP range:
         *     - IP ranges can only be extended and never shrunk.
         *     - IPs can only be added to the end of the existing range, therefore only the netmask is allowed to be changed.
         *
         *     To update the routes on the connected [Servers](#servers), they need to be rebooted or the routes to be updated manually.
         *
         *     For example if the [Network](#networks) has a range of `10.0.0.0/16` to extend it the new range has to start with the IP `10.0.0.0` as well. The netmask `/16` can be changed to a smaller one then `16` therefore increasing the IP range. A valid entry would be `10.0.0.0/15`, `10.0.0.0/14` or `10.0.0.0/13` and so on.
         *
         *     If a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.
         *
         */
        post: operations["change_network_ip_range"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}/actions/change_protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Network Protection
         * @description Changes the protection settings of a [Network](#networks).
         *
         *     If a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.
         *
         */
        post: operations["change_network_protection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}/actions/delete_route": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete a route from a Network
         * @description Delete a route entry from a [Network](#networks).
         *
         *     If a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.
         *
         */
        post: operations["delete_network_route"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}/actions/delete_subnet": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Delete a subnet from a Network
         * @description Deletes a single subnet entry from a [Network](#networks).
         *
         *     Subnets containing attached resources can not be deleted, they must be detached beforehand.
         *
         *     If a change is currently being performed on this [Network](#networks), a error response with code `conflict` will be returned.
         *
         */
        post: operations["delete_network_subnet"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/networks/{id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action for a Network
         * @description Returns a specific [Action](#actions) for a [Network](#networks).
         */
        get: operations["get_network_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/placement_groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Placement Groups
         * @description Returns all Placement Group objects.
         */
        get: operations["list_placement_groups"];
        put?: never;
        /**
         * Create a PlacementGroup
         * @description Creates a new Placement Group.
         *
         */
        post: operations["create_placement_group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/placement_groups/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a PlacementGroup
         * @description Gets a specific Placement Group object.
         */
        get: operations["get_placement_group"];
        /**
         * Update a PlacementGroup
         * @description Updates the Placement Group properties.
         *
         *     Note: if the Placement Group object changes during the request, the response will be a “conflict” error.
         *
         */
        put: operations["update_placement_group"];
        post?: never;
        /**
         * Delete a PlacementGroup
         * @description Deletes a Placement Group.
         */
        delete: operations["delete_placement_group"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/pricing": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all prices
         * @description Returns prices for all resources available on the platform. VAT and currency of the Project owner are used for calculations.
         *
         *     Both net and gross prices are included in the response.
         *
         */
        get: operations["get_pricing"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/primary_ips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Primary IPs
         * @description List multiple [Primary IPs](#primary-ips).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_primary_ips"];
        put?: never;
        /**
         * Create a Primary IP
         * @description Create a new [Primary IP](#primary-ips).
         *
         *     Can optionally be assigned to a resource by providing an `assignee_id` and `assignee_type`.
         *
         *     If not assigned to a resource the `datacenter` key needs to be provided. This can be either the ID or the name of the [Datacenter](#datacenters) this [Primary IP](#primary-ips) shall be created in.
         *
         *     A [Primary IP](#primary-ips) can only be assigned to resource in the same [Datacenter](#datacenters) later on.
         *
         *     #### Call specific error codes
         *
         *     | Code                          | Description                                                              |
         *     |------------------------------ |------------------------------------------------------------------------- |
         *     | `server_not_stopped`          | The specified [Server](#servers) is running, but needs to be powered off |
         *     | `server_has_ipv4`             | The [Server](#servers) already has an ipv4 address                       |
         *     | `server_has_ipv6`             | The [Server](#servers) already has an ipv6 address                       |
         *
         */
        post: operations["create_primary_ip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/primary_ips/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Lists multiple [Actions](#actions).
         *
         *     Use the provided URI parameters to modify the result.
         *
         */
        get: operations["list_primary_ips_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/primary_ips/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a single [Action](#actions).
         */
        get: operations["get_primary_ips_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/primary_ips/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Primary IP
         * @description Returns a [Primary IP](#primary-ips).
         */
        get: operations["get_primary_ip"];
        /**
         * Update a Primary IP
         * @description Update a [Primary IP](#primary-ips).
         *
         *     If another change is concurrently performed on this [Primary IP](#primary-ips), a error response with code `conflict` will be returned.
         *
         */
        put: operations["update_primary_ip"];
        post?: never;
        /**
         * Delete a Primary IP
         * @description Deletes a [Primary IP](#primary-ips).
         *
         *     If assigned to a [Server](#servers) the [Primary IP](#primary-ips) will be unassigned automatically. The [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.
         *
         */
        delete: operations["delete_primary_ip"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/primary_ips/{id}/actions/assign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Assign a Primary IP to a resource
         * @description Assign a [Primary IP](#primary-ips) to a resource.
         *
         *     A [Server](#servers) can only have one [Primary IP](#primary-ips) of type `ipv4` and one of type `ipv6` assigned. If you need more IPs use [Floating IPs](#floating-ips).
         *
         *     A [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.
         *
         *     #### Error Codes specific to this Call
         *
         *     | Code                          | Description                                                                      |
         *     |------------------------------ |--------------------------------------------------------------------------------- |
         *     | `server_not_stopped`          | The [Server](#servers) is running, but needs to be powered off                   |
         *     | `primary_ip_already_assigned` | [Primary IP](#primary-ips) is already assigned to a different [Server](#servers) |
         *     | `server_has_ipv4`             | The [Server](#servers) already has an IPv4 address                               |
         *     | `server_has_ipv6`             | The [Server](#servers) already has an IPv6 address                               |
         *
         */
        post: operations["assign_primary_ip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/primary_ips/{id}/actions/change_dns_ptr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change reverse DNS records for a Primary IP
         * @description Change the reverse DNS records for this [Primary IP](#primary-ips).
         *
         *     Allows to modify the PTR records set for the IP address.
         *
         */
        post: operations["change_primary_ip_dns_ptr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/primary_ips/{id}/actions/change_protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Primary IP Protection
         * @description Changes the protection configuration of a [Primary IP](#primary-ips).
         *
         *     A [Primary IPs](#primary-ips) deletion protection can only be enabled if its `auto_delete` property is set to `false`.
         *
         */
        post: operations["change_primary_ip_protection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/primary_ips/{id}/actions/unassign": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unassign a Primary IP from a resource
         * @description Unassign a [Primary IP](#primary-ips) from a resource.
         *
         *     A [Server](#servers) must be powered off (status `off`) in order for this operation to succeed.
         *
         *     A [Server](#server) requires at least one network interface (public or private) to be powered on.
         *
         *     #### Error Codes specific to this Call
         *
         *     | Code                              | Description                                                   |
         *     |---------------------------------- |-------------------------------------------------------------- |
         *     | `server_not_stopped`              | The [Server](#server) is running, but needs to be powered off |
         *     | `server_is_load_balancer_target`  | The [Server](#server) IPv4 address is a loadbalancer target   |
         *
         */
        post: operations["unassign_primary_ip"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/server_types": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Server Types
         * @description Gets all Server type objects.
         */
        get: operations["list_server_types"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/server_types/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Server Type
         * @description Gets a specific Server type object.
         */
        get: operations["get_server_type"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Servers
         * @description Returns all existing Server objects.
         */
        get: operations["list_servers"];
        put?: never;
        /**
         * Create a Server
         * @description Creates a new Server. Returns preliminary information about the Server as well as an Action that covers progress of creation.
         */
        post: operations["create_server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.
         */
        get: operations["list_servers_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a specific Action object.
         */
        get: operations["get_servers_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Server
         * @description Returns a specific Server object. The Server must exist inside the Project.
         */
        get: operations["get_server"];
        /**
         * Update a Server
         * @description Updates a Server. You can update a Server’s name and a Server’s labels.
         *
         *     Please note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).
         *
         */
        put: operations["update_server"];
        post?: never;
        /**
         * Delete a Server
         * @description Deletes a Server.
         *
         *     This immediately removes the Server from your account, and it is no longer
         *     accessible. Any resources attached to the server (like Volumes, Primary IPs,
         *     Floating IPs, Firewalls, Placement Groups) are detached while the server is deleted.
         *
         */
        delete: operations["delete_server"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions for a Server
         * @description Returns all Action objects for a Server. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.
         */
        get: operations["list_server_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/add_to_placement_group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a Server to a Placement Group
         * @description Adds a Server to a Placement Group.
         *
         *     Server must be powered off for this command to succeed.
         *
         *     #### Call specific error codes
         *
         *     | Code                          | Description                                                          |
         *     |-------------------------------|----------------------------------------------------------------------|
         *     | `server_not_stopped`          | The action requires a stopped server                                 |
         *
         */
        post: operations["add_server_to_placement_group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/attach_iso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach an ISO to a Server
         * @description Attaches an ISO to a Server. The Server will immediately see it as a new disk. An already attached ISO will automatically be detached before the new ISO is attached.
         *
         *     Servers with attached ISOs have a modified boot order: They will try to boot from the ISO first before falling back to hard disk.
         *
         */
        post: operations["attach_server_iso"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/attach_to_network": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach a Server to a Network
         * @description Attaches a Server to a network. This will complement the fixed public Server interface by adding an additional ethernet interface to the Server which is connected to the specified network.
         *
         *     The Server will get an IP auto assigned from a subnet of type `server` in the same `network_zone`.
         *
         *     Using the `alias_ips` attribute you can also define one or more additional IPs to the Servers. Please note that you will have to configure these IPs by hand on your Server since only the primary IP will be given out by DHCP.
         *
         *     **Call specific error codes**
         *
         *     | Code                             | Description                                                           |
         *     |----------------------------------|-----------------------------------------------------------------------|
         *     | `server_already_attached`        | The server is already attached to the network                         |
         *     | `ip_not_available`               | The provided Network IP is not available                              |
         *     | `no_subnet_available`            | No Subnet or IP is available for the Server within the network        |
         *     | `networks_overlap`               | The network IP range overlaps with one of the server networks         |
         *
         */
        post: operations["attach_server_to_network"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/change_alias_ips": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change alias IPs of a Network
         * @description Changes the alias IPs of an already attached Network. Note that the existing aliases for the specified Network will be replaced with these provided in the request body. So if you want to add an alias IP, you have to provide the existing ones from the Network plus the new alias IP in the request body.
         */
        post: operations["change_server_alias_ips"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/change_dns_ptr": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change reverse DNS entry for this Server
         * @description Changes the hostname that will appear when getting the hostname belonging to the primary IPs (IPv4 and IPv6) of this Server.
         *
         *     Floating IPs assigned to the Server are not affected by this.
         *
         */
        post: operations["change_server_dns_ptr"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/change_protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Server Protection
         * @description Changes the protection configuration of the Server.
         */
        post: operations["change_server_protection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/change_type": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change the Type of a Server
         * @description Changes the type (Cores, RAM and disk sizes) of a Server.
         *
         *     Server must be powered off for this command to succeed.
         *
         *     This copies the content of its disk, and starts it again.
         *
         *     You can only migrate to Server types with the same `storage_type` and equal or bigger disks. Shrinking disks is not possible as it might destroy data.
         *
         *     If the disk gets upgraded, the Server type can not be downgraded any more. If you plan to downgrade the Server type, set `upgrade_disk` to `false`.
         *
         *     #### Call specific error codes
         *
         *     | Code                          | Description                                                          |
         *     |-------------------------------|----------------------------------------------------------------------|
         *     | `invalid_server_type`         | The server type does not fit for the given server or is deprecated   |
         *     | `server_not_stopped`          | The action requires a stopped server                                 |
         *
         */
        post: operations["change_server_type"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/create_image": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create Image from a Server
         * @description Creates an Image (snapshot) from a Server by copying the contents of its disks. This creates a snapshot of the current state of the disk and copies it into an Image. If the Server is currently running you must make sure that its disk content is consistent. Otherwise, the created Image may not be readable.
         *
         *     To make sure disk content is consistent, we recommend to shut down the Server prior to creating an Image.
         *
         *     You can either create a `backup` Image that is bound to the Server and therefore will be deleted when the Server is deleted, or you can create a `snapshot` Image which is completely independent of the Server it was created from and will survive Server deletion. Backup Images are only available when the backup option is enabled for the Server. Snapshot Images are billed on a per GB basis.
         *
         */
        post: operations["create_server_image"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/detach_from_network": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Detach a Server from a Network
         * @description Detaches a Server from a network. The interface for this network will vanish.
         */
        post: operations["detach_server_from_network"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/detach_iso": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Detach an ISO from a Server
         * @description Detaches an ISO from a Server. In case no ISO Image is attached to the Server, the status of the returned Action is immediately set to `success`.
         */
        post: operations["detach_server_iso"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/disable_backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable Backups for a Server
         * @description Disables the automatic backup option and deletes all existing Backups for a Server. No more additional charges for backups will be made.
         *
         *     Caution: This immediately removes all existing backups for the Server!
         *
         */
        post: operations["disable_server_backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/disable_rescue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Disable Rescue Mode for a Server
         * @description Disables the Hetzner Rescue System for a Server. This makes a Server start from its disks on next reboot.
         *
         *     Rescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes.
         *
         *     Disabling rescue mode will not reboot your Server — you will have to do this yourself.
         *
         */
        post: operations["disable_server_rescue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/enable_backup": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable and Configure Backups for a Server
         * @description Enables and configures the automatic daily backup option for the Server. Enabling automatic backups will increase the price of the Server by 20%. In return, you will get seven slots where Images of type backup can be stored.
         *
         *     Backups are automatically created daily.
         *
         */
        post: operations["enable_server_backup"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/enable_rescue": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Enable Rescue Mode for a Server
         * @description Enable the Hetzner Rescue System for this Server. The next time a Server with enabled rescue mode boots it will start a special minimal Linux distribution designed for repair and reinstall.
         *
         *     In case a Server cannot boot on its own you can use this to access a Server’s disks.
         *
         *     Rescue Mode is automatically disabled when you first boot into it or if you do not use it for 60 minutes.
         *
         *     Enabling rescue mode will not [reboot](https://docs.hetzner.cloud/#server-actions-soft-reboot-a-server) your Server — you will have to do this yourself.
         *
         */
        post: operations["enable_server_rescue"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/poweroff": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Power off a Server
         * @description Cuts power to the Server. This forcefully stops it without giving the Server operating system time to gracefully stop. May lead to data loss, equivalent to pulling the power cord. Power off should only be used when shutdown does not work.
         */
        post: operations["poweroff_server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/poweron": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Power on a Server
         * @description Starts a Server by turning its power on.
         */
        post: operations["poweron_server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/reboot": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Soft-reboot a Server
         * @description Reboots a Server gracefully by sending an ACPI request. The Server operating system must support ACPI and react to the request, otherwise the Server will not reboot.
         */
        post: operations["reboot_server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/rebuild": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Rebuild a Server from an Image
         * @description Rebuilds a Server overwriting its disk with the content of an Image, thereby **destroying all data** on the target Server
         *
         *     The Image can either be one you have created earlier (`backup` or `snapshot` Image) or it can be a completely fresh `system` Image provided by us. You can get a list of all available Images with `GET /images`.
         *
         *     Your Server will automatically be powered off before the rebuild command executes.
         *
         */
        post: operations["rebuild_server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/remove_from_placement_group": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Remove from Placement Group
         * @description Removes a Server from a Placement Group.
         *
         */
        post: operations["remove_server_from_placement_group"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/request_console": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Request Console for a Server
         * @description Requests credentials for remote access via VNC over websocket to keyboard, monitor, and mouse for a Server. The provided URL is valid for 1 minute, after this period a new url needs to be created to connect to the Server. How long the connection is open after the initial connect is not subject to this timeout.
         */
        post: operations["request_server_console"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/reset": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset a Server
         * @description Cuts power to a Server and starts it again. This forcefully stops it without giving the Server operating system time to gracefully stop. This may lead to data loss, it’s equivalent to pulling the power cord and plugging it in again. Reset should only be used when reboot does not work.
         */
        post: operations["reset_server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/reset_password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Reset root Password of a Server
         * @description Resets the root password. Only works for Linux systems that are running the qemu guest agent. Server must be powered on (status `running`) in order for this operation to succeed.
         *
         *     This will generate a new password for this Server and return it.
         *
         *     If this does not succeed you can use the rescue system to netboot the Server and manually change your Server password by hand.
         *
         */
        post: operations["reset_server_password"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/shutdown": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Shutdown a Server
         * @description Shuts down a Server gracefully by sending an ACPI shutdown request. The Server operating system must support ACPI
         *     and react to the request, otherwise the Server will not shut down. Please note that the `action` status in this case
         *     only reflects whether the action was sent to the server. It does not mean that the server actually shut down
         *     successfully. If you need to ensure that the server is off, use the `poweroff` action.
         *
         */
        post: operations["shutdown_server"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action for a Server
         * @description Returns a specific Action object for a Server.
         */
        get: operations["get_server_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/servers/{id}/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Metrics for a Server
         * @description Get Metrics for specified Server.
         *
         *     You must specify the type of metric to get: cpu, disk or network. You can also specify more than one type by comma separation, e.g. cpu,disk.
         *
         *     Depending on the type you will get different time series data
         *
         *     | Type    | Timeseries              | Unit      | Description                                          |
         *     |---------|-------------------------|-----------|------------------------------------------------------|
         *     | cpu     | cpu                     | percent   | Percent CPU usage                                    |
         *     | disk    | disk.0.iops.read        | iop/s     | Number of read IO operations per second              |
         *     |         | disk.0.iops.write       | iop/s     | Number of write IO operations per second             |
         *     |         | disk.0.bandwidth.read   | bytes/s   | Bytes read per second                                |
         *     |         | disk.0.bandwidth.write  | bytes/s   | Bytes written per second                             |
         *     | network | network.0.pps.in        | packets/s | Public Network interface packets per second received |
         *     |         | network.0.pps.out       | packets/s | Public Network interface packets per second sent     |
         *     |         | network.0.bandwidth.in  | bytes/s   | Public Network interface bytes/s received            |
         *     |         | network.0.bandwidth.out | bytes/s   | Public Network interface bytes/s sent                |
         *
         *     Metrics are available for the last 30 days only.
         *
         *     If you do not provide the step argument we will automatically adjust it so that a maximum of 200 samples are returned.
         *
         *     We limit the number of samples returned to a maximum of 500 and will adjust the step parameter accordingly.
         *
         */
        get: operations["get_server_metrics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ssh_keys": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List SSH keys
         * @description Returns all SSH key objects.
         */
        get: operations["list_ssh_keys"];
        put?: never;
        /**
         * Create an SSH key
         * @description Creates a new SSH key with the given `name` and `public_key`. Once an SSH key is created, it can be used in other calls such as creating Servers.
         */
        post: operations["create_ssh_key"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/ssh_keys/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a SSH key
         * @description Returns a specific SSH key object.
         */
        get: operations["get_ssh_key"];
        /**
         * Update an SSH key
         * @description Updates an SSH key. You can update an SSH key name and an SSH key labels.
         *
         */
        put: operations["update_ssh_key"];
        post?: never;
        /**
         * Delete an SSH key
         * @description Deletes an SSH key. It cannot be used anymore.
         */
        delete: operations["delete_ssh_key"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Volumes
         * @description Gets all existing Volumes that you have available.
         */
        get: operations["list_volumes"];
        put?: never;
        /**
         * Create a Volume
         * @description Creates a new Volume attached to a Server. If you want to create a Volume that is not attached to a Server, you need to provide the `location` key instead of `server`. This can be either the ID or the name of the Location this Volume will be created in. Note that a Volume can be attached to a Server only in the same Location as the Volume itself.
         *
         *     Specifying the Server during Volume creation will automatically attach the Volume to that Server after it has been initialized. In that case, the `next_actions` key in the response is an array which contains a single `attach_volume` action.
         *
         *     The minimum Volume size is 10GB and the maximum size is 10TB (10240GB).
         *
         *     A volume’s name can consist of alphanumeric characters, dashes, underscores, and dots, but has to start and end with an alphanumeric character. The total length is limited to 64 characters. Volume names must be unique per Project.
         *
         *     #### Call specific error codes
         *
         *     | Code                                | Description                                         |
         *     |-------------------------------------|-----------------------------------------------------|
         *     | `no_space_left_in_location`         | There is no volume space left in the given location |
         *
         */
        post: operations["create_volume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions
         * @description Returns all Action objects. You can `sort` the results by using the sort URI parameter, and filter them with the `status` and `id` parameter.
         */
        get: operations["list_volumes_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/actions/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action
         * @description Returns a specific Action object.
         */
        get: operations["get_volumes_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a Volume
         * @description Gets a specific Volume object.
         */
        get: operations["get_volume"];
        /**
         * Update a Volume
         * @description Updates the Volume properties.
         *
         */
        put: operations["update_volume"];
        post?: never;
        /**
         * Delete a Volume
         * @description Deletes a volume. All Volume data is irreversibly destroyed. The Volume must not be attached to a Server and it must not have delete protection enabled.
         */
        delete: operations["delete_volume"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/{id}/actions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Actions for a Volume
         * @description Returns all Action objects for a Volume. You can `sort` the results by using the sort URI parameter, and filter them with the `status` parameter.
         */
        get: operations["list_volume_actions"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/{id}/actions/attach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Attach Volume to a Server
         * @description Attaches a Volume to a Server. Works only if the Server is in the same Location as the Volume.
         */
        post: operations["attach_volume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/{id}/actions/change_protection": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Change Volume Protection
         * @description Changes the protection configuration of a Volume.
         */
        post: operations["change_volume_protection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/{id}/actions/detach": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Detach Volume
         * @description Detaches a Volume from the Server it’s attached to. You may attach it to a Server again at a later time.
         */
        post: operations["detach_volume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/{id}/actions/resize": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Resize Volume
         * @description Changes the size of a Volume. Note that downsizing a Volume is not possible.
         */
        post: operations["resize_volume"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/volumes/{id}/actions/{action_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get an Action for a Volume
         * @description Returns a specific Action for a Volume.
         */
        get: operations["get_volume_action"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: never;
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    get_actions: {
        parameters: {
            query: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Actions](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                    };
                };
            };
        };
    };
    get_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for getting an [Action](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_certificates: {
        parameters: {
            query?: {
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc" | "created" | "created:asc" | "created:desc";
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Filter resources by type. Can be used multiple times. The response will only
                 *     contain the resources with the specified type.
                 *      */
                type?: "uploaded" | "managed";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `certificates` key contains an array of Certificate objects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "certificates": [
                     *         {
                     *           "id": 897,
                     *           "name": "my website cert",
                     *           "labels": {
                     *             "key": "value"
                     *           },
                     *           "type": "uploaded",
                     *           "certificate": "-----BEGIN CERTIFICATE-----\n...",
                     *           "created": "2019-01-08T12:10:00+00:00",
                     *           "not_valid_before": "2019-01-08T10:00:00+00:00",
                     *           "not_valid_after": "2019-07-08T09:59:59+00:00",
                     *           "domain_names": [
                     *             "example.com",
                     *             "webmail.example.com",
                     *             "www.example.com"
                     *           ],
                     *           "fingerprint": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                     *           "status": null,
                     *           "used_by": [
                     *             {
                     *               "id": 4711,
                     *               "type": "load_balancer"
                     *             }
                     *           ]
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        certificates: {
                            /**
                             * Format: int64
                             * @description ID of the Certificate.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Type of the Certificate.
                             * @example uploaded
                             * @enum {string}
                             */
                            type?: "uploaded" | "managed";
                            /**
                             * @description Certificate and chain in PEM format, in order so that each record directly certifies the one preceding.
                             * @example -----BEGIN CERTIFICATE-----
                             *     ...
                             */
                            certificate: string | null;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Point in time when the Certificate becomes valid (in ISO-8601 format).
                             * @example 2019-01-08T10:00:00+00:00
                             */
                            not_valid_before: string | null;
                            /**
                             * @description Point in time when the Certificate stops being valid (in ISO-8601 format).
                             *
                             * @example 2019-07-08T09:59:59+00:00
                             */
                            not_valid_after: string | null;
                            /**
                             * @description Domains and subdomains covered by the Certificate.
                             * @example [
                             *       "example.com",
                             *       "webmail.example.com",
                             *       "www.example.com"
                             *     ]
                             */
                            domain_names: string[];
                            /**
                             * @description SHA256 fingerprint of the Certificate.
                             * @example 03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f
                             */
                            fingerprint: string | null;
                            /** @description Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates. */
                            status?: {
                                /**
                                 * @description Status of the issuance process of the Certificate.
                                 * @example completed
                                 * @enum {string}
                                 */
                                issuance?: "pending" | "completed" | "failed";
                                /**
                                 * @description Status of the renewal process of the Certificate.
                                 * @example scheduled
                                 * @enum {string}
                                 */
                                renewal?: "scheduled" | "pending" | "failed" | "unavailable";
                                /**
                                 * @description If issuance or renewal reports `failed`, this property contains information about what happened.
                                 * @example null
                                 */
                                error?: {
                                    code?: string;
                                    message?: string;
                                } | null;
                            } | null;
                            /** @description Resources currently using the Certificate. */
                            used_by: {
                                /**
                                 * Format: int64
                                 * @description ID of resource referenced.
                                 * @example 4711
                                 */
                                id: number;
                                /**
                                 * @description Type of resource referenced.
                                 * @example load_balancer
                                 */
                                type: string;
                            }[];
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_certificate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the Certificate.
                     * @example my website cert
                     */
                    name: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Choose between uploading a Certificate in PEM format or requesting a managed *Let's Encrypt* Certificate.
                     * @default uploaded
                     * @example uploaded
                     * @enum {string}
                     */
                    type?: "uploaded" | "managed";
                    /**
                     * @description Certificate and chain in PEM format, in order so that each record directly certifies the one preceding. Required for type `uploaded` Certificates.
                     * @example -----BEGIN CERTIFICATE-----
                     *     ...
                     */
                    certificate?: string;
                    /**
                     * @description Certificate key in PEM format. Required for type `uploaded` Certificates.
                     * @example -----BEGIN PRIVATE KEY-----
                     *     ...
                     */
                    private_key?: string;
                    /**
                     * @description Domains and subdomains that should be contained in the Certificate issued by *Let's Encrypt*. Required for type `managed` Certificates.
                     * @example null
                     */
                    domain_names?: string[];
                };
            };
        };
        responses: {
            /** @description The `certificate` key contains the Certificate that was just created. For type `managed` Certificates the `action` key contains the Action that allows for tracking the issuance process. For type `uploaded` Certificates the `action` is always null. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Certificate */
                        certificate: {
                            /**
                             * Format: int64
                             * @description ID of the Certificate.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Type of the Certificate.
                             * @example uploaded
                             * @enum {string}
                             */
                            type?: "uploaded" | "managed";
                            /**
                             * @description Certificate and chain in PEM format, in order so that each record directly certifies the one preceding.
                             * @example -----BEGIN CERTIFICATE-----
                             *     ...
                             */
                            certificate: string | null;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Point in time when the Certificate becomes valid (in ISO-8601 format).
                             * @example 2019-01-08T10:00:00+00:00
                             */
                            not_valid_before: string | null;
                            /**
                             * @description Point in time when the Certificate stops being valid (in ISO-8601 format).
                             *
                             * @example 2019-07-08T09:59:59+00:00
                             */
                            not_valid_after: string | null;
                            /**
                             * @description Domains and subdomains covered by the Certificate.
                             * @example [
                             *       "example.com",
                             *       "webmail.example.com",
                             *       "www.example.com"
                             *     ]
                             */
                            domain_names: string[];
                            /**
                             * @description SHA256 fingerprint of the Certificate.
                             * @example 03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f
                             */
                            fingerprint: string | null;
                            /** @description Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates. */
                            status?: {
                                /**
                                 * @description Status of the issuance process of the Certificate.
                                 * @example completed
                                 * @enum {string}
                                 */
                                issuance?: "pending" | "completed" | "failed";
                                /**
                                 * @description Status of the renewal process of the Certificate.
                                 * @example scheduled
                                 * @enum {string}
                                 */
                                renewal?: "scheduled" | "pending" | "failed" | "unavailable";
                                /**
                                 * @description If issuance or renewal reports `failed`, this property contains information about what happened.
                                 * @example null
                                 */
                                error?: {
                                    code?: string;
                                    message?: string;
                                } | null;
                            } | null;
                            /** @description Resources currently using the Certificate. */
                            used_by: {
                                /**
                                 * Format: int64
                                 * @description ID of resource referenced.
                                 * @example 4711
                                 */
                                id: number;
                                /**
                                 * @description Type of resource referenced.
                                 * @example load_balancer
                                 */
                                type: string;
                            }[];
                        };
                        /** ActionNullable */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        } | null;
                    };
                };
            };
        };
    };
    list_certificates_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_certificates_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply has this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_certificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Certificate. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `certificate` key contains a Certificate object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "certificate": {
                     *         "id": 897,
                     *         "name": "my website cert",
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "type": "uploaded",
                     *         "certificate": "-----BEGIN CERTIFICATE-----\n...",
                     *         "created": "2019-01-08T12:10:00+00:00",
                     *         "not_valid_before": "2019-01-08T10:00:00+00:00",
                     *         "not_valid_after": "2019-07-08T09:59:59+00:00",
                     *         "domain_names": [
                     *           "example.com",
                     *           "webmail.example.com",
                     *           "www.example.com"
                     *         ],
                     *         "fingerprint": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                     *         "status": null,
                     *         "used_by": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": {
                        /** Certificate */
                        certificate: {
                            /**
                             * Format: int64
                             * @description ID of the Certificate.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Type of the Certificate.
                             * @example uploaded
                             * @enum {string}
                             */
                            type?: "uploaded" | "managed";
                            /**
                             * @description Certificate and chain in PEM format, in order so that each record directly certifies the one preceding.
                             * @example -----BEGIN CERTIFICATE-----
                             *     ...
                             */
                            certificate: string | null;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Point in time when the Certificate becomes valid (in ISO-8601 format).
                             * @example 2019-01-08T10:00:00+00:00
                             */
                            not_valid_before: string | null;
                            /**
                             * @description Point in time when the Certificate stops being valid (in ISO-8601 format).
                             *
                             * @example 2019-07-08T09:59:59+00:00
                             */
                            not_valid_after: string | null;
                            /**
                             * @description Domains and subdomains covered by the Certificate.
                             * @example [
                             *       "example.com",
                             *       "webmail.example.com",
                             *       "www.example.com"
                             *     ]
                             */
                            domain_names: string[];
                            /**
                             * @description SHA256 fingerprint of the Certificate.
                             * @example 03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f
                             */
                            fingerprint: string | null;
                            /** @description Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates. */
                            status?: {
                                /**
                                 * @description Status of the issuance process of the Certificate.
                                 * @example completed
                                 * @enum {string}
                                 */
                                issuance?: "pending" | "completed" | "failed";
                                /**
                                 * @description Status of the renewal process of the Certificate.
                                 * @example scheduled
                                 * @enum {string}
                                 */
                                renewal?: "scheduled" | "pending" | "failed" | "unavailable";
                                /**
                                 * @description If issuance or renewal reports `failed`, this property contains information about what happened.
                                 * @example null
                                 */
                                error?: {
                                    code?: string;
                                    message?: string;
                                } | null;
                            } | null;
                            /** @description Resources currently using the Certificate. */
                            used_by: {
                                /**
                                 * Format: int64
                                 * @description ID of resource referenced.
                                 * @example 4711
                                 */
                                id: number;
                                /**
                                 * @description Type of resource referenced.
                                 * @example load_balancer
                                 */
                                type: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    update_certificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Certificate. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New Certificate name.
                     * @example my website cert
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `certificate` key contains the Certificate that was just updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "certificate": {
                     *         "id": 897,
                     *         "name": "my website cert",
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "type": "uploaded",
                     *         "certificate": "-----BEGIN CERTIFICATE-----\n...",
                     *         "created": "2019-01-08T12:10:00+00:00",
                     *         "not_valid_before": "2019-01-08T10:00:00+00:00",
                     *         "not_valid_after": "2019-07-08T09:59:59+00:00",
                     *         "domain_names": [
                     *           "example.com",
                     *           "webmail.example.com",
                     *           "www.example.com"
                     *         ],
                     *         "fingerprint": "03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f",
                     *         "status": null,
                     *         "used_by": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ]
                     *       }
                     *     } */
                    "application/json": {
                        /** Certificate */
                        certificate: {
                            /**
                             * Format: int64
                             * @description ID of the Certificate.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Type of the Certificate.
                             * @example uploaded
                             * @enum {string}
                             */
                            type?: "uploaded" | "managed";
                            /**
                             * @description Certificate and chain in PEM format, in order so that each record directly certifies the one preceding.
                             * @example -----BEGIN CERTIFICATE-----
                             *     ...
                             */
                            certificate: string | null;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Point in time when the Certificate becomes valid (in ISO-8601 format).
                             * @example 2019-01-08T10:00:00+00:00
                             */
                            not_valid_before: string | null;
                            /**
                             * @description Point in time when the Certificate stops being valid (in ISO-8601 format).
                             *
                             * @example 2019-07-08T09:59:59+00:00
                             */
                            not_valid_after: string | null;
                            /**
                             * @description Domains and subdomains covered by the Certificate.
                             * @example [
                             *       "example.com",
                             *       "webmail.example.com",
                             *       "www.example.com"
                             *     ]
                             */
                            domain_names: string[];
                            /**
                             * @description SHA256 fingerprint of the Certificate.
                             * @example 03:c7:55:9b:2a:d1:04:17:09:f6:d0:7f:18:34:63:d4:3e:5f
                             */
                            fingerprint: string | null;
                            /** @description Current status of a type `managed` Certificate, always *null* for type `uploaded` Certificates. */
                            status?: {
                                /**
                                 * @description Status of the issuance process of the Certificate.
                                 * @example completed
                                 * @enum {string}
                                 */
                                issuance?: "pending" | "completed" | "failed";
                                /**
                                 * @description Status of the renewal process of the Certificate.
                                 * @example scheduled
                                 * @enum {string}
                                 */
                                renewal?: "scheduled" | "pending" | "failed" | "unavailable";
                                /**
                                 * @description If issuance or renewal reports `failed`, this property contains information about what happened.
                                 * @example null
                                 */
                                error?: {
                                    code?: string;
                                    message?: string;
                                } | null;
                            } | null;
                            /** @description Resources currently using the Certificate. */
                            used_by: {
                                /**
                                 * Format: int64
                                 * @description ID of resource referenced.
                                 * @example 4711
                                 */
                                id: number;
                                /**
                                 * @description Type of resource referenced.
                                 * @example load_balancer
                                 */
                                type: string;
                            }[];
                        };
                    };
                };
            };
        };
    };
    delete_certificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Certificate. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Certificate deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_certificate_actions: {
        parameters: {
            query?: {
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Certificate. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 14,
                     *           "command": "issue_certificate",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2021-01-30T23:55:00+00:00",
                     *           "finished": "2021-01-30T23:57:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 896,
                     *               "type": "certificate"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    retry_certificate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Certificate. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the resulting Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 14,
                     *         "command": "issue_certificate",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2021-01-30T23:55:00+00:00",
                     *         "finished": "2021-01-30T23:57:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 896,
                     *             "type": "certificate"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_certificate_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Certificate. */
                id: number;
                /** @description ID of the Action. */
                action_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the Certificate Action. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 14,
                     *         "command": "issue_certificate",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2021-01-30T23:55:00+00:00",
                     *         "finished": "2021-01-30T23:57:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 896,
                     *             "type": "certificate"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_datacenters: {
        parameters: {
            query?: {
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains the queried [Datacenters](#datacenters). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of [Datacenters](#datacenters). */
                        datacenters: {
                            /**
                             * Format: int64
                             * @description ID of the Datacenter.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Unique name for the [Datacenter](#datacenters).
                             *
                             *     Can be used as a more descriptive identifier.
                             *
                             * @example fsn1-dc8
                             */
                            name: string;
                            /**
                             * @description Descriptive name for the [Datacenter](#datacenters).
                             *
                             *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                             *
                             * @example Falkenstein DC Park 8
                             */
                            description: string;
                            /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                             *      */
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                             *      */
                            server_types: {
                                /**
                                 * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                 *
                                 *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                 *     temporarily out of stock.
                                 *
                                 * @example [
                                 *       1,
                                 *       2,
                                 *       3
                                 *     ]
                                 */
                                supported: number[];
                                /**
                                 * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                 *
                                 *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                 *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                 *
                                 * @example [
                                 *       1,
                                 *       2,
                                 *       3
                                 *     ]
                                 */
                                available: number[];
                                /**
                                 * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                 *
                                 *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                 *
                                 * @example [
                                 *       1,
                                 *       2,
                                 *       3
                                 *     ]
                                 */
                                available_for_migration: number[];
                            };
                        }[];
                        /**
                         * Format: int64
                         * @description Recommended [Datacenter](#datacenters) for creating new resources.
                         * @example 1
                         */
                        recommendation: number;
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_datacenter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Datacenter. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Contains the queried [Datacenter](#datacenters). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        datacenter: {
                            /**
                             * Format: int64
                             * @description ID of the Datacenter.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Unique name for the [Datacenter](#datacenters).
                             *
                             *     Can be used as a more descriptive identifier.
                             *
                             * @example fsn1-dc8
                             */
                            name: string;
                            /**
                             * @description Descriptive name for the [Datacenter](#datacenters).
                             *
                             *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                             *
                             * @example Falkenstein DC Park 8
                             */
                            description: string;
                            /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                             *      */
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                             *      */
                            server_types: {
                                /**
                                 * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                 *
                                 *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                 *     temporarily out of stock.
                                 *
                                 * @example [
                                 *       1,
                                 *       2,
                                 *       3
                                 *     ]
                                 */
                                supported: number[];
                                /**
                                 * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                 *
                                 *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                 *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                 *
                                 * @example [
                                 *       1,
                                 *       2,
                                 *       3
                                 *     ]
                                 */
                                available: number[];
                                /**
                                 * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                 *
                                 *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                 *
                                 * @example [
                                 *       1,
                                 *       2,
                                 *       3
                                 *     ]
                                 */
                                available_for_migration: number[];
                            };
                        };
                    };
                };
            };
        };
    };
    list_firewalls: {
        parameters: {
            query?: {
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc" | "created" | "created:asc" | "created:desc";
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `firewalls` key contains the [Firewalls](#firewalls). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        firewalls: {
                            /**
                             * Format: int64
                             * @description ID of the Firewall.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the [Firewall](#firewalls).
                             *
                             *     Limited to a maximum of 128 characters.
                             *
                             *     Must be unique per Project.
                             *
                             * @example new-name
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels?: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            rules: {
                                /** @description Description of the rule. */
                                description?: string | null;
                                /**
                                 * @description Traffic direction in which the rule should be applied to.
                                 *
                                 *     Use `source_ips` for direction `in` and `destination_ips` for direction `out` to specify IPs.
                                 *
                                 * @example in
                                 * @enum {string}
                                 */
                                direction: "in" | "out";
                                /**
                                 * @description List of permitted IPv4/IPv6 addresses for incoming traffic.
                                 *
                                 *     The `direction` must be set to `in`.
                                 *
                                 *     IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                                 *     blocks at most.
                                 *
                                 *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                                 *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                                 *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                                 *
                                 *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                                 *
                                 * @example [
                                 *       "28.239.13.1/32",
                                 *       "28.239.14.0/24",
                                 *       "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                                 *     ]
                                 */
                                source_ips: string[];
                                /**
                                 * @description List of permitted IPv4/IPv6 addresses for outgoing traffic.
                                 *
                                 *     The `direction` must be set to `out`.
                                 *
                                 *     IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                                 *     blocks at most.
                                 *
                                 *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                                 *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                                 *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                                 *
                                 *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                                 *
                                 * @example []
                                 */
                                destination_ips: string[];
                                /**
                                 * @description Network protocol to apply the rule for.
                                 * @enum {string}
                                 */
                                protocol: "tcp" | "udp" | "icmp" | "esp" | "gre";
                                /**
                                 * @description Port or port range to apply the rule for.
                                 *
                                 *     Only applicable for protocols `tcp` and `udp`.
                                 *
                                 *     A port range can be specified by separating lower and upper bounds with a dash. `1024-5000` will include
                                 *     all ports starting from 1024 up to port 5000.
                                 *
                                 * @example 80
                                 */
                                port: string | null;
                            }[];
                            applied_to: {
                                /**
                                 * @description The type of resource to apply.
                                 * @example server
                                 * @enum {string}
                                 */
                                type: "server" | "label_selector";
                                /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                                 *
                                 *     Only set for `type` `server`, otherwise `null`.
                                 *      */
                                server?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server.
                                     * @example 42
                                     */
                                    id: number;
                                };
                                /** @description [Label Selector](#label-selector) the [Firewall](#firewalls) is applied to.
                                 *
                                 *     Only set for `type` `label_selector`, otherwise `null`.
                                 *      */
                                label_selector?: {
                                    /**
                                     * @description The selector.
                                     * @example env=prod
                                     */
                                    selector: string;
                                };
                                /** @description Resources applied to via this [Label Selector](#label-selector).
                                 *      */
                                applied_to_resources?: {
                                    /**
                                     * @description Type of resource.
                                     * @example server
                                     * @enum {string}
                                     */
                                    type?: "server";
                                    /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                                     *
                                     *     Only set for `type` `server`, otherwise `null`.
                                     *      */
                                    server?: {
                                        /**
                                         * Format: int64
                                         * @description ID of the Server.
                                         * @example 42
                                         */
                                        id: number;
                                    };
                                }[];
                            }[];
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_firewall: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "Corporate Intranet Protection",
                 *       "labels": {
                 *         "key": "value"
                 *       },
                 *       "rules": [
                 *         {
                 *           "description": "Allow port 80",
                 *           "direction": "in",
                 *           "source_ips": [
                 *             "28.239.13.1/32",
                 *             "28.239.14.0/24",
                 *             "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                 *           ],
                 *           "protocol": "tcp",
                 *           "port": "80"
                 *         }
                 *       ],
                 *       "apply_to": [
                 *         {
                 *           "type": "server",
                 *           "server": {
                 *             "id": 42
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    /**
                     * @description Name of the [Firewall](#firewalls).
                     *
                     *     Limited to a maximum of 128 characters.
                     *
                     *     Must be unique per Project.
                     *
                     * @example new-name
                     */
                    name: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Array of rules.
                     *
                     *     Rules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits).
                     *
                     * @example [
                     *       {
                     *         "direction": "in",
                     *         "source_ips": [
                     *           "28.239.13.1/32",
                     *           "28.239.14.0/24",
                     *           "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                     *         ],
                     *         "protocol": "tcp",
                     *         "port": "80"
                     *       }
                     *     ]
                     */
                    rules?: {
                        /** @description Description of the rule. */
                        description?: string | null;
                        /**
                         * @description Traffic direction in which the rule should be applied to.
                         *
                         *     Use `source_ips` for direction `in` and `destination_ips` for direction `out` to specify IPs.
                         *
                         * @example in
                         * @enum {string}
                         */
                        direction: "in" | "out";
                        /**
                         * @description List of permitted IPv4/IPv6 addresses for incoming traffic.
                         *
                         *     The `direction` must be set to `in`.
                         *
                         *     IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                         *     blocks at most.
                         *
                         *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                         *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                         *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                         *
                         *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                         *
                         * @example [
                         *       "28.239.13.1/32",
                         *       "28.239.14.0/24",
                         *       "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                         *     ]
                         */
                        source_ips?: string[];
                        /**
                         * @description List of permitted IPv4/IPv6 addresses for outgoing traffic.
                         *
                         *     The `direction` must be set to `out`.
                         *
                         *     IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                         *     blocks at most.
                         *
                         *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                         *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                         *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                         *
                         *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                         *
                         * @example []
                         */
                        destination_ips?: string[];
                        /**
                         * @description Network protocol to apply the rule for.
                         * @enum {string}
                         */
                        protocol: "tcp" | "udp" | "icmp" | "esp" | "gre";
                        /**
                         * @description Port or port range to apply the rule for.
                         *
                         *     Only applicable for protocols `tcp` and `udp`.
                         *
                         *     A port range can be specified by separating lower and upper bounds with a dash. `1024-5000` will include
                         *     all ports starting from 1024 up to port 5000.
                         *
                         * @example 80
                         */
                        port?: string;
                    }[];
                    /** @description Resources to apply the [Firewall](#firewalls) to.
                     *
                     *     Resources added directly are taking precedence over those added via a [Label Selector](#label-selector).
                     *      */
                    apply_to?: {
                        /**
                         * @description Type of the resource.
                         * @enum {string}
                         */
                        type: "server" | "label_selector";
                        /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                         *
                         *     Only set for `type` `server`, otherwise `null`.
                         *      */
                        server?: {
                            /**
                             * Format: int64
                             * @description ID of the [Server](#servers).
                             */
                            id: number;
                        };
                        /** @description [Label Selector](#label-selector) the [Firewall](#firewalls) is applied to.
                         *
                         *     Only set for `type` `label_selector`, otherwise `null`.
                         *      */
                        label_selector?: {
                            /**
                             * @description The selector.
                             * @example env=prod
                             */
                            selector: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The `firewall` key contains the created [Firewall](#firewalls). */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** FirewallResponse */
                        firewall?: {
                            /**
                             * Format: int64
                             * @description ID of the Firewall.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the [Firewall](#firewalls).
                             *
                             *     Limited to a maximum of 128 characters.
                             *
                             *     Must be unique per Project.
                             *
                             * @example new-name
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels?: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            rules: {
                                /** @description Description of the rule. */
                                description?: string | null;
                                /**
                                 * @description Traffic direction in which the rule should be applied to.
                                 *
                                 *     Use `source_ips` for direction `in` and `destination_ips` for direction `out` to specify IPs.
                                 *
                                 * @example in
                                 * @enum {string}
                                 */
                                direction: "in" | "out";
                                /**
                                 * @description List of permitted IPv4/IPv6 addresses for incoming traffic.
                                 *
                                 *     The `direction` must be set to `in`.
                                 *
                                 *     IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                                 *     blocks at most.
                                 *
                                 *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                                 *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                                 *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                                 *
                                 *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                                 *
                                 * @example [
                                 *       "28.239.13.1/32",
                                 *       "28.239.14.0/24",
                                 *       "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                                 *     ]
                                 */
                                source_ips: string[];
                                /**
                                 * @description List of permitted IPv4/IPv6 addresses for outgoing traffic.
                                 *
                                 *     The `direction` must be set to `out`.
                                 *
                                 *     IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                                 *     blocks at most.
                                 *
                                 *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                                 *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                                 *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                                 *
                                 *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                                 *
                                 * @example []
                                 */
                                destination_ips: string[];
                                /**
                                 * @description Network protocol to apply the rule for.
                                 * @enum {string}
                                 */
                                protocol: "tcp" | "udp" | "icmp" | "esp" | "gre";
                                /**
                                 * @description Port or port range to apply the rule for.
                                 *
                                 *     Only applicable for protocols `tcp` and `udp`.
                                 *
                                 *     A port range can be specified by separating lower and upper bounds with a dash. `1024-5000` will include
                                 *     all ports starting from 1024 up to port 5000.
                                 *
                                 * @example 80
                                 */
                                port: string | null;
                            }[];
                            applied_to: {
                                /**
                                 * @description The type of resource to apply.
                                 * @example server
                                 * @enum {string}
                                 */
                                type: "server" | "label_selector";
                                /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                                 *
                                 *     Only set for `type` `server`, otherwise `null`.
                                 *      */
                                server?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server.
                                     * @example 42
                                     */
                                    id: number;
                                };
                                /** @description [Label Selector](#label-selector) the [Firewall](#firewalls) is applied to.
                                 *
                                 *     Only set for `type` `label_selector`, otherwise `null`.
                                 *      */
                                label_selector?: {
                                    /**
                                     * @description The selector.
                                     * @example env=prod
                                     */
                                    selector: string;
                                };
                                /** @description Resources applied to via this [Label Selector](#label-selector).
                                 *      */
                                applied_to_resources?: {
                                    /**
                                     * @description Type of resource.
                                     * @example server
                                     * @enum {string}
                                     */
                                    type?: "server";
                                    /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                                     *
                                     *     Only set for `type` `server`, otherwise `null`.
                                     *      */
                                    server?: {
                                        /**
                                         * Format: int64
                                         * @description ID of the Server.
                                         * @example 42
                                         */
                                        id: number;
                                    };
                                }[];
                            }[];
                        };
                        /** @example [
                         *       {
                         *         "id": 13,
                         *         "command": "set_firewall_rules",
                         *         "status": "success",
                         *         "progress": 100,
                         *         "started": "2016-01-30T23:55:00+00:00",
                         *         "finished": "2016-01-30T23:56:00+00:00",
                         *         "resources": [
                         *           {
                         *             "id": 38,
                         *             "type": "firewall"
                         *           }
                         *         ],
                         *         "error": {
                         *           "code": "action_failed",
                         *           "message": "Action failed"
                         *         }
                         *       },
                         *       {
                         *         "id": 14,
                         *         "command": "apply_firewall",
                         *         "status": "success",
                         *         "progress": 100,
                         *         "started": "2016-01-30T23:55:00+00:00",
                         *         "finished": "2016-01-30T23:56:00+00:00",
                         *         "resources": [
                         *           {
                         *             "id": 42,
                         *             "type": "server"
                         *           },
                         *           {
                         *             "id": 38,
                         *             "type": "firewall"
                         *           }
                         *         ],
                         *         "error": {
                         *           "code": "action_failed",
                         *           "message": "Action failed"
                         *         }
                         *       }
                         *     ] */
                        actions?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                    };
                };
            };
        };
    };
    list_firewalls_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of [Actions](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_firewalls_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the [Action](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_firewall: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Firewall. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `firewall` key contains the [Firewall](#firewalls). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** FirewallResponse */
                        firewall: {
                            /**
                             * Format: int64
                             * @description ID of the Firewall.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the [Firewall](#firewalls).
                             *
                             *     Limited to a maximum of 128 characters.
                             *
                             *     Must be unique per Project.
                             *
                             * @example new-name
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels?: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            rules: {
                                /** @description Description of the rule. */
                                description?: string | null;
                                /**
                                 * @description Traffic direction in which the rule should be applied to.
                                 *
                                 *     Use `source_ips` for direction `in` and `destination_ips` for direction `out` to specify IPs.
                                 *
                                 * @example in
                                 * @enum {string}
                                 */
                                direction: "in" | "out";
                                /**
                                 * @description List of permitted IPv4/IPv6 addresses for incoming traffic.
                                 *
                                 *     The `direction` must be set to `in`.
                                 *
                                 *     IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                                 *     blocks at most.
                                 *
                                 *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                                 *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                                 *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                                 *
                                 *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                                 *
                                 * @example [
                                 *       "28.239.13.1/32",
                                 *       "28.239.14.0/24",
                                 *       "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                                 *     ]
                                 */
                                source_ips: string[];
                                /**
                                 * @description List of permitted IPv4/IPv6 addresses for outgoing traffic.
                                 *
                                 *     The `direction` must be set to `out`.
                                 *
                                 *     IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                                 *     blocks at most.
                                 *
                                 *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                                 *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                                 *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                                 *
                                 *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                                 *
                                 * @example []
                                 */
                                destination_ips: string[];
                                /**
                                 * @description Network protocol to apply the rule for.
                                 * @enum {string}
                                 */
                                protocol: "tcp" | "udp" | "icmp" | "esp" | "gre";
                                /**
                                 * @description Port or port range to apply the rule for.
                                 *
                                 *     Only applicable for protocols `tcp` and `udp`.
                                 *
                                 *     A port range can be specified by separating lower and upper bounds with a dash. `1024-5000` will include
                                 *     all ports starting from 1024 up to port 5000.
                                 *
                                 * @example 80
                                 */
                                port: string | null;
                            }[];
                            applied_to: {
                                /**
                                 * @description The type of resource to apply.
                                 * @example server
                                 * @enum {string}
                                 */
                                type: "server" | "label_selector";
                                /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                                 *
                                 *     Only set for `type` `server`, otherwise `null`.
                                 *      */
                                server?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server.
                                     * @example 42
                                     */
                                    id: number;
                                };
                                /** @description [Label Selector](#label-selector) the [Firewall](#firewalls) is applied to.
                                 *
                                 *     Only set for `type` `label_selector`, otherwise `null`.
                                 *      */
                                label_selector?: {
                                    /**
                                     * @description The selector.
                                     * @example env=prod
                                     */
                                    selector: string;
                                };
                                /** @description Resources applied to via this [Label Selector](#label-selector).
                                 *      */
                                applied_to_resources?: {
                                    /**
                                     * @description Type of resource.
                                     * @example server
                                     * @enum {string}
                                     */
                                    type?: "server";
                                    /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                                     *
                                     *     Only set for `type` `server`, otherwise `null`.
                                     *      */
                                    server?: {
                                        /**
                                         * Format: int64
                                         * @description ID of the Server.
                                         * @example 42
                                         */
                                        id: number;
                                    };
                                }[];
                            }[];
                        };
                    };
                };
            };
        };
    };
    update_firewall: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Firewall. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the [Firewall](#firewalls).
                     *
                     *     Limited to a maximum of 128 characters.
                     *
                     *     Must be unique per Project.
                     *
                     * @example new-name
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `firewall` key contains the updated [Firewall](#firewalls). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** FirewallResponse */
                        firewall: {
                            /**
                             * Format: int64
                             * @description ID of the Firewall.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the [Firewall](#firewalls).
                             *
                             *     Limited to a maximum of 128 characters.
                             *
                             *     Must be unique per Project.
                             *
                             * @example new-name
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels?: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            rules: {
                                /** @description Description of the rule. */
                                description?: string | null;
                                /**
                                 * @description Traffic direction in which the rule should be applied to.
                                 *
                                 *     Use `source_ips` for direction `in` and `destination_ips` for direction `out` to specify IPs.
                                 *
                                 * @example in
                                 * @enum {string}
                                 */
                                direction: "in" | "out";
                                /**
                                 * @description List of permitted IPv4/IPv6 addresses for incoming traffic.
                                 *
                                 *     The `direction` must be set to `in`.
                                 *
                                 *     IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                                 *     blocks at most.
                                 *
                                 *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                                 *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                                 *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                                 *
                                 *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                                 *
                                 * @example [
                                 *       "28.239.13.1/32",
                                 *       "28.239.14.0/24",
                                 *       "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                                 *     ]
                                 */
                                source_ips: string[];
                                /**
                                 * @description List of permitted IPv4/IPv6 addresses for outgoing traffic.
                                 *
                                 *     The `direction` must be set to `out`.
                                 *
                                 *     IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                                 *     blocks at most.
                                 *
                                 *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                                 *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                                 *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                                 *
                                 *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                                 *
                                 * @example []
                                 */
                                destination_ips: string[];
                                /**
                                 * @description Network protocol to apply the rule for.
                                 * @enum {string}
                                 */
                                protocol: "tcp" | "udp" | "icmp" | "esp" | "gre";
                                /**
                                 * @description Port or port range to apply the rule for.
                                 *
                                 *     Only applicable for protocols `tcp` and `udp`.
                                 *
                                 *     A port range can be specified by separating lower and upper bounds with a dash. `1024-5000` will include
                                 *     all ports starting from 1024 up to port 5000.
                                 *
                                 * @example 80
                                 */
                                port: string | null;
                            }[];
                            applied_to: {
                                /**
                                 * @description The type of resource to apply.
                                 * @example server
                                 * @enum {string}
                                 */
                                type: "server" | "label_selector";
                                /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                                 *
                                 *     Only set for `type` `server`, otherwise `null`.
                                 *      */
                                server?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server.
                                     * @example 42
                                     */
                                    id: number;
                                };
                                /** @description [Label Selector](#label-selector) the [Firewall](#firewalls) is applied to.
                                 *
                                 *     Only set for `type` `label_selector`, otherwise `null`.
                                 *      */
                                label_selector?: {
                                    /**
                                     * @description The selector.
                                     * @example env=prod
                                     */
                                    selector: string;
                                };
                                /** @description Resources applied to via this [Label Selector](#label-selector).
                                 *      */
                                applied_to_resources?: {
                                    /**
                                     * @description Type of resource.
                                     * @example server
                                     * @enum {string}
                                     */
                                    type?: "server";
                                    /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                                     *
                                     *     Only set for `type` `server`, otherwise `null`.
                                     *      */
                                    server?: {
                                        /**
                                         * Format: int64
                                         * @description ID of the Server.
                                         * @example 42
                                         */
                                        id: number;
                                    };
                                }[];
                            }[];
                        };
                    };
                };
            };
        };
    };
    delete_firewall: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Firewall. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Firewall deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_firewall_actions: {
        parameters: {
            query?: {
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Firewall. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of [Actions](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "set_firewall_rules",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 38,
                     *               "type": "firewall"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    apply_firewall_to_resources: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Firewall. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "apply_to": [
                 *         {
                 *           "type": "server",
                 *           "server": {
                 *             "id": 42
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Resources to apply the [Firewall](#firewalls) to.
                     *
                     *     Extends existing resources.
                     *      */
                    apply_to: {
                        /**
                         * @description Type of the resource.
                         * @enum {string}
                         */
                        type: "server" | "label_selector";
                        /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                         *
                         *     Only set for `type` `server`, otherwise `null`.
                         *      */
                        server?: {
                            /**
                             * Format: int64
                             * @description ID of the [Server](#servers).
                             */
                            id: number;
                        };
                        /** @description [Label Selector](#label-selector) the [Firewall](#firewalls) is applied to.
                         *
                         *     Only set for `type` `label_selector`, otherwise `null`.
                         *      */
                        label_selector?: {
                            /**
                             * @description The selector.
                             * @example env=prod
                             */
                            selector: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The `actions` key contains multiple [Actions](#actions) with the `apply_firewall` command. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 14,
                     *           "command": "apply_firewall",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 42,
                     *               "type": "server"
                     *             },
                     *             {
                     *               "id": 38,
                     *               "type": "firewall"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                    };
                };
            };
        };
    };
    remove_firewall_from_resources: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Firewall. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "remove_from": [
                 *         {
                 *           "type": "server",
                 *           "server": {
                 *             "id": 42
                 *           }
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Resources to remove the [Firewall](#firewalls) from. */
                    remove_from: {
                        /**
                         * @description Type of the resource.
                         * @enum {string}
                         */
                        type: "server" | "label_selector";
                        /** @description [Server](#servers) the [Firewall](#firewalls) is applied to.
                         *
                         *     Only set for `type` `server`, otherwise `null`.
                         *      */
                        server?: {
                            /**
                             * Format: int64
                             * @description ID of the [Server](#servers).
                             */
                            id: number;
                        };
                        /** @description [Label Selector](#label-selector) the [Firewall](#firewalls) is applied to.
                         *
                         *     Only set for `type` `label_selector`, otherwise `null`.
                         *      */
                        label_selector?: {
                            /**
                             * @description The selector.
                             * @example env=prod
                             */
                            selector: string;
                        };
                    }[];
                };
            };
        };
        responses: {
            /** @description The `actions` key contains multiple [Actions](#actions) with the `remove_firewall` command. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 14,
                     *           "command": "remove_firewall",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 42,
                     *               "type": "server"
                     *             },
                     *             {
                     *               "id": 38,
                     *               "type": "firewall"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                    };
                };
            };
        };
    };
    set_firewall_rules: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Firewall. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "rules": [
                 *         {
                 *           "description": "Allow port 80",
                 *           "direction": "in",
                 *           "source_ips": [
                 *             "28.239.13.1/32",
                 *             "28.239.14.0/24",
                 *             "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                 *           ],
                 *           "protocol": "tcp",
                 *           "port": "80"
                 *         }
                 *       ]
                 *     } */
                "application/json": {
                    /** @description Array of rules.
                     *
                     *     Rules are limited to 50 entries per [Firewall](#firewalls) and [500 effective rules](https://docs.hetzner.com/cloud/firewalls/overview#limits).
                     *
                     *     Existing rules will be replaced.
                     *      */
                    rules: {
                        /** @description Description of the rule. */
                        description?: string | null;
                        /**
                         * @description Traffic direction in which the rule should be applied to.
                         *
                         *     Use `source_ips` for direction `in` and `destination_ips` for direction `out` to specify IPs.
                         *
                         * @example in
                         * @enum {string}
                         */
                        direction: "in" | "out";
                        /**
                         * @description List of permitted IPv4/IPv6 addresses for incoming traffic.
                         *
                         *     The `direction` must be set to `in`.
                         *
                         *     IPs must be provided in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                         *     blocks at most.
                         *
                         *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                         *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                         *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                         *
                         *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                         *
                         * @example [
                         *       "28.239.13.1/32",
                         *       "28.239.14.0/24",
                         *       "ff21:1eac:9a3b:ee58:5ca:990c:8bc9:c03b/128"
                         *     ]
                         */
                        source_ips?: string[];
                        /**
                         * @description List of permitted IPv4/IPv6 addresses for outgoing traffic.
                         *
                         *     The `direction` must be set to `out`.
                         *
                         *     IPs must be in [CIDR block notation](https://wikipedia.org/wiki/CIDR). You can specify 100 CIDR
                         *     blocks at most.
                         *
                         *     The CIDR blocks may refer to networks (with empty host bits) or single hosts.
                         *     For example, a network could be defined with `10.0.1.0/24` or `2001:db8:ff00:42::/64`,
                         *     and a single host with `10.0.1.1/32` or `2001:db8:ff00:42::8329/128`.
                         *
                         *     Use `0.0.0.0/0` to allow any IPv4 addresses and `::/0` to allow any IPv6 addresses.
                         *
                         * @example []
                         */
                        destination_ips?: string[];
                        /**
                         * @description Network protocol to apply the rule for.
                         * @enum {string}
                         */
                        protocol: "tcp" | "udp" | "icmp" | "esp" | "gre";
                        /**
                         * @description Port or port range to apply the rule for.
                         *
                         *     Only applicable for protocols `tcp` and `udp`.
                         *
                         *     A port range can be specified by separating lower and upper bounds with a dash. `1024-5000` will include
                         *     all ports starting from 1024 up to port 5000.
                         *
                         * @example 80
                         */
                        port?: string;
                    }[];
                };
            };
        };
        responses: {
            /** @description The `action` key contains an [Action](#actions) with the `set_firewall_rules` command and additionally one with the `apply_firewall` command per resource of the [Firewall](#firewalls). */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "set_firewall_rules",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 38,
                     *               "type": "firewall"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         },
                     *         {
                     *           "id": 14,
                     *           "command": "apply_firewall",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 38,
                     *               "type": "firewall"
                     *             },
                     *             {
                     *               "id": 42,
                     *               "type": "server"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                    };
                };
            };
        };
    };
    get_firewall_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Firewall. */
                id: number;
                /** @description ID of the Action. */
                action_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the [Firewall](#firewalls) [Action](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "set_firewall_rules",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 38,
                     *             "type": "firewall"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_floating_ips: {
        parameters: {
            query?: {
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "created" | "created:asc" | "created:desc";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Floating IPs](#floating-ips). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        floating_ips: {
                            /**
                             * Format: int64
                             * @description ID of the Floating IP.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description Description of the Resource.
                             * @example This describes my resource
                             */
                            description: string | null;
                            /**
                             * @description IP address.
                             * @example 2001:db8::/64
                             */
                            ip: string;
                            /**
                             * @description The Floating IP type.
                             * @example ipv6
                             * @enum {string}
                             */
                            type: "ipv4" | "ipv6";
                            /**
                             * Format: int64
                             * @description [Server](#servers) the [Floating IP](#floating-ips) is assigned to.
                             *
                             *     `null` if not assigned.
                             *
                             * @example 42
                             */
                            server: number | null;
                            /** @description List of reverse DNS entries for the [Floating IP](#floating-ips).
                             *      */
                            dns_ptr: {
                                /**
                                 * @description Single IPv4 or IPv6 address to create pointer for.
                                 *
                                 * @example 2001:db8::1
                                 */
                                ip: string;
                                /**
                                 * @description Domain Name to point to.
                                 *
                                 *     PTR record content used for reverse DNS.
                                 *
                                 * @example server.example.com
                                 */
                                dns_ptr: string;
                            }[];
                            home_location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /**
                             * @description Indicates whether the [Floating IP](#floating-ips) is blocked.
                             * @example false
                             */
                            blocked: boolean;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_floating_ip: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description The `type` argument is required while `home_location` and `server` are mutually exclusive. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The Floating IP type.
                     * @example ipv6
                     * @enum {string}
                     */
                    type: "ipv4" | "ipv6";
                    /**
                     * Format: int64
                     * @description [Server](#servers) the [Floating IP](#floating-ips) is assigned to.
                     *
                     *     `null` if not assigned.
                     *
                     * @example 42
                     */
                    server?: number | null;
                    /**
                     * @description Home [Location](#locations) for the [Floating IP](#floating-ips).
                     *
                     *     Either the ID or the name of the [Location](#locations).
                     *
                     *     Only optional if no [Server](#servers) is provided. Routing is optimized for this [Locations](#locations).
                     *
                     * @example fsn1
                     */
                    home_location?: string;
                    /**
                     * @description Description of the Resource.
                     * @example This describes my resource
                     */
                    description?: string | null;
                    /**
                     * @description Name of the Resource. Must be unique per Project.
                     * @example my-resource
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Response for creating a [Floating IP](#floating-ips).
             *
             *     Contains the created IP.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "floating_ip": {
                     *         "id": 4711,
                     *         "name": "Web Frontend",
                     *         "description": "Web Frontend",
                     *         "ip": "2001:db8::/64",
                     *         "type": "ipv6",
                     *         "server": 42,
                     *         "dns_ptr": [
                     *           {
                     *             "ip": "2001:db8::1",
                     *             "dns_ptr": "server.example.com"
                     *           }
                     *         ],
                     *         "home_location": {
                     *           "id": 1,
                     *           "name": "fsn1",
                     *           "description": "Falkenstein DC Park 1",
                     *           "country": "DE",
                     *           "city": "Falkenstein",
                     *           "latitude": 50.47612,
                     *           "longitude": 12.370071,
                     *           "network_zone": "eu-central"
                     *         },
                     *         "blocked": false,
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "created": "2016-01-30T23:50:00+00:00"
                     *       },
                     *       "action": {
                     *         "id": 13,
                     *         "command": "create_floating_ip",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        floating_ip: {
                            /**
                             * Format: int64
                             * @description ID of the Floating IP.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description Description of the Resource.
                             * @example This describes my resource
                             */
                            description: string | null;
                            /**
                             * @description IP address.
                             * @example 2001:db8::/64
                             */
                            ip: string;
                            /**
                             * @description The Floating IP type.
                             * @example ipv6
                             * @enum {string}
                             */
                            type: "ipv4" | "ipv6";
                            /**
                             * Format: int64
                             * @description [Server](#servers) the [Floating IP](#floating-ips) is assigned to.
                             *
                             *     `null` if not assigned.
                             *
                             * @example 42
                             */
                            server: number | null;
                            /** @description List of reverse DNS entries for the [Floating IP](#floating-ips).
                             *      */
                            dns_ptr: {
                                /**
                                 * @description Single IPv4 or IPv6 address to create pointer for.
                                 *
                                 * @example 2001:db8::1
                                 */
                                ip: string;
                                /**
                                 * @description Domain Name to point to.
                                 *
                                 *     PTR record content used for reverse DNS.
                                 *
                                 * @example server.example.com
                                 */
                                dns_ptr: string;
                            }[];
                            home_location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /**
                             * @description Indicates whether the [Floating IP](#floating-ips) is blocked.
                             * @example false
                             */
                            blocked: boolean;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                        };
                        /** Action */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_floating_ips_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Actions](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_floating_ips_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for getting a single [Action](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_floating_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for getting a single [Floating IP](#floating-ips). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        floating_ip: {
                            /**
                             * Format: int64
                             * @description ID of the Floating IP.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description Description of the Resource.
                             * @example This describes my resource
                             */
                            description: string | null;
                            /**
                             * @description IP address.
                             * @example 2001:db8::/64
                             */
                            ip: string;
                            /**
                             * @description The Floating IP type.
                             * @example ipv6
                             * @enum {string}
                             */
                            type: "ipv4" | "ipv6";
                            /**
                             * Format: int64
                             * @description [Server](#servers) the [Floating IP](#floating-ips) is assigned to.
                             *
                             *     `null` if not assigned.
                             *
                             * @example 42
                             */
                            server: number | null;
                            /** @description List of reverse DNS entries for the [Floating IP](#floating-ips).
                             *      */
                            dns_ptr: {
                                /**
                                 * @description Single IPv4 or IPv6 address to create pointer for.
                                 *
                                 * @example 2001:db8::1
                                 */
                                ip: string;
                                /**
                                 * @description Domain Name to point to.
                                 *
                                 *     PTR record content used for reverse DNS.
                                 *
                                 * @example server.example.com
                                 */
                                dns_ptr: string;
                            }[];
                            home_location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /**
                             * @description Indicates whether the [Floating IP](#floating-ips) is blocked.
                             * @example false
                             */
                            blocked: boolean;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                        };
                    };
                };
            };
        };
    };
    update_floating_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Description of the Resource.
                     * @example This describes my resource
                     */
                    description?: string | null;
                    /**
                     * @description Name of the Resource. Must be unique per Project.
                     * @example my-resource
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description Response for updating a [Floating IP](#floating-ips).
             *
             *     Contains the updated [Floating IP](#floating-ips).
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "floating_ip": {
                     *         "id": 4711,
                     *         "name": "Web Frontend",
                     *         "description": "Web Frontend",
                     *         "ip": "2001:db8::/64",
                     *         "type": "ipv6",
                     *         "server": 42,
                     *         "dns_ptr": [
                     *           {
                     *             "ip": "2001:db8::1",
                     *             "dns_ptr": "server.example.com"
                     *           }
                     *         ],
                     *         "home_location": {
                     *           "id": 1,
                     *           "name": "fsn1",
                     *           "description": "Falkenstein DC Park 1",
                     *           "country": "DE",
                     *           "city": "Falkenstein",
                     *           "latitude": 50.47612,
                     *           "longitude": 12.370071,
                     *           "network_zone": "eu-central"
                     *         },
                     *         "blocked": false,
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "created": "2016-01-30T23:50:00+00:00"
                     *       }
                     *     } */
                    "application/json": {
                        floating_ip: {
                            /**
                             * Format: int64
                             * @description ID of the Floating IP.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description Description of the Resource.
                             * @example This describes my resource
                             */
                            description: string | null;
                            /**
                             * @description IP address.
                             * @example 2001:db8::/64
                             */
                            ip: string;
                            /**
                             * @description The Floating IP type.
                             * @example ipv6
                             * @enum {string}
                             */
                            type: "ipv4" | "ipv6";
                            /**
                             * Format: int64
                             * @description [Server](#servers) the [Floating IP](#floating-ips) is assigned to.
                             *
                             *     `null` if not assigned.
                             *
                             * @example 42
                             */
                            server: number | null;
                            /** @description List of reverse DNS entries for the [Floating IP](#floating-ips).
                             *      */
                            dns_ptr: {
                                /**
                                 * @description Single IPv4 or IPv6 address to create pointer for.
                                 *
                                 * @example 2001:db8::1
                                 */
                                ip: string;
                                /**
                                 * @description Domain Name to point to.
                                 *
                                 *     PTR record content used for reverse DNS.
                                 *
                                 * @example server.example.com
                                 */
                                dns_ptr: string;
                            }[];
                            home_location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /**
                             * @description Indicates whether the [Floating IP](#floating-ips) is blocked.
                             * @example false
                             */
                            blocked: boolean;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                        };
                    };
                };
            };
        };
    };
    delete_floating_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Floating IP deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_floating_ip_actions: {
        parameters: {
            query?: {
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Actions](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "assign_floating_ip",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 4711,
                     *               "type": "server"
                     *             },
                     *             {
                     *               "id": 4712,
                     *               "type": "floating_ip"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    assign_floating_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description [Server](#servers) the [Floating IP](#floating-ips) is assigned to.
                     *
                     *     `null` if not assigned.
                     *
                     * @example 42
                     */
                    server: number | null;
                };
            };
        };
        responses: {
            /** @description Response for assigning a [Floating IP](#floating-ips).
             *
             *     Contains an [Action](#actions) of type `assign_floating_ip`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "assign_floating_ip",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "floating_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_floating_ip_dns_ptr: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
            };
            cookie?: never;
        };
        /** @description The `ip` attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Floating IP](#floating-ips). For IPv6 addresses this must be a single address within the `/64` subnet of the [Floating IP](#floating-ips).
         *
         *     The `dns_ptr` attribute specifies the hostname used for the IP address.
         *
         *     For IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.
         *      */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Single IPv4 or IPv6 address to create pointer for.
                     *
                     * @example 2001:db8::1
                     */
                    ip: string;
                    /**
                     * @description Domain Name to point to.
                     *
                     *     PTR record content used for reverse DNS.
                     *
                     * @example server.example.com
                     */
                    dns_ptr: string;
                };
            };
        };
        responses: {
            /** @description Response for changing a [Floating IPs](#floating-ips) DNS pointer.
             *
             *     Contains an [Action](#actions) of type `change_dns_ptr`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_dns_ptr",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "floating_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_floating_ip_protection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Prevent the Resource from being deleted.
                     * @example false
                     */
                    delete: boolean;
                };
            };
        };
        responses: {
            /** @description Response for changing a [Floating IPs](#floating-ips) protection settings.
             *
             *     Contains an [Action](#actions) of type `change_protection`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "floating_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    unassign_floating_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for unassigning a [Floating IP](#floating-ips).
             *
             *     Contains an [Action](#actions) of type `unassign_floating_ip`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "unassign_floating_ip",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "floating_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_floating_ip_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Floating IP. */
                id: number;
                /** @description ID of the Action. */
                action_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for getting an [Action](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "assign_floating_ip",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "floating_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_images: {
        parameters: {
            query?: {
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc" | "created" | "created:asc" | "created:desc";
                /** @description Filter resources by type. Can be used multiple times. The response will only
                 *     contain the resources with the specified type.
                 *      */
                type?: "system" | "app" | "snapshot" | "backup";
                /** @description Filter resources by status. Can be used multiple times. The response will only
                 *     contain the resources with the specified status.
                 *      */
                status?: "available" | "creating" | "unavailable";
                /** @description Can be used multiple times. Server ID linked to the Image. Only available for Images of type `backup`. */
                bound_to?: string;
                /** @description Can be used multiple times. */
                include_deprecated?: boolean;
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Filter resources by cpu architecture. The response will only contain the resources
                 *     with the specified cpu architecture.
                 *      */
                architecture?: "x86" | "arm";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `images` key in the reply contains an array of Image objects with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        images: {
                            /**
                             * Format: int64
                             * @description ID of the Image.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Type of the Image.
                             * @example snapshot
                             * @enum {string}
                             */
                            type: "system" | "app" | "snapshot" | "backup";
                            /**
                             * @description Whether the Image can be used or if it's still being created or unavailable.
                             * @enum {string}
                             */
                            status: "available" | "creating" | "unavailable";
                            /**
                             * @description Unique identifier of the Image. This value is only set for system Images.
                             * @example ubuntu-20.04
                             */
                            name: string | null;
                            /**
                             * @description Description of the Image.
                             * @example Ubuntu 20.04 Standard 64 bit
                             */
                            description: string;
                            /**
                             * @description Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
                             * @example 2.3
                             */
                            image_size: number | null;
                            /**
                             * @description Size of the disk contained in the Image in GB.
                             * @example 10
                             */
                            disk_size: number;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description Information about the Server the Image was created from. */
                            created_from: {
                                /**
                                 * Format: int64
                                 * @description ID of the Server the Image was created from.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Server name at the time the Image was created.
                                 * @example Server
                                 */
                                name: string;
                            } | null;
                            /**
                             * Format: int64
                             * @description ID of Server the Image is bound to. Only set for Images of type `backup`.
                             * @example null
                             */
                            bound_to: number | null;
                            /**
                             * @description Flavor of operating system contained in the Image.
                             * @example ubuntu
                             * @enum {string}
                             */
                            os_flavor: "ubuntu" | "centos" | "debian" | "fedora" | "rocky" | "alma" | "opensuse" | "unknown";
                            /**
                             * @description Operating system version.
                             * @example 20.04
                             */
                            os_version: string | null;
                            /**
                             * @description Indicates that rapid deploy of the Image is available.
                             * @example false
                             */
                            rapid_deploy?: boolean;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description Point in time when the Image is considered to be deprecated (in ISO-8601 format).
                             * @example 2018-02-28T00:00:00+00:00
                             */
                            deprecated: string | null;
                            /**
                             * @description Point in time where the Image was deleted (in ISO-8601 format).
                             * @example null
                             */
                            deleted: string | null;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description CPU architecture compatible with the Image.
                             *
                             * @example x86
                             * @enum {string}
                             */
                            architecture: "x86" | "arm";
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    list_images_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_images_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply has this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_image: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `image` key in the reply contains an Image object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        image?: {
                            /**
                             * Format: int64
                             * @description ID of the Image.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Type of the Image.
                             * @example snapshot
                             * @enum {string}
                             */
                            type: "system" | "app" | "snapshot" | "backup";
                            /**
                             * @description Whether the Image can be used or if it's still being created or unavailable.
                             * @enum {string}
                             */
                            status: "available" | "creating" | "unavailable";
                            /**
                             * @description Unique identifier of the Image. This value is only set for system Images.
                             * @example ubuntu-20.04
                             */
                            name: string | null;
                            /**
                             * @description Description of the Image.
                             * @example Ubuntu 20.04 Standard 64 bit
                             */
                            description: string;
                            /**
                             * @description Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
                             * @example 2.3
                             */
                            image_size: number | null;
                            /**
                             * @description Size of the disk contained in the Image in GB.
                             * @example 10
                             */
                            disk_size: number;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description Information about the Server the Image was created from. */
                            created_from: {
                                /**
                                 * Format: int64
                                 * @description ID of the Server the Image was created from.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Server name at the time the Image was created.
                                 * @example Server
                                 */
                                name: string;
                            } | null;
                            /**
                             * Format: int64
                             * @description ID of Server the Image is bound to. Only set for Images of type `backup`.
                             * @example null
                             */
                            bound_to: number | null;
                            /**
                             * @description Flavor of operating system contained in the Image.
                             * @example ubuntu
                             * @enum {string}
                             */
                            os_flavor: "ubuntu" | "centos" | "debian" | "fedora" | "rocky" | "alma" | "opensuse" | "unknown";
                            /**
                             * @description Operating system version.
                             * @example 20.04
                             */
                            os_version: string | null;
                            /**
                             * @description Indicates that rapid deploy of the Image is available.
                             * @example false
                             */
                            rapid_deploy?: boolean;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description Point in time when the Image is considered to be deprecated (in ISO-8601 format).
                             * @example 2018-02-28T00:00:00+00:00
                             */
                            deprecated: string | null;
                            /**
                             * @description Point in time where the Image was deleted (in ISO-8601 format).
                             * @example null
                             */
                            deleted: string | null;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description CPU architecture compatible with the Image.
                             *
                             * @example x86
                             * @enum {string}
                             */
                            architecture: "x86" | "arm";
                        };
                    };
                };
            };
        };
    };
    update_image: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New description of Image.
                     * @example My new Image description
                     */
                    description?: string;
                    /**
                     * @description Destination Image type to convert to.
                     * @enum {string}
                     */
                    type?: "snapshot";
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The image key in the reply contains the modified Image object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "image": {
                     *         "id": 4711,
                     *         "type": "snapshot",
                     *         "status": "available",
                     *         "name": null,
                     *         "description": "My new Image description",
                     *         "image_size": 2.3,
                     *         "disk_size": 10,
                     *         "created": "2016-01-30T23:50:00+00:00",
                     *         "created_from": {
                     *           "id": 1,
                     *           "name": "Server"
                     *         },
                     *         "bound_to": null,
                     *         "os_flavor": "ubuntu",
                     *         "os_version": "20.04",
                     *         "rapid_deploy": false,
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "deprecated": "2018-02-28T00:00:00+00:00",
                     *         "deleted": null,
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "architecture": "x86"
                     *       }
                     *     } */
                    "application/json": {
                        image?: {
                            /**
                             * Format: int64
                             * @description ID of the Image.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Type of the Image.
                             * @example snapshot
                             * @enum {string}
                             */
                            type: "system" | "app" | "snapshot" | "backup";
                            /**
                             * @description Whether the Image can be used or if it's still being created or unavailable.
                             * @enum {string}
                             */
                            status: "available" | "creating" | "unavailable";
                            /**
                             * @description Unique identifier of the Image. This value is only set for system Images.
                             * @example ubuntu-20.04
                             */
                            name: string | null;
                            /**
                             * @description Description of the Image.
                             * @example Ubuntu 20.04 Standard 64 bit
                             */
                            description: string;
                            /**
                             * @description Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
                             * @example 2.3
                             */
                            image_size: number | null;
                            /**
                             * @description Size of the disk contained in the Image in GB.
                             * @example 10
                             */
                            disk_size: number;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description Information about the Server the Image was created from. */
                            created_from: {
                                /**
                                 * Format: int64
                                 * @description ID of the Server the Image was created from.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Server name at the time the Image was created.
                                 * @example Server
                                 */
                                name: string;
                            } | null;
                            /**
                             * Format: int64
                             * @description ID of Server the Image is bound to. Only set for Images of type `backup`.
                             * @example null
                             */
                            bound_to: number | null;
                            /**
                             * @description Flavor of operating system contained in the Image.
                             * @example ubuntu
                             * @enum {string}
                             */
                            os_flavor: "ubuntu" | "centos" | "debian" | "fedora" | "rocky" | "alma" | "opensuse" | "unknown";
                            /**
                             * @description Operating system version.
                             * @example 20.04
                             */
                            os_version: string | null;
                            /**
                             * @description Indicates that rapid deploy of the Image is available.
                             * @example false
                             */
                            rapid_deploy?: boolean;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description Point in time when the Image is considered to be deprecated (in ISO-8601 format).
                             * @example 2018-02-28T00:00:00+00:00
                             */
                            deprecated: string | null;
                            /**
                             * @description Point in time where the Image was deleted (in ISO-8601 format).
                             * @example null
                             */
                            deleted: string | null;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description CPU architecture compatible with the Image.
                             *
                             * @example x86
                             * @enum {string}
                             */
                            architecture: "x86" | "arm";
                        };
                    };
                };
            };
        };
    };
    delete_image: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Image deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_image_actions: {
        parameters: {
            query?: {
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "change_protection",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 4711,
                     *               "type": "image"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    change_image_protection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Image. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description If true, prevents the snapshot from being deleted.
                     * @example true
                     */
                    delete?: boolean;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `change_protection` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "image"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_image_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Image. */
                id: number;
                /** @description ID of the Action. */
                action_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the Image Action. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "image"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_isos: {
        parameters: {
            query?: {
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by cpu architecture. The response will only contain the resources
                 *     with the specified cpu architecture.
                 *      */
                architecture?: "x86" | "arm";
                /** @description Include Images with wildcard architecture (architecture is null). Works only if architecture filter is specified. */
                include_architecture_wildcard?: boolean;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `isos` key in the reply contains an array of iso objects with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        isos: {
                            /**
                             * Format: int64
                             * @description ID of the ISO.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Unique identifier of the ISO. Only set for public ISOs.
                             * @example FreeBSD-11.0-RELEASE-amd64-dvd1
                             */
                            name: string | null;
                            /**
                             * @description Description of the ISO.
                             * @example FreeBSD 11.0 x64
                             */
                            description: string;
                            /**
                             * @description Type of the ISO.
                             * @enum {string|null}
                             */
                            type: "public" | "private" | null;
                            /**
                             * DeprecationInfo
                             * @description Describes if, when and how the resource is deprecated. If this field is
                             *     set to `null` the resource is not deprecated. If a value is set, it is
                             *     considered deprecated.
                             *
                             */
                            deprecation: {
                                /**
                                 * Format: iso-8601
                                 * @description Date of the deprecated resource removal.
                                 *
                                 *     Once this date is reached, the resource will not be returned
                                 *     by resource type "list" endpoint, and the resource can not be
                                 *     used to create new resources. For example, if this is an
                                 *     image, you can not create new servers with this image after
                                 *     the mentioned date.
                                 *
                                 * @example 2023-09-01T00:00:00+00:00
                                 */
                                unavailable_after: string;
                                /**
                                 * Format: iso-8601
                                 * @description Date of the deprecation announcement.
                                 *
                                 * @example 2023-06-01T00:00:00+00:00
                                 */
                                announced: string;
                            } | null;
                            /**
                             * @description CPU architecture compatible with the ISO.
                             *
                             *     Null indicates no restriction on the architecture (wildcard).
                             *
                             * @example x86
                             * @enum {string|null}
                             */
                            architecture: "x86" | "arm" | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_iso: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the ISO. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `iso` key in the reply contains an array of ISO objects with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        iso: {
                            /**
                             * Format: int64
                             * @description ID of the ISO.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Unique identifier of the ISO. Only set for public ISOs.
                             * @example FreeBSD-11.0-RELEASE-amd64-dvd1
                             */
                            name: string | null;
                            /**
                             * @description Description of the ISO.
                             * @example FreeBSD 11.0 x64
                             */
                            description: string;
                            /**
                             * @description Type of the ISO.
                             * @enum {string|null}
                             */
                            type: "public" | "private" | null;
                            /**
                             * DeprecationInfo
                             * @description Describes if, when and how the resource is deprecated. If this field is
                             *     set to `null` the resource is not deprecated. If a value is set, it is
                             *     considered deprecated.
                             *
                             */
                            deprecation: {
                                /**
                                 * Format: iso-8601
                                 * @description Date of the deprecated resource removal.
                                 *
                                 *     Once this date is reached, the resource will not be returned
                                 *     by resource type "list" endpoint, and the resource can not be
                                 *     used to create new resources. For example, if this is an
                                 *     image, you can not create new servers with this image after
                                 *     the mentioned date.
                                 *
                                 * @example 2023-09-01T00:00:00+00:00
                                 */
                                unavailable_after: string;
                                /**
                                 * Format: iso-8601
                                 * @description Date of the deprecation announcement.
                                 *
                                 * @example 2023-06-01T00:00:00+00:00
                                 */
                                announced: string;
                            } | null;
                            /**
                             * @description CPU architecture compatible with the ISO.
                             *
                             *     Null indicates no restriction on the architecture (wildcard).
                             *
                             * @example x86
                             * @enum {string|null}
                             */
                            architecture: "x86" | "arm" | null;
                        };
                    };
                };
            };
        };
    };
    list_load_balancer_types: {
        parameters: {
            query?: {
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `load_balancer_types` key in the reply contains an array of Load Balancer type objects with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        load_balancer_types: {
                            /**
                             * Format: int64
                             * @description ID of the Load Balancer type.
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Unique identifier of the Load Balancer type.
                             * @example lb11
                             */
                            name: string;
                            /**
                             * @description Description of the Load Balancer type.
                             * @example LB11
                             */
                            description: string;
                            /**
                             * Format: int64
                             * @description Number of maximum simultaneous open connections.
                             * @example 20000
                             */
                            max_connections: number;
                            /**
                             * Format: int64
                             * @description Number of services a Load Balancer of this type can have.
                             * @example 5
                             */
                            max_services: number;
                            /**
                             * Format: int64
                             * @description Number of targets a single Load Balancer can have.
                             * @example 25
                             */
                            max_targets: number;
                            /**
                             * Format: int64
                             * @description Number of SSL Certificates that can be assigned to a single Load Balancer.
                             * @example 10
                             */
                            max_assigned_certificates: number;
                            /**
                             * @description Point in time when the Load Balancer type is deprecated (in ISO-8601 format).
                             * @example 2016-01-30T23:50:00+00:00
                             */
                            deprecated: string | null;
                            /** @description Price per [Location](#locations). */
                            prices: {
                                /**
                                 * @description Name of the [Location](#locations) the price is for.
                                 * @example fsn1
                                 */
                                location: string;
                                /** @description Hourly price in this [Location](#locations). */
                                price_hourly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                                /** @description Monthly price in this [Location](#locations). */
                                price_monthly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                                /**
                                 * Format: int64
                                 * @description Free traffic per month in bytes in this [Location](#locations).
                                 * @example 654321
                                 */
                                included_traffic: number;
                                /** @description Additional traffic price per TB in this [Location](#locations). */
                                price_per_tb_traffic: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                            }[];
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_load_balancer_type: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer Type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `load_balancer_type` key in the reply contains a Load Balancer type object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        load_balancer_type?: {
                            /**
                             * Format: int64
                             * @description ID of the Load Balancer type.
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Unique identifier of the Load Balancer type.
                             * @example lb11
                             */
                            name: string;
                            /**
                             * @description Description of the Load Balancer type.
                             * @example LB11
                             */
                            description: string;
                            /**
                             * Format: int64
                             * @description Number of maximum simultaneous open connections.
                             * @example 20000
                             */
                            max_connections: number;
                            /**
                             * Format: int64
                             * @description Number of services a Load Balancer of this type can have.
                             * @example 5
                             */
                            max_services: number;
                            /**
                             * Format: int64
                             * @description Number of targets a single Load Balancer can have.
                             * @example 25
                             */
                            max_targets: number;
                            /**
                             * Format: int64
                             * @description Number of SSL Certificates that can be assigned to a single Load Balancer.
                             * @example 10
                             */
                            max_assigned_certificates: number;
                            /**
                             * @description Point in time when the Load Balancer type is deprecated (in ISO-8601 format).
                             * @example 2016-01-30T23:50:00+00:00
                             */
                            deprecated: string | null;
                            /** @description Price per [Location](#locations). */
                            prices: {
                                /**
                                 * @description Name of the [Location](#locations) the price is for.
                                 * @example fsn1
                                 */
                                location: string;
                                /** @description Hourly price in this [Location](#locations). */
                                price_hourly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                                /** @description Monthly price in this [Location](#locations). */
                                price_monthly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                                /**
                                 * Format: int64
                                 * @description Free traffic per month in bytes in this [Location](#locations).
                                 * @example 654321
                                 */
                                included_traffic: number;
                                /** @description Additional traffic price per TB in this [Location](#locations). */
                                price_per_tb_traffic: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                            }[];
                        };
                    };
                };
            };
        };
    };
    list_load_balancers: {
        parameters: {
            query?: {
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc" | "created" | "created:asc" | "created:desc";
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `load_balancers` key contains a list of Load Balancers. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        load_balancers: {
                            /**
                             * Format: int64
                             * @description ID of the Load Balancer.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /** @description Public network information. */
                            public_net: {
                                /** @description Public Interface enabled or not. */
                                enabled: boolean;
                                /** @description IP address (v4). */
                                ipv4: {
                                    /**
                                     * @description IP address (v4) of this Load Balancer.
                                     * @example 1.2.3.4
                                     */
                                    ip?: string | null;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv4 address of this Load Balancer.
                                     * @example lb1.example.com
                                     */
                                    dns_ptr?: string | null;
                                };
                                /** @description IP address (v6). */
                                ipv6: {
                                    /**
                                     * @description IP address (v6) of this Load Balancer.
                                     * @example 2001:db8::1
                                     */
                                    ip?: string | null;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv6 address of this Load Balancer.
                                     * @example lb1.example.com
                                     */
                                    dns_ptr?: string | null;
                                };
                            };
                            /** @description Private networks information. */
                            private_net: {
                                /**
                                 * Format: int64
                                 * @description ID of the Network.
                                 * @example 4711
                                 */
                                network?: number;
                                /**
                                 * @description IP address (v4) of this Load Balancer in this Network.
                                 * @example 10.0.0.2
                                 */
                                ip?: string;
                            }[];
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            load_balancer_type: {
                                /**
                                 * Format: int64
                                 * @description ID of the Load Balancer type.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the Load Balancer type.
                                 * @example lb11
                                 */
                                name: string;
                                /**
                                 * @description Description of the Load Balancer type.
                                 * @example LB11
                                 */
                                description: string;
                                /**
                                 * Format: int64
                                 * @description Number of maximum simultaneous open connections.
                                 * @example 20000
                                 */
                                max_connections: number;
                                /**
                                 * Format: int64
                                 * @description Number of services a Load Balancer of this type can have.
                                 * @example 5
                                 */
                                max_services: number;
                                /**
                                 * Format: int64
                                 * @description Number of targets a single Load Balancer can have.
                                 * @example 25
                                 */
                                max_targets: number;
                                /**
                                 * Format: int64
                                 * @description Number of SSL Certificates that can be assigned to a single Load Balancer.
                                 * @example 10
                                 */
                                max_assigned_certificates: number;
                                /**
                                 * @description Point in time when the Load Balancer type is deprecated (in ISO-8601 format).
                                 * @example 2016-01-30T23:50:00+00:00
                                 */
                                deprecated: string | null;
                                /** @description Price per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                            };
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description List of services that belong to this Load Balancer. */
                            services: {
                                /**
                                 * @description Protocol of the Load Balancer.
                                 * @example https
                                 * @enum {string}
                                 */
                                protocol: "tcp" | "http" | "https";
                                /**
                                 * @description Port the Load Balancer listens on.
                                 * @example 443
                                 */
                                listen_port: number;
                                /**
                                 * @description Port the Load Balancer will balance to.
                                 * @example 80
                                 */
                                destination_port: number;
                                /**
                                 * @description Is Proxyprotocol enabled or not.
                                 * @example false
                                 */
                                proxyprotocol: boolean;
                                /**
                                 * LoadBalancerServiceHealthCheck
                                 * @description Service health check.
                                 */
                                health_check: {
                                    /**
                                     * @description Type of the health check.
                                     * @example http
                                     * @enum {string}
                                     */
                                    protocol: "tcp" | "http";
                                    /**
                                     * @description Port the health check will be performed on.
                                     * @example 4711
                                     */
                                    port: number;
                                    /**
                                     * @description Time interval in seconds health checks are performed.
                                     * @example 15
                                     */
                                    interval: number;
                                    /**
                                     * @description Time in seconds after an attempt is considered a timeout.
                                     * @example 10
                                     */
                                    timeout: number;
                                    /**
                                     * @description Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again.
                                     * @example 3
                                     */
                                    retries: number;
                                    /** @description Additional configuration for protocol http. */
                                    http?: {
                                        /**
                                         * @description Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
                                         * @example example.com
                                         */
                                        domain: string | null;
                                        /**
                                         * @description HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
                                         * @example /
                                         */
                                        path: string;
                                        /**
                                         * @description String that must be contained in HTTP response in order to pass the health check.
                                         * @example {"status": "ok"}
                                         */
                                        response?: string;
                                        /**
                                         * @description List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.
                                         * @default [
                                         *       "2??",
                                         *       "3??"
                                         *     ]
                                         * @example [
                                         *       "2??",
                                         *       "3??"
                                         *     ]
                                         */
                                        status_codes: string[];
                                        /**
                                         * @description Use HTTPS for health check.
                                         * @example false
                                         */
                                        tls?: boolean;
                                    };
                                };
                                /**
                                 * LoadBalancerServiceHTTP
                                 * @description Configuration option for protocols http and https.
                                 */
                                http?: {
                                    /**
                                     * @description Name of the cookie used for sticky sessions.
                                     * @default HCLBSTICKY
                                     * @example HCLBSTICKY
                                     */
                                    cookie_name: string;
                                    /**
                                     * @description Lifetime of the cookie used for sticky sessions (in seconds).
                                     * @default 300
                                     * @example 300
                                     */
                                    cookie_lifetime: number;
                                    /**
                                     * @description IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is `http`.
                                     * @example [
                                     *       897
                                     *     ]
                                     */
                                    certificates?: number[];
                                    /**
                                     * @description Redirect HTTP requests to HTTPS. Only available if `protocol` is `https`.
                                     * @default false
                                     * @example true
                                     */
                                    redirect_http: boolean;
                                    /**
                                     * @description Use sticky sessions. Only available if `protocol` is `http` or `https`.
                                     * @default false
                                     * @example true
                                     */
                                    sticky_sessions: boolean;
                                };
                            }[];
                            /** @description List of targets that belong to this Load Balancer. */
                            targets: {
                                /**
                                 * @description Type of the resource.
                                 * @enum {string}
                                 */
                                type: "server" | "label_selector" | "ip";
                                /**
                                 * LoadBalancerTargetServer
                                 * @description Server where the traffic should be routed to. Only present for target type "server".
                                 */
                                server?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server.
                                     * @example 80
                                     */
                                    id: number;
                                };
                                /**
                                 * LoadBalancerTargetLabelSelector
                                 * @description Label selector used to determine targets. Only present for target type "label_selector".
                                 */
                                label_selector?: {
                                    /**
                                     * @description Label selector.
                                     * @example env=prod
                                     */
                                    selector: string;
                                };
                                /**
                                 * LoadBalancerTargetIP
                                 * @description IP target where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type `ip`.
                                 */
                                ip?: {
                                    /**
                                     * @description IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a subnet type vswitch.
                                     * @example 203.0.113.1
                                     */
                                    ip: string;
                                };
                                /**
                                 * LoadBalancerTargetHealthStatus
                                 * @description List of health statuses of the services on this target. Only present for target types "server" and "ip".
                                 */
                                health_status?: {
                                    /** @example 443 */
                                    listen_port?: number;
                                    /**
                                     * @example healthy
                                     * @enum {string}
                                     */
                                    status?: "healthy" | "unhealthy" | "unknown";
                                }[];
                                /**
                                 * LoadBalancerTargetUsePrivateIP
                                 * @description Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".
                                 * @default false
                                 */
                                use_private_ip: boolean;
                                /** @description List of resolved label selector target Servers. Only present for type "label_selector". */
                                targets?: {
                                    /**
                                     * @description Type of the resource. Here always "server".
                                     * @example server
                                     */
                                    type?: string;
                                    /**
                                     * LoadBalancerTargetServer
                                     * @description Server where the traffic should be routed to. Only present for target type "server".
                                     */
                                    server?: {
                                        /**
                                         * Format: int64
                                         * @description ID of the Server.
                                         * @example 80
                                         */
                                        id: number;
                                    };
                                    /**
                                     * LoadBalancerTargetHealthStatus
                                     * @description List of health statuses of the services on this target. Only present for target types "server" and "ip".
                                     */
                                    health_status?: {
                                        /** @example 443 */
                                        listen_port?: number;
                                        /**
                                         * @example healthy
                                         * @enum {string}
                                         */
                                        status?: "healthy" | "unhealthy" | "unknown";
                                    }[];
                                    /**
                                     * LoadBalancerTargetUsePrivateIP
                                     * @description Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".
                                     * @default false
                                     */
                                    use_private_ip: boolean;
                                }[];
                            }[];
                            /** @description Algorithm of the Load Balancer. */
                            algorithm: {
                                /**
                                 * @description Type of the algorithm.
                                 * @enum {string}
                                 */
                                type: "round_robin" | "least_connections";
                            };
                            /**
                             * Format: int64
                             * @description Outbound Traffic for the current billing period in bytes.
                             */
                            outgoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Inbound Traffic for the current billing period in bytes.
                             */
                            ingoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Free Traffic for the current billing period in bytes.
                             * @example 10000
                             */
                            included_traffic: number;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_load_balancer: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the Load Balancer.
                     * @example Web Frontend
                     */
                    name: string;
                    /**
                     * @description ID or name of the Load Balancer type this Load Balancer should be created with.
                     * @example lb11
                     */
                    load_balancer_type: string;
                    /**
                     * LoadBalancerAlgorithm
                     * @description Algorithm of the Load Balancer.
                     * @default {
                     *       "type": "round_robin"
                     *     }
                     */
                    algorithm?: {
                        /**
                         * @description Type of the algorithm.
                         * @default round_robin
                         * @enum {string}
                         */
                        type: "round_robin" | "least_connections";
                    };
                    /** @description Array of services. */
                    services?: {
                        /**
                         * @description Protocol of the Load Balancer.
                         * @example https
                         * @enum {string}
                         */
                        protocol: "tcp" | "http" | "https";
                        /**
                         * @description Port the Load Balancer listens on.
                         * @example 443
                         */
                        listen_port: number;
                        /**
                         * @description Port the Load Balancer will balance to.
                         * @example 80
                         */
                        destination_port: number;
                        /**
                         * @description Is Proxyprotocol enabled or not.
                         * @example false
                         */
                        proxyprotocol: boolean;
                        /**
                         * LoadBalancerServiceHealthCheck
                         * @description Service health check.
                         */
                        health_check: {
                            /**
                             * @description Type of the health check.
                             * @example http
                             * @enum {string}
                             */
                            protocol: "tcp" | "http";
                            /**
                             * @description Port the health check will be performed on.
                             * @example 4711
                             */
                            port: number;
                            /**
                             * @description Time interval in seconds health checks are performed.
                             * @example 15
                             */
                            interval: number;
                            /**
                             * @description Time in seconds after an attempt is considered a timeout.
                             * @example 10
                             */
                            timeout: number;
                            /**
                             * @description Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again.
                             * @example 3
                             */
                            retries: number;
                            /** @description Additional configuration for protocol http. */
                            http?: {
                                /**
                                 * @description Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
                                 * @example example.com
                                 */
                                domain: string | null;
                                /**
                                 * @description HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
                                 * @example /
                                 */
                                path: string;
                                /**
                                 * @description String that must be contained in HTTP response in order to pass the health check.
                                 * @example {"status": "ok"}
                                 */
                                response?: string;
                                /**
                                 * @description List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.
                                 * @default [
                                 *       "2??",
                                 *       "3??"
                                 *     ]
                                 * @example [
                                 *       "2??",
                                 *       "3??"
                                 *     ]
                                 */
                                status_codes?: string[];
                                /**
                                 * @description Use HTTPS for health check.
                                 * @example false
                                 */
                                tls?: boolean;
                            };
                        };
                        /**
                         * LoadBalancerServiceHTTP
                         * @description Configuration option for protocols http and https.
                         */
                        http?: {
                            /**
                             * @description Name of the cookie used for sticky sessions.
                             * @default HCLBSTICKY
                             * @example HCLBSTICKY
                             */
                            cookie_name?: string;
                            /**
                             * @description Lifetime of the cookie used for sticky sessions (in seconds).
                             * @default 300
                             * @example 300
                             */
                            cookie_lifetime?: number;
                            /**
                             * @description IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is `http`.
                             * @example [
                             *       897
                             *     ]
                             */
                            certificates?: number[];
                            /**
                             * @description Redirect HTTP requests to HTTPS. Only available if `protocol` is `https`.
                             * @default false
                             * @example true
                             */
                            redirect_http?: boolean;
                            /**
                             * @description Use sticky sessions. Only available if `protocol` is `http` or `https`.
                             * @default false
                             * @example true
                             */
                            sticky_sessions?: boolean;
                        };
                    }[];
                    /** @description Array of targets. */
                    targets?: {
                        /**
                         * @description Type of the resource.
                         * @enum {string}
                         */
                        type: "server" | "label_selector" | "ip";
                        /**
                         * LoadBalancerTargetServer
                         * @description Configuration for type Server, only valid and required if type is `server`.
                         */
                        server?: {
                            /**
                             * Format: int64
                             * @description ID of the Server.
                             * @example 80
                             */
                            id: number;
                        };
                        /**
                         * @description Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network.
                         * @default false
                         * @example true
                         */
                        use_private_ip?: boolean;
                        /**
                         * LoadBalancerTargetLabelSelector
                         * @description Configuration for label selector targets, only valid and required if type is `label_selector`.
                         */
                        label_selector?: {
                            /**
                             * @description Label selector.
                             * @example env=prod
                             */
                            selector: string;
                        };
                        /**
                         * LoadBalancerTargetIP
                         * @description Configuration for an IP target. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only valid and required if type is `ip`.
                         */
                        ip?: {
                            /**
                             * @description IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a subnet type vswitch.
                             * @example 203.0.113.1
                             */
                            ip: string;
                        };
                    }[];
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Enable or disable the public interface of the Load Balancer.
                     * @example true
                     */
                    public_interface?: boolean;
                    /**
                     * Format: int64
                     * @description ID of the network the Load Balancer should be attached to on creation.
                     * @example 123
                     */
                    network?: number;
                    /**
                     * @description Name of network zone.
                     * @example eu-central
                     */
                    network_zone?: string;
                    /**
                     * @description ID or name of Location to create Load Balancer in.
                     * @example fsn1
                     */
                    location?: string;
                };
            };
        };
        responses: {
            /** @description The `load_balancer` key contains the Load Balancer that was just created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "load_balancer": {
                     *         "id": 4711,
                     *         "name": "Web Frontend",
                     *         "public_net": {
                     *           "enabled": false,
                     *           "ipv4": {
                     *             "ip": "1.2.3.4"
                     *           },
                     *           "ipv6": {
                     *             "ip": "2001:db8::1"
                     *           }
                     *         },
                     *         "private_net": [
                     *           {
                     *             "network": 4711,
                     *             "ip": "10.0.0.2"
                     *           }
                     *         ],
                     *         "location": {
                     *           "id": 1,
                     *           "name": "fsn1",
                     *           "description": "Falkenstein DC Park 1",
                     *           "country": "DE",
                     *           "city": "Falkenstein",
                     *           "latitude": 50.47612,
                     *           "longitude": 12.370071,
                     *           "network_zone": "eu-central"
                     *         },
                     *         "load_balancer_type": {
                     *           "id": 1,
                     *           "name": "lb11",
                     *           "description": "LB11",
                     *           "max_connections": 20000,
                     *           "max_services": 5,
                     *           "max_targets": 25,
                     *           "max_assigned_certificates": 10,
                     *           "deprecated": "2016-01-30T23:50:00+00:00",
                     *           "prices": [
                     *             {
                     *               "location": "fsn1",
                     *               "price_hourly": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               },
                     *               "price_monthly": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               },
                     *               "included_traffic": 654321,
                     *               "price_per_tb_traffic": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               }
                     *             }
                     *           ]
                     *         },
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "created": "2016-01-30T23:50:00+00:00",
                     *         "services": [
                     *           {
                     *             "protocol": "http",
                     *             "listen_port": 443,
                     *             "destination_port": 80,
                     *             "proxyprotocol": false,
                     *             "health_check": {
                     *               "protocol": "http",
                     *               "port": 4711,
                     *               "interval": 15,
                     *               "timeout": 10,
                     *               "retries": 3,
                     *               "http": {
                     *                 "domain": "example.com",
                     *                 "path": "/",
                     *                 "response": "{\"status\": \"ok\"}",
                     *                 "status_codes": [
                     *                   "2??,3??"
                     *                 ],
                     *                 "tls": false
                     *               }
                     *             },
                     *             "http": {
                     *               "cookie_name": "HCLBSTICKY",
                     *               "cookie_lifetime": 300,
                     *               "certificates": [
                     *                 897
                     *               ],
                     *               "redirect_http": true,
                     *               "sticky_sessions": true
                     *             }
                     *           }
                     *         ],
                     *         "targets": [
                     *           {
                     *             "type": "server",
                     *             "server": {
                     *               "id": 80
                     *             },
                     *             "health_status": [
                     *               {
                     *                 "listen_port": 443,
                     *                 "status": "healthy"
                     *               }
                     *             ],
                     *             "use_private_ip": true,
                     *             "targets": [
                     *               {
                     *                 "type": "server",
                     *                 "server": {
                     *                   "id": 80
                     *                 },
                     *                 "health_status": [
                     *                   {
                     *                     "listen_port": 443,
                     *                     "status": "healthy"
                     *                   }
                     *                 ],
                     *                 "use_private_ip": true
                     *               }
                     *             ]
                     *           }
                     *         ],
                     *         "algorithm": {
                     *           "type": "round_robin"
                     *         },
                     *         "outgoing_traffic": 123456,
                     *         "ingoing_traffic": 123456,
                     *         "included_traffic": 654321
                     *       },
                     *       "action": {
                     *         "id": 13,
                     *         "command": "create_load_balancer",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        load_balancer: {
                            /**
                             * Format: int64
                             * @description ID of the Load Balancer.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /** @description Public network information. */
                            public_net: {
                                /** @description Public Interface enabled or not. */
                                enabled: boolean;
                                /** @description IP address (v4). */
                                ipv4: {
                                    /**
                                     * @description IP address (v4) of this Load Balancer.
                                     * @example 1.2.3.4
                                     */
                                    ip?: string | null;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv4 address of this Load Balancer.
                                     * @example lb1.example.com
                                     */
                                    dns_ptr?: string | null;
                                };
                                /** @description IP address (v6). */
                                ipv6: {
                                    /**
                                     * @description IP address (v6) of this Load Balancer.
                                     * @example 2001:db8::1
                                     */
                                    ip?: string | null;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv6 address of this Load Balancer.
                                     * @example lb1.example.com
                                     */
                                    dns_ptr?: string | null;
                                };
                            };
                            /** @description Private networks information. */
                            private_net: {
                                /**
                                 * Format: int64
                                 * @description ID of the Network.
                                 * @example 4711
                                 */
                                network?: number;
                                /**
                                 * @description IP address (v4) of this Load Balancer in this Network.
                                 * @example 10.0.0.2
                                 */
                                ip?: string;
                            }[];
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            load_balancer_type: {
                                /**
                                 * Format: int64
                                 * @description ID of the Load Balancer type.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the Load Balancer type.
                                 * @example lb11
                                 */
                                name: string;
                                /**
                                 * @description Description of the Load Balancer type.
                                 * @example LB11
                                 */
                                description: string;
                                /**
                                 * Format: int64
                                 * @description Number of maximum simultaneous open connections.
                                 * @example 20000
                                 */
                                max_connections: number;
                                /**
                                 * Format: int64
                                 * @description Number of services a Load Balancer of this type can have.
                                 * @example 5
                                 */
                                max_services: number;
                                /**
                                 * Format: int64
                                 * @description Number of targets a single Load Balancer can have.
                                 * @example 25
                                 */
                                max_targets: number;
                                /**
                                 * Format: int64
                                 * @description Number of SSL Certificates that can be assigned to a single Load Balancer.
                                 * @example 10
                                 */
                                max_assigned_certificates: number;
                                /**
                                 * @description Point in time when the Load Balancer type is deprecated (in ISO-8601 format).
                                 * @example 2016-01-30T23:50:00+00:00
                                 */
                                deprecated: string | null;
                                /** @description Price per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                            };
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description List of services that belong to this Load Balancer. */
                            services: {
                                /**
                                 * @description Protocol of the Load Balancer.
                                 * @example https
                                 * @enum {string}
                                 */
                                protocol: "tcp" | "http" | "https";
                                /**
                                 * @description Port the Load Balancer listens on.
                                 * @example 443
                                 */
                                listen_port: number;
                                /**
                                 * @description Port the Load Balancer will balance to.
                                 * @example 80
                                 */
                                destination_port: number;
                                /**
                                 * @description Is Proxyprotocol enabled or not.
                                 * @example false
                                 */
                                proxyprotocol: boolean;
                                /**
                                 * LoadBalancerServiceHealthCheck
                                 * @description Service health check.
                                 */
                                health_check: {
                                    /**
                                     * @description Type of the health check.
                                     * @example http
                                     * @enum {string}
                                     */
                                    protocol: "tcp" | "http";
                                    /**
                                     * @description Port the health check will be performed on.
                                     * @example 4711
                                     */
                                    port: number;
                                    /**
                                     * @description Time interval in seconds health checks are performed.
                                     * @example 15
                                     */
                                    interval: number;
                                    /**
                                     * @description Time in seconds after an attempt is considered a timeout.
                                     * @example 10
                                     */
                                    timeout: number;
                                    /**
                                     * @description Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again.
                                     * @example 3
                                     */
                                    retries: number;
                                    /** @description Additional configuration for protocol http. */
                                    http?: {
                                        /**
                                         * @description Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
                                         * @example example.com
                                         */
                                        domain: string | null;
                                        /**
                                         * @description HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
                                         * @example /
                                         */
                                        path: string;
                                        /**
                                         * @description String that must be contained in HTTP response in order to pass the health check.
                                         * @example {"status": "ok"}
                                         */
                                        response?: string;
                                        /**
                                         * @description List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.
                                         * @default [
                                         *       "2??",
                                         *       "3??"
                                         *     ]
                                         * @example [
                                         *       "2??",
                                         *       "3??"
                                         *     ]
                                         */
                                        status_codes: string[];
                                        /**
                                         * @description Use HTTPS for health check.
                                         * @example false
                                         */
                                        tls?: boolean;
                                    };
                                };
                                /**
                                 * LoadBalancerServiceHTTP
                                 * @description Configuration option for protocols http and https.
                                 */
                                http?: {
                                    /**
                                     * @description Name of the cookie used for sticky sessions.
                                     * @default HCLBSTICKY
                                     * @example HCLBSTICKY
                                     */
                                    cookie_name: string;
                                    /**
                                     * @description Lifetime of the cookie used for sticky sessions (in seconds).
                                     * @default 300
                                     * @example 300
                                     */
                                    cookie_lifetime: number;
                                    /**
                                     * @description IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is `http`.
                                     * @example [
                                     *       897
                                     *     ]
                                     */
                                    certificates?: number[];
                                    /**
                                     * @description Redirect HTTP requests to HTTPS. Only available if `protocol` is `https`.
                                     * @default false
                                     * @example true
                                     */
                                    redirect_http: boolean;
                                    /**
                                     * @description Use sticky sessions. Only available if `protocol` is `http` or `https`.
                                     * @default false
                                     * @example true
                                     */
                                    sticky_sessions: boolean;
                                };
                            }[];
                            /** @description List of targets that belong to this Load Balancer. */
                            targets: {
                                /**
                                 * @description Type of the resource.
                                 * @enum {string}
                                 */
                                type: "server" | "label_selector" | "ip";
                                /**
                                 * LoadBalancerTargetServer
                                 * @description Server where the traffic should be routed to. Only present for target type "server".
                                 */
                                server?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server.
                                     * @example 80
                                     */
                                    id: number;
                                };
                                /**
                                 * LoadBalancerTargetLabelSelector
                                 * @description Label selector used to determine targets. Only present for target type "label_selector".
                                 */
                                label_selector?: {
                                    /**
                                     * @description Label selector.
                                     * @example env=prod
                                     */
                                    selector: string;
                                };
                                /**
                                 * LoadBalancerTargetIP
                                 * @description IP target where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type `ip`.
                                 */
                                ip?: {
                                    /**
                                     * @description IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a subnet type vswitch.
                                     * @example 203.0.113.1
                                     */
                                    ip: string;
                                };
                                /**
                                 * LoadBalancerTargetHealthStatus
                                 * @description List of health statuses of the services on this target. Only present for target types "server" and "ip".
                                 */
                                health_status?: {
                                    /** @example 443 */
                                    listen_port?: number;
                                    /**
                                     * @example healthy
                                     * @enum {string}
                                     */
                                    status?: "healthy" | "unhealthy" | "unknown";
                                }[];
                                /**
                                 * LoadBalancerTargetUsePrivateIP
                                 * @description Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".
                                 * @default false
                                 */
                                use_private_ip: boolean;
                                /** @description List of resolved label selector target Servers. Only present for type "label_selector". */
                                targets?: {
                                    /**
                                     * @description Type of the resource. Here always "server".
                                     * @example server
                                     */
                                    type?: string;
                                    /**
                                     * LoadBalancerTargetServer
                                     * @description Server where the traffic should be routed to. Only present for target type "server".
                                     */
                                    server?: {
                                        /**
                                         * Format: int64
                                         * @description ID of the Server.
                                         * @example 80
                                         */
                                        id: number;
                                    };
                                    /**
                                     * LoadBalancerTargetHealthStatus
                                     * @description List of health statuses of the services on this target. Only present for target types "server" and "ip".
                                     */
                                    health_status?: {
                                        /** @example 443 */
                                        listen_port?: number;
                                        /**
                                         * @example healthy
                                         * @enum {string}
                                         */
                                        status?: "healthy" | "unhealthy" | "unknown";
                                    }[];
                                    /**
                                     * LoadBalancerTargetUsePrivateIP
                                     * @description Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".
                                     * @default false
                                     */
                                    use_private_ip: boolean;
                                }[];
                            }[];
                            /** @description Algorithm of the Load Balancer. */
                            algorithm: {
                                /**
                                 * @description Type of the algorithm.
                                 * @enum {string}
                                 */
                                type: "round_robin" | "least_connections";
                            };
                            /**
                             * Format: int64
                             * @description Outbound Traffic for the current billing period in bytes.
                             */
                            outgoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Inbound Traffic for the current billing period in bytes.
                             */
                            ingoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Free Traffic for the current billing period in bytes.
                             * @example 10000
                             */
                            included_traffic: number;
                        };
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_load_balancers_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_load_balancers_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply has this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_load_balancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `load_balancer` key contains the Load Balancer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        load_balancer: {
                            /**
                             * Format: int64
                             * @description ID of the Load Balancer.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /** @description Public network information. */
                            public_net: {
                                /** @description Public Interface enabled or not. */
                                enabled: boolean;
                                /** @description IP address (v4). */
                                ipv4: {
                                    /**
                                     * @description IP address (v4) of this Load Balancer.
                                     * @example 1.2.3.4
                                     */
                                    ip?: string | null;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv4 address of this Load Balancer.
                                     * @example lb1.example.com
                                     */
                                    dns_ptr?: string | null;
                                };
                                /** @description IP address (v6). */
                                ipv6: {
                                    /**
                                     * @description IP address (v6) of this Load Balancer.
                                     * @example 2001:db8::1
                                     */
                                    ip?: string | null;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv6 address of this Load Balancer.
                                     * @example lb1.example.com
                                     */
                                    dns_ptr?: string | null;
                                };
                            };
                            /** @description Private networks information. */
                            private_net: {
                                /**
                                 * Format: int64
                                 * @description ID of the Network.
                                 * @example 4711
                                 */
                                network?: number;
                                /**
                                 * @description IP address (v4) of this Load Balancer in this Network.
                                 * @example 10.0.0.2
                                 */
                                ip?: string;
                            }[];
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            load_balancer_type: {
                                /**
                                 * Format: int64
                                 * @description ID of the Load Balancer type.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the Load Balancer type.
                                 * @example lb11
                                 */
                                name: string;
                                /**
                                 * @description Description of the Load Balancer type.
                                 * @example LB11
                                 */
                                description: string;
                                /**
                                 * Format: int64
                                 * @description Number of maximum simultaneous open connections.
                                 * @example 20000
                                 */
                                max_connections: number;
                                /**
                                 * Format: int64
                                 * @description Number of services a Load Balancer of this type can have.
                                 * @example 5
                                 */
                                max_services: number;
                                /**
                                 * Format: int64
                                 * @description Number of targets a single Load Balancer can have.
                                 * @example 25
                                 */
                                max_targets: number;
                                /**
                                 * Format: int64
                                 * @description Number of SSL Certificates that can be assigned to a single Load Balancer.
                                 * @example 10
                                 */
                                max_assigned_certificates: number;
                                /**
                                 * @description Point in time when the Load Balancer type is deprecated (in ISO-8601 format).
                                 * @example 2016-01-30T23:50:00+00:00
                                 */
                                deprecated: string | null;
                                /** @description Price per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                            };
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description List of services that belong to this Load Balancer. */
                            services: {
                                /**
                                 * @description Protocol of the Load Balancer.
                                 * @example https
                                 * @enum {string}
                                 */
                                protocol: "tcp" | "http" | "https";
                                /**
                                 * @description Port the Load Balancer listens on.
                                 * @example 443
                                 */
                                listen_port: number;
                                /**
                                 * @description Port the Load Balancer will balance to.
                                 * @example 80
                                 */
                                destination_port: number;
                                /**
                                 * @description Is Proxyprotocol enabled or not.
                                 * @example false
                                 */
                                proxyprotocol: boolean;
                                /**
                                 * LoadBalancerServiceHealthCheck
                                 * @description Service health check.
                                 */
                                health_check: {
                                    /**
                                     * @description Type of the health check.
                                     * @example http
                                     * @enum {string}
                                     */
                                    protocol: "tcp" | "http";
                                    /**
                                     * @description Port the health check will be performed on.
                                     * @example 4711
                                     */
                                    port: number;
                                    /**
                                     * @description Time interval in seconds health checks are performed.
                                     * @example 15
                                     */
                                    interval: number;
                                    /**
                                     * @description Time in seconds after an attempt is considered a timeout.
                                     * @example 10
                                     */
                                    timeout: number;
                                    /**
                                     * @description Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again.
                                     * @example 3
                                     */
                                    retries: number;
                                    /** @description Additional configuration for protocol http. */
                                    http?: {
                                        /**
                                         * @description Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
                                         * @example example.com
                                         */
                                        domain: string | null;
                                        /**
                                         * @description HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
                                         * @example /
                                         */
                                        path: string;
                                        /**
                                         * @description String that must be contained in HTTP response in order to pass the health check.
                                         * @example {"status": "ok"}
                                         */
                                        response?: string;
                                        /**
                                         * @description List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.
                                         * @default [
                                         *       "2??",
                                         *       "3??"
                                         *     ]
                                         * @example [
                                         *       "2??",
                                         *       "3??"
                                         *     ]
                                         */
                                        status_codes: string[];
                                        /**
                                         * @description Use HTTPS for health check.
                                         * @example false
                                         */
                                        tls?: boolean;
                                    };
                                };
                                /**
                                 * LoadBalancerServiceHTTP
                                 * @description Configuration option for protocols http and https.
                                 */
                                http?: {
                                    /**
                                     * @description Name of the cookie used for sticky sessions.
                                     * @default HCLBSTICKY
                                     * @example HCLBSTICKY
                                     */
                                    cookie_name: string;
                                    /**
                                     * @description Lifetime of the cookie used for sticky sessions (in seconds).
                                     * @default 300
                                     * @example 300
                                     */
                                    cookie_lifetime: number;
                                    /**
                                     * @description IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is `http`.
                                     * @example [
                                     *       897
                                     *     ]
                                     */
                                    certificates?: number[];
                                    /**
                                     * @description Redirect HTTP requests to HTTPS. Only available if `protocol` is `https`.
                                     * @default false
                                     * @example true
                                     */
                                    redirect_http: boolean;
                                    /**
                                     * @description Use sticky sessions. Only available if `protocol` is `http` or `https`.
                                     * @default false
                                     * @example true
                                     */
                                    sticky_sessions: boolean;
                                };
                            }[];
                            /** @description List of targets that belong to this Load Balancer. */
                            targets: {
                                /**
                                 * @description Type of the resource.
                                 * @enum {string}
                                 */
                                type: "server" | "label_selector" | "ip";
                                /**
                                 * LoadBalancerTargetServer
                                 * @description Server where the traffic should be routed to. Only present for target type "server".
                                 */
                                server?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server.
                                     * @example 80
                                     */
                                    id: number;
                                };
                                /**
                                 * LoadBalancerTargetLabelSelector
                                 * @description Label selector used to determine targets. Only present for target type "label_selector".
                                 */
                                label_selector?: {
                                    /**
                                     * @description Label selector.
                                     * @example env=prod
                                     */
                                    selector: string;
                                };
                                /**
                                 * LoadBalancerTargetIP
                                 * @description IP target where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type `ip`.
                                 */
                                ip?: {
                                    /**
                                     * @description IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a subnet type vswitch.
                                     * @example 203.0.113.1
                                     */
                                    ip: string;
                                };
                                /**
                                 * LoadBalancerTargetHealthStatus
                                 * @description List of health statuses of the services on this target. Only present for target types "server" and "ip".
                                 */
                                health_status?: {
                                    /** @example 443 */
                                    listen_port?: number;
                                    /**
                                     * @example healthy
                                     * @enum {string}
                                     */
                                    status?: "healthy" | "unhealthy" | "unknown";
                                }[];
                                /**
                                 * LoadBalancerTargetUsePrivateIP
                                 * @description Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".
                                 * @default false
                                 */
                                use_private_ip: boolean;
                                /** @description List of resolved label selector target Servers. Only present for type "label_selector". */
                                targets?: {
                                    /**
                                     * @description Type of the resource. Here always "server".
                                     * @example server
                                     */
                                    type?: string;
                                    /**
                                     * LoadBalancerTargetServer
                                     * @description Server where the traffic should be routed to. Only present for target type "server".
                                     */
                                    server?: {
                                        /**
                                         * Format: int64
                                         * @description ID of the Server.
                                         * @example 80
                                         */
                                        id: number;
                                    };
                                    /**
                                     * LoadBalancerTargetHealthStatus
                                     * @description List of health statuses of the services on this target. Only present for target types "server" and "ip".
                                     */
                                    health_status?: {
                                        /** @example 443 */
                                        listen_port?: number;
                                        /**
                                         * @example healthy
                                         * @enum {string}
                                         */
                                        status?: "healthy" | "unhealthy" | "unknown";
                                    }[];
                                    /**
                                     * LoadBalancerTargetUsePrivateIP
                                     * @description Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".
                                     * @default false
                                     */
                                    use_private_ip: boolean;
                                }[];
                            }[];
                            /** @description Algorithm of the Load Balancer. */
                            algorithm: {
                                /**
                                 * @description Type of the algorithm.
                                 * @enum {string}
                                 */
                                type: "round_robin" | "least_connections";
                            };
                            /**
                             * Format: int64
                             * @description Outbound Traffic for the current billing period in bytes.
                             */
                            outgoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Inbound Traffic for the current billing period in bytes.
                             */
                            ingoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Free Traffic for the current billing period in bytes.
                             * @example 10000
                             */
                            included_traffic: number;
                        };
                    };
                };
            };
        };
    };
    update_load_balancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New Load Balancer name.
                     * @example new-name
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `load_balancer` key contains the updated Load Balancer. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "load_balancer": {
                     *         "id": 4711,
                     *         "name": "new-name",
                     *         "public_net": {
                     *           "enabled": false,
                     *           "ipv4": {
                     *             "ip": "1.2.3.4"
                     *           },
                     *           "ipv6": {
                     *             "ip": "2001:db8::1"
                     *           }
                     *         },
                     *         "private_net": [
                     *           {
                     *             "network": 4711,
                     *             "ip": "10.0.0.2"
                     *           }
                     *         ],
                     *         "location": {
                     *           "id": 1,
                     *           "name": "fsn1",
                     *           "description": "Falkenstein DC Park 1",
                     *           "country": "DE",
                     *           "city": "Falkenstein",
                     *           "latitude": 50.47612,
                     *           "longitude": 12.370071,
                     *           "network_zone": "eu-central"
                     *         },
                     *         "load_balancer_type": {
                     *           "id": 1,
                     *           "name": "lb11",
                     *           "description": "LB11",
                     *           "max_connections": 20000,
                     *           "max_services": 5,
                     *           "max_targets": 25,
                     *           "max_assigned_certificates": 10,
                     *           "deprecated": "2016-01-30T23:50:00+00:00",
                     *           "prices": [
                     *             {
                     *               "location": "fsn1",
                     *               "price_hourly": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               },
                     *               "price_monthly": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               },
                     *               "included_traffic": 654321,
                     *               "price_per_tb_traffic": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               }
                     *             }
                     *           ]
                     *         },
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "created": "2016-01-30T23:50:00+00:00",
                     *         "services": [
                     *           {
                     *             "protocol": "http",
                     *             "listen_port": 443,
                     *             "destination_port": 80,
                     *             "proxyprotocol": false,
                     *             "health_check": {
                     *               "protocol": "http",
                     *               "port": 4711,
                     *               "interval": 15,
                     *               "timeout": 10,
                     *               "retries": 3,
                     *               "http": {
                     *                 "domain": "example.com",
                     *                 "path": "/",
                     *                 "response": "{\"status\": \"ok\"}",
                     *                 "status_codes": [
                     *                   "2??,3??"
                     *                 ],
                     *                 "tls": false
                     *               }
                     *             },
                     *             "http": {
                     *               "cookie_name": "HCLBSTICKY",
                     *               "cookie_lifetime": 300,
                     *               "certificates": [
                     *                 897
                     *               ],
                     *               "redirect_http": true,
                     *               "sticky_sessions": true
                     *             }
                     *           }
                     *         ],
                     *         "targets": [
                     *           {
                     *             "type": "server",
                     *             "server": {
                     *               "id": 80
                     *             },
                     *             "health_status": [
                     *               {
                     *                 "listen_port": 443,
                     *                 "status": "healthy"
                     *               }
                     *             ],
                     *             "use_private_ip": true,
                     *             "label_selector": {
                     *               "selector": "env=prod"
                     *             },
                     *             "ip": {
                     *               "ip": "203.0.113.1"
                     *             },
                     *             "targets": [
                     *               {
                     *                 "type": "server",
                     *                 "server": {
                     *                   "id": 80
                     *                 },
                     *                 "health_status": [
                     *                   {
                     *                     "listen_port": 443,
                     *                     "status": "healthy"
                     *                   }
                     *                 ],
                     *                 "use_private_ip": true
                     *               }
                     *             ]
                     *           }
                     *         ],
                     *         "algorithm": {
                     *           "type": "round_robin"
                     *         },
                     *         "outgoing_traffic": 123456,
                     *         "ingoing_traffic": 123456,
                     *         "included_traffic": 654321
                     *       }
                     *     } */
                    "application/json": {
                        load_balancer: {
                            /**
                             * Format: int64
                             * @description ID of the Load Balancer.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /** @description Public network information. */
                            public_net: {
                                /** @description Public Interface enabled or not. */
                                enabled: boolean;
                                /** @description IP address (v4). */
                                ipv4: {
                                    /**
                                     * @description IP address (v4) of this Load Balancer.
                                     * @example 1.2.3.4
                                     */
                                    ip?: string | null;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv4 address of this Load Balancer.
                                     * @example lb1.example.com
                                     */
                                    dns_ptr?: string | null;
                                };
                                /** @description IP address (v6). */
                                ipv6: {
                                    /**
                                     * @description IP address (v6) of this Load Balancer.
                                     * @example 2001:db8::1
                                     */
                                    ip?: string | null;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv6 address of this Load Balancer.
                                     * @example lb1.example.com
                                     */
                                    dns_ptr?: string | null;
                                };
                            };
                            /** @description Private networks information. */
                            private_net: {
                                /**
                                 * Format: int64
                                 * @description ID of the Network.
                                 * @example 4711
                                 */
                                network?: number;
                                /**
                                 * @description IP address (v4) of this Load Balancer in this Network.
                                 * @example 10.0.0.2
                                 */
                                ip?: string;
                            }[];
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            load_balancer_type: {
                                /**
                                 * Format: int64
                                 * @description ID of the Load Balancer type.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the Load Balancer type.
                                 * @example lb11
                                 */
                                name: string;
                                /**
                                 * @description Description of the Load Balancer type.
                                 * @example LB11
                                 */
                                description: string;
                                /**
                                 * Format: int64
                                 * @description Number of maximum simultaneous open connections.
                                 * @example 20000
                                 */
                                max_connections: number;
                                /**
                                 * Format: int64
                                 * @description Number of services a Load Balancer of this type can have.
                                 * @example 5
                                 */
                                max_services: number;
                                /**
                                 * Format: int64
                                 * @description Number of targets a single Load Balancer can have.
                                 * @example 25
                                 */
                                max_targets: number;
                                /**
                                 * Format: int64
                                 * @description Number of SSL Certificates that can be assigned to a single Load Balancer.
                                 * @example 10
                                 */
                                max_assigned_certificates: number;
                                /**
                                 * @description Point in time when the Load Balancer type is deprecated (in ISO-8601 format).
                                 * @example 2016-01-30T23:50:00+00:00
                                 */
                                deprecated: string | null;
                                /** @description Price per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                            };
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description List of services that belong to this Load Balancer. */
                            services: {
                                /**
                                 * @description Protocol of the Load Balancer.
                                 * @example https
                                 * @enum {string}
                                 */
                                protocol: "tcp" | "http" | "https";
                                /**
                                 * @description Port the Load Balancer listens on.
                                 * @example 443
                                 */
                                listen_port: number;
                                /**
                                 * @description Port the Load Balancer will balance to.
                                 * @example 80
                                 */
                                destination_port: number;
                                /**
                                 * @description Is Proxyprotocol enabled or not.
                                 * @example false
                                 */
                                proxyprotocol: boolean;
                                /**
                                 * LoadBalancerServiceHealthCheck
                                 * @description Service health check.
                                 */
                                health_check: {
                                    /**
                                     * @description Type of the health check.
                                     * @example http
                                     * @enum {string}
                                     */
                                    protocol: "tcp" | "http";
                                    /**
                                     * @description Port the health check will be performed on.
                                     * @example 4711
                                     */
                                    port: number;
                                    /**
                                     * @description Time interval in seconds health checks are performed.
                                     * @example 15
                                     */
                                    interval: number;
                                    /**
                                     * @description Time in seconds after an attempt is considered a timeout.
                                     * @example 10
                                     */
                                    timeout: number;
                                    /**
                                     * @description Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again.
                                     * @example 3
                                     */
                                    retries: number;
                                    /** @description Additional configuration for protocol http. */
                                    http?: {
                                        /**
                                         * @description Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
                                         * @example example.com
                                         */
                                        domain: string | null;
                                        /**
                                         * @description HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
                                         * @example /
                                         */
                                        path: string;
                                        /**
                                         * @description String that must be contained in HTTP response in order to pass the health check.
                                         * @example {"status": "ok"}
                                         */
                                        response?: string;
                                        /**
                                         * @description List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.
                                         * @default [
                                         *       "2??",
                                         *       "3??"
                                         *     ]
                                         * @example [
                                         *       "2??",
                                         *       "3??"
                                         *     ]
                                         */
                                        status_codes: string[];
                                        /**
                                         * @description Use HTTPS for health check.
                                         * @example false
                                         */
                                        tls?: boolean;
                                    };
                                };
                                /**
                                 * LoadBalancerServiceHTTP
                                 * @description Configuration option for protocols http and https.
                                 */
                                http?: {
                                    /**
                                     * @description Name of the cookie used for sticky sessions.
                                     * @default HCLBSTICKY
                                     * @example HCLBSTICKY
                                     */
                                    cookie_name: string;
                                    /**
                                     * @description Lifetime of the cookie used for sticky sessions (in seconds).
                                     * @default 300
                                     * @example 300
                                     */
                                    cookie_lifetime: number;
                                    /**
                                     * @description IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is `http`.
                                     * @example [
                                     *       897
                                     *     ]
                                     */
                                    certificates?: number[];
                                    /**
                                     * @description Redirect HTTP requests to HTTPS. Only available if `protocol` is `https`.
                                     * @default false
                                     * @example true
                                     */
                                    redirect_http: boolean;
                                    /**
                                     * @description Use sticky sessions. Only available if `protocol` is `http` or `https`.
                                     * @default false
                                     * @example true
                                     */
                                    sticky_sessions: boolean;
                                };
                            }[];
                            /** @description List of targets that belong to this Load Balancer. */
                            targets: {
                                /**
                                 * @description Type of the resource.
                                 * @enum {string}
                                 */
                                type: "server" | "label_selector" | "ip";
                                /**
                                 * LoadBalancerTargetServer
                                 * @description Server where the traffic should be routed to. Only present for target type "server".
                                 */
                                server?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server.
                                     * @example 80
                                     */
                                    id: number;
                                };
                                /**
                                 * LoadBalancerTargetLabelSelector
                                 * @description Label selector used to determine targets. Only present for target type "label_selector".
                                 */
                                label_selector?: {
                                    /**
                                     * @description Label selector.
                                     * @example env=prod
                                     */
                                    selector: string;
                                };
                                /**
                                 * LoadBalancerTargetIP
                                 * @description IP target where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type `ip`.
                                 */
                                ip?: {
                                    /**
                                     * @description IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a subnet type vswitch.
                                     * @example 203.0.113.1
                                     */
                                    ip: string;
                                };
                                /**
                                 * LoadBalancerTargetHealthStatus
                                 * @description List of health statuses of the services on this target. Only present for target types "server" and "ip".
                                 */
                                health_status?: {
                                    /** @example 443 */
                                    listen_port?: number;
                                    /**
                                     * @example healthy
                                     * @enum {string}
                                     */
                                    status?: "healthy" | "unhealthy" | "unknown";
                                }[];
                                /**
                                 * LoadBalancerTargetUsePrivateIP
                                 * @description Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".
                                 * @default false
                                 */
                                use_private_ip: boolean;
                                /** @description List of resolved label selector target Servers. Only present for type "label_selector". */
                                targets?: {
                                    /**
                                     * @description Type of the resource. Here always "server".
                                     * @example server
                                     */
                                    type?: string;
                                    /**
                                     * LoadBalancerTargetServer
                                     * @description Server where the traffic should be routed to. Only present for target type "server".
                                     */
                                    server?: {
                                        /**
                                         * Format: int64
                                         * @description ID of the Server.
                                         * @example 80
                                         */
                                        id: number;
                                    };
                                    /**
                                     * LoadBalancerTargetHealthStatus
                                     * @description List of health statuses of the services on this target. Only present for target types "server" and "ip".
                                     */
                                    health_status?: {
                                        /** @example 443 */
                                        listen_port?: number;
                                        /**
                                         * @example healthy
                                         * @enum {string}
                                         */
                                        status?: "healthy" | "unhealthy" | "unknown";
                                    }[];
                                    /**
                                     * LoadBalancerTargetUsePrivateIP
                                     * @description Use the private network IP instead of the public IP. Only present for target types "server" and "label_selector".
                                     * @default false
                                     */
                                    use_private_ip: boolean;
                                }[];
                            }[];
                            /** @description Algorithm of the Load Balancer. */
                            algorithm: {
                                /**
                                 * @description Type of the algorithm.
                                 * @enum {string}
                                 */
                                type: "round_robin" | "least_connections";
                            };
                            /**
                             * Format: int64
                             * @description Outbound Traffic for the current billing period in bytes.
                             */
                            outgoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Inbound Traffic for the current billing period in bytes.
                             */
                            ingoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Free Traffic for the current billing period in bytes.
                             * @example 10000
                             */
                            included_traffic: number;
                        };
                    };
                };
            };
        };
    };
    delete_load_balancer: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Load Balancer deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_load_balancer_actions: {
        parameters: {
            query?: {
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "add_service",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 4711,
                     *               "type": "load_balancer"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    add_load_balancer_service: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Protocol of the Load Balancer.
                     * @example https
                     * @enum {string}
                     */
                    protocol: "tcp" | "http" | "https";
                    /**
                     * @description Port the Load Balancer listens on.
                     * @example 443
                     */
                    listen_port: number;
                    /**
                     * @description Port the Load Balancer will balance to.
                     * @example 80
                     */
                    destination_port: number;
                    /**
                     * @description Is Proxyprotocol enabled or not.
                     * @example false
                     */
                    proxyprotocol: boolean;
                    /**
                     * LoadBalancerServiceHealthCheck
                     * @description Service health check.
                     */
                    health_check: {
                        /**
                         * @description Type of the health check.
                         * @example http
                         * @enum {string}
                         */
                        protocol: "tcp" | "http";
                        /**
                         * @description Port the health check will be performed on.
                         * @example 4711
                         */
                        port: number;
                        /**
                         * @description Time interval in seconds health checks are performed.
                         * @example 15
                         */
                        interval: number;
                        /**
                         * @description Time in seconds after an attempt is considered a timeout.
                         * @example 10
                         */
                        timeout: number;
                        /**
                         * @description Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again.
                         * @example 3
                         */
                        retries: number;
                        /** @description Additional configuration for protocol http. */
                        http?: {
                            /**
                             * @description Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
                             * @example example.com
                             */
                            domain: string | null;
                            /**
                             * @description HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
                             * @example /
                             */
                            path: string;
                            /**
                             * @description String that must be contained in HTTP response in order to pass the health check.
                             * @example {"status": "ok"}
                             */
                            response?: string;
                            /**
                             * @description List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.
                             * @default [
                             *       "2??",
                             *       "3??"
                             *     ]
                             * @example [
                             *       "2??",
                             *       "3??"
                             *     ]
                             */
                            status_codes?: string[];
                            /**
                             * @description Use HTTPS for health check.
                             * @example false
                             */
                            tls?: boolean;
                        };
                    };
                    /**
                     * LoadBalancerServiceHTTP
                     * @description Configuration option for protocols http and https.
                     */
                    http?: {
                        /**
                         * @description Name of the cookie used for sticky sessions.
                         * @default HCLBSTICKY
                         * @example HCLBSTICKY
                         */
                        cookie_name?: string;
                        /**
                         * @description Lifetime of the cookie used for sticky sessions (in seconds).
                         * @default 300
                         * @example 300
                         */
                        cookie_lifetime?: number;
                        /**
                         * @description IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is `http`.
                         * @example [
                         *       897
                         *     ]
                         */
                        certificates?: number[];
                        /**
                         * @description Redirect HTTP requests to HTTPS. Only available if `protocol` is `https`.
                         * @default false
                         * @example true
                         */
                        redirect_http?: boolean;
                        /**
                         * @description Use sticky sessions. Only available if `protocol` is `http` or `https`.
                         * @default false
                         * @example true
                         */
                        sticky_sessions?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `add_service` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "add_service",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    add_load_balancer_target: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Type of the resource.
                     * @enum {string}
                     */
                    type: "server" | "label_selector" | "ip";
                    /**
                     * LoadBalancerTargetServer
                     * @description Configuration for type Server, only valid and required if type is `server`.
                     */
                    server?: {
                        /**
                         * Format: int64
                         * @description ID of the Server.
                         * @example 80
                         */
                        id: number;
                    };
                    /**
                     * @description Use the private network IP instead of the public IP of the Server, requires the Server and Load Balancer to be in the same network.
                     * @default false
                     * @example true
                     */
                    use_private_ip?: boolean;
                    /**
                     * LoadBalancerTargetLabelSelector
                     * @description Configuration for label selector targets, only valid and required if type is `label_selector`.
                     */
                    label_selector?: {
                        /**
                         * @description Label selector.
                         * @example env=prod
                         */
                        selector: string;
                    };
                    /**
                     * LoadBalancerTargetIP
                     * @description Configuration for an IP target. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only valid and required if type is `ip`.
                     */
                    ip?: {
                        /**
                         * @description IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a subnet type vswitch.
                         * @example 203.0.113.1
                         */
                        ip: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `add_target` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "add_target",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    attach_load_balancer_to_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of an existing network to attach the Load Balancer to.
                     * @example 4711
                     */
                    network: number;
                    /**
                     * @description IP to request to be assigned to this Load Balancer; if you do not provide this then you will be auto assigned an IP address.
                     * @example 10.0.1.1
                     */
                    ip?: string;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `attach_to_network` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "attach_to_network",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_load_balancer_algorithm: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Algorithm of the Load Balancer.
                     * @enum {string}
                     */
                    type: "round_robin" | "least_connections";
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `change_algorithm` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_algorithm",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_load_balancer_dns_ptr: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        /** @description Select the IP address for which to change the DNS entry by passing `ip`. It can be either IPv4 or IPv6. The target hostname is set by passing `dns_ptr`. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Public IP address for which the reverse DNS entry should be set.
                     * @example 1.2.3.4
                     */
                    ip: string;
                    /**
                     * @description Hostname to set as a reverse DNS PTR entry.
                     * @example lb1.example.com
                     */
                    dns_ptr: string | null;
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_dns_ptr",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_load_balancer_protection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description If true, prevents the Load Balancer from being deleted.
                     * @example true
                     */
                    delete?: boolean;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `change_protection` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_load_balancer_type: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description ID or name of Load Balancer type the Load Balancer should migrate to.
                     * @example lb21
                     */
                    load_balancer_type: string;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `change_load_balancer_type` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_load_balancer_type",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    delete_load_balancer_service: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description The listen port of the service you want to delete.
                     * @example 443
                     */
                    listen_port: number;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `delete_service` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "delete_service",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    detach_load_balancer_from_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of an existing network to detach the Load Balancer from.
                     * @example 4711
                     */
                    network: number;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `detach_from_network` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "detach_from_network",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    disable_load_balancer_public_interface: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the `disable_public_interface` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "disable_public_interface",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    enable_load_balancer_public_interface: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the `enable_public_interface` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "enable_public_interface",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    remove_load_balancer_target: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Type of the resource.
                     * @enum {string}
                     */
                    type: "server" | "label_selector" | "ip";
                    /** @description Configuration for type Server, required if type is `server`. */
                    server?: {
                        /**
                         * Format: int64
                         * @description ID of the Server.
                         * @example 80
                         */
                        id: number;
                    };
                    /** @description Configuration for label selector targets, required if type is `label_selector`. */
                    label_selector?: {
                        /**
                         * @description Label selector.
                         * @example env=prod
                         */
                        selector: string;
                    };
                    /**
                     * LoadBalancerTargetIP
                     * @description IP target where the traffic should be routed to. It is only possible to use the (Public or vSwitch) IPs of Hetzner Online Root Servers belonging to the project owner. IPs belonging to other users are blocked. Additionally IPs belonging to services provided by Hetzner Cloud (Servers, Load Balancers, ...) are blocked as well. Only present for target type `ip`.
                     */
                    ip?: {
                        /**
                         * @description IP of a server that belongs to the same customer (public IPv4/IPv6) or private IP in a subnet type vswitch.
                         * @example 203.0.113.1
                         */
                        ip: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `remove_target` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "remove_target",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    update_load_balancer_service: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Protocol of the Load Balancer.
                     * @example https
                     * @enum {string}
                     */
                    protocol?: "tcp" | "http" | "https";
                    /**
                     * @description Port the Load Balancer listens on.
                     * @example 443
                     */
                    listen_port: number;
                    /**
                     * @description Port the Load Balancer will balance to.
                     * @example 80
                     */
                    destination_port?: number;
                    /**
                     * @description Is Proxyprotocol enabled or not.
                     * @example false
                     */
                    proxyprotocol?: boolean;
                    /**
                     * UpdateLoadBalancerServiceHealthCheck
                     * @description Service health check.
                     */
                    health_check?: {
                        /**
                         * @description Type of the health check.
                         * @example http
                         * @enum {string}
                         */
                        protocol?: "tcp" | "http";
                        /**
                         * @description Port the health check will be performed on.
                         * @example 4711
                         */
                        port?: number;
                        /**
                         * @description Time interval in seconds health checks are performed.
                         * @example 15
                         */
                        interval?: number;
                        /**
                         * @description Time in seconds after an attempt is considered a timeout.
                         * @example 10
                         */
                        timeout?: number;
                        /**
                         * @description Unsuccessful retries needed until a target is considered unhealthy; an unhealthy target needs the same number of successful retries to become healthy again.
                         * @example 3
                         */
                        retries?: number;
                        /** @description Additional configuration for protocol http. */
                        http?: {
                            /**
                             * @description Host header to send in the HTTP request. May not contain spaces, percent or backslash symbols. Can be null, in that case no host header is sent.
                             * @example example.com
                             */
                            domain?: string | null;
                            /**
                             * @description HTTP path to use for health checks. May not contain literal spaces, use percent-encoding instead.
                             * @example /
                             */
                            path?: string;
                            /**
                             * @description String that must be contained in HTTP response in order to pass the health check.
                             * @example {"status": "ok"}
                             */
                            response?: string;
                            /**
                             * @description List of returned HTTP status codes in order to pass the health check. Supports the wildcards `?` for exactly one character and `*` for multiple ones.
                             * @default [
                             *       "2??",
                             *       "3??"
                             *     ]
                             * @example [
                             *       "2??",
                             *       "3??"
                             *     ]
                             */
                            status_codes?: string[];
                            /**
                             * @description Use HTTPS for health check.
                             * @example false
                             */
                            tls?: boolean;
                        };
                    };
                    /**
                     * LoadBalancerServiceHTTP
                     * @description Configuration option for protocols http and https.
                     */
                    http?: {
                        /**
                         * @description Name of the cookie used for sticky sessions.
                         * @example HCLBSTICKY
                         */
                        cookie_name?: string;
                        /**
                         * @description Lifetime of the cookie used for sticky sessions (in seconds).
                         * @example 300
                         */
                        cookie_lifetime?: number;
                        /**
                         * @description IDs of the Certificates to use for TLS/SSL termination by the Load Balancer; empty for TLS/SSL passthrough or if `protocol` is "http".
                         * @example [
                         *       897
                         *     ]
                         */
                        certificates?: number[];
                        /**
                         * @description Redirect HTTP requests to HTTPS. Only available if protocol is "https".
                         * @default false
                         * @example true
                         */
                        redirect_http?: boolean;
                        /**
                         * @description Use sticky sessions. Only available if protocol is "http" or "https".
                         * @default false
                         * @example true
                         */
                        sticky_sessions?: boolean;
                    };
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `update_service` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "update_service",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_load_balancer_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
                /** @description ID of the Action. */
                action_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the Load Balancer Action. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "load_balancer"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_load_balancer_metrics: {
        parameters: {
            query: {
                /** @description Type of metrics to get. */
                type: "open_connections" | "connections_per_second" | "requests_per_second" | "bandwidth";
                /** @description Start of period to get Metrics for (in ISO-8601 format). */
                start: string;
                /** @description End of period to get Metrics for (in ISO-8601 format). */
                end: string;
                /** @description Resolution of results in seconds. */
                step?: string;
            };
            header?: never;
            path: {
                /** @description ID of the Load Balancer. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `metrics` key in the reply contains a metrics object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        metrics: {
                            /**
                             * @description Start of period of metrics reported (in ISO-8601 format).
                             * @example 2017-01-01T00:00:00+00:00
                             */
                            start: string;
                            /**
                             * @description End of period of metrics reported (in ISO-8601 format).
                             * @example 2017-01-01T23:00:00+00:00
                             */
                            end: string;
                            /**
                             * @description Resolution of results in seconds.
                             * @example 60
                             */
                            step: number;
                            /**
                             * @description Hash with timeseries information, containing the name of timeseries as key.
                             * @example {
                             *       "name_of_timeseries": {
                             *         "values": [
                             *           [
                             *             1435781470.622,
                             *             "42"
                             *           ],
                             *           [
                             *             1435781471.622,
                             *             "43"
                             *           ]
                             *         ]
                             *       }
                             *     }
                             */
                            time_series: {
                                [key: string]: {
                                    /** @description Metrics Timestamps with values. */
                                    values: (number | string)[][];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    list_locations: {
        parameters: {
            query?: {
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response with the [Locations](#locations). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description List of [Locations](#locations). */
                        locations: {
                            /**
                             * Format: int64
                             * @description ID of the Location.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Unique identifier of the [Location](#locations).
                             * @example fsn1
                             */
                            name: string;
                            /**
                             * @description Human readable description of the [Location](#locations).
                             * @example Falkenstein DC Park 1
                             */
                            description: string;
                            /**
                             * @description Country the [Location](#locations) resides in.
                             *
                             *     ISO 3166-1 alpha-2 code of the country.
                             *
                             * @example DE
                             */
                            country: string;
                            /**
                             * @description Name of the closest city to the [Location](#locations).
                             *
                             *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                             *
                             * @example Falkenstein
                             */
                            city: string;
                            /**
                             * Format: double
                             * @description Latitude of the city closest to the [Location](#locations).
                             * @example 50.47612
                             */
                            latitude: number;
                            /**
                             * Format: double
                             * @description Longitude of the city closest to the [Location](#locations).
                             * @example 12.370071
                             */
                            longitude: number;
                            /**
                             * @description Name of the Network Zone this [Location](#locations) resides in.
                             * @example eu-central
                             */
                            network_zone: string;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_location: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Location. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response with the [Location](#locations). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        location: {
                            /**
                             * Format: int64
                             * @description ID of the Location.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Unique identifier of the [Location](#locations).
                             * @example fsn1
                             */
                            name: string;
                            /**
                             * @description Human readable description of the [Location](#locations).
                             * @example Falkenstein DC Park 1
                             */
                            description: string;
                            /**
                             * @description Country the [Location](#locations) resides in.
                             *
                             *     ISO 3166-1 alpha-2 code of the country.
                             *
                             * @example DE
                             */
                            country: string;
                            /**
                             * @description Name of the closest city to the [Location](#locations).
                             *
                             *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                             *
                             * @example Falkenstein
                             */
                            city: string;
                            /**
                             * Format: double
                             * @description Latitude of the city closest to the [Location](#locations).
                             * @example 50.47612
                             */
                            latitude: number;
                            /**
                             * Format: double
                             * @description Longitude of the city closest to the [Location](#locations).
                             * @example 12.370071
                             */
                            longitude: number;
                            /**
                             * @description Name of the Network Zone this [Location](#locations) resides in.
                             * @example eu-central
                             */
                            network_zone: string;
                        };
                    };
                };
            };
        };
    };
    list_networks: {
        parameters: {
            query?: {
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc" | "created" | "created:asc" | "created:desc";
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Networks](#networks). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        networks: {
                            /**
                             * Format: int64
                             * @description ID of the [Network](#networks).
                             * @example 4711
                             */
                            id: number;
                            /**
                             * @description Name of the [Network](#networks).
                             * @example mynet
                             */
                            name: string;
                            /**
                             * @description IP range of the [Network](#networks).
                             *
                             *     Uses CIDR notation.
                             *
                             * @example 10.0.0.0/16
                             */
                            ip_range: string;
                            /** @description List of subnets allocated in this [Network](#networks). */
                            subnets: {
                                /**
                                 * @description Type of subnet.
                                 *
                                 *     - `cloud` - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers).
                                 *     - `server` - Same as the `cloud` type. **Deprecated**, use the `cloud` type instead.
                                 *     - `vswitch` - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).
                                 *
                                 * @enum {string}
                                 */
                                type: "cloud" | "server" | "vswitch";
                                /**
                                 * @description IP range of the subnet.
                                 *
                                 *     Uses CIDR notation.
                                 *
                                 * @example 10.0.1.0/24
                                 */
                                ip_range?: string;
                                /**
                                 * @description Name of the [Network Zone](#network-zones).
                                 *
                                 *     The [Location](#locations) contains the `network_zone` property it belongs to.
                                 *
                                 * @example eu-central
                                 */
                                network_zone: string;
                                /**
                                 * @description Gateway for [Servers](#servers) attached to this subnet.
                                 *
                                 *     For subnets of type `server` this is always the first IP of the subnets IP range.
                                 *
                                 * @example 10.0.0.1
                                 */
                                gateway: string;
                                /**
                                 * Format: int64
                                 * @description ID of the robot vSwitch if the subnet is of type `vswitch`.
                                 * @example 1000
                                 */
                                vswitch_id?: number | null;
                            }[];
                            /** @description Array of routes set in this [Network](#networks). */
                            routes: {
                                /**
                                 * @description Destination network or host of the route.
                                 *
                                 *     Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.
                                 *
                                 *     Must be one of
                                 *     * private IPv4 ranges of RFC1918
                                 *     * or `0.0.0.0/0`.
                                 *
                                 *     Must not overlap with
                                 *     * an existing ip_range in any subnets
                                 *     * or with any destinations in other routes
                                 *     * or with `172.31.1.1`.
                                 *
                                 *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                                 *
                                 * @example 10.100.1.0/24
                                 */
                                destination: string;
                                /**
                                 * @description Gateway of the route.
                                 *
                                 *     Packages addressed for the specified destination will be send to this IP address.
                                 *
                                 *     Cannot be
                                 *     * the first IP of the networks ip_range,
                                 *     * an IP behind a vSwitch or
                                 *     * `172.31.1.1`.
                                 *
                                 *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                                 *
                                 * @example 10.0.1.1
                                 */
                                gateway: string;
                            }[];
                            /**
                             * @description Array of IDs of [Servers](#servers) attached to this [Network](#networks).
                             * @example [
                             *       42
                             *     ]
                             */
                            servers: number[];
                            /**
                             * @description Array of IDs of [Load Balancers](#load-balancers) attached to this [Network](#networks).
                             * @example [
                             *       42
                             *     ]
                             */
                            load_balancers?: number[];
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch connection.
                             * @example false
                             */
                            expose_routes_to_vswitch: boolean;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_network: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the [Network](#networks).
                     * @example mynet
                     */
                    name: string;
                    /**
                     * @description IP range of the [Network](#networks).
                     *
                     *     Uses CIDR notation.
                     *
                     *     Must span all included subnets. Must be one of the private IPv4 ranges of RFC1918.
                     *
                     *     Minimum network size is /24. We highly recommend that you pick a larger [Network](#networks) with a /16 netmask.
                     *
                     * @example 10.0.0.0/16
                     */
                    ip_range: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /** @description Array of subnets to allocate. */
                    subnets?: {
                        /**
                         * @description Type of subnet.
                         *
                         *     - `cloud` - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers).
                         *     - `server` - Same as the `cloud` type. **Deprecated**, use the `cloud` type instead.
                         *     - `vswitch` - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).
                         *
                         * @enum {string}
                         */
                        type: "cloud" | "server" | "vswitch";
                        /**
                         * @description IP range of the subnet.
                         *
                         *     Uses CIDR notation.
                         *
                         *     Must be a subnet of the parent [Networks](#networks) `ip_range`.
                         *
                         *     Must not overlap with any other subnets or with any destinations in routes.
                         *
                         *     Minimum network size is /30. We highly recommend that you pick a larger subnet with a /24 netmask.
                         *
                         * @example 10.0.1.0/24
                         */
                        ip_range?: string;
                        /**
                         * @description Name of the [Network Zone](#network-zones).
                         *
                         *     The [Location](#locations) contains the `network_zone` property it belongs to.
                         *
                         * @example eu-central
                         */
                        network_zone: string;
                        /**
                         * Format: int64
                         * @description ID of the robot vSwitch.
                         *
                         *     Must only be supplied for subnets of type `vswitch`.
                         *
                         * @example 1000
                         */
                        vswitch_id?: number;
                    }[];
                    /** @description Array of routes set in this [Network](#networks). */
                    routes?: {
                        /**
                         * @description Destination network or host of the route.
                         *
                         *     Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.
                         *
                         *     Must be one of
                         *     * private IPv4 ranges of RFC1918
                         *     * or `0.0.0.0/0`.
                         *
                         *     Must not overlap with
                         *     * an existing ip_range in any subnets
                         *     * or with any destinations in other routes
                         *     * or with `172.31.1.1`.
                         *
                         *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                         *
                         * @example 10.100.1.0/24
                         */
                        destination: string;
                        /**
                         * @description Gateway of the route.
                         *
                         *     Packages addressed for the specified destination will be send to this IP address.
                         *
                         *     Cannot be
                         *     * the first IP of the networks ip_range,
                         *     * an IP behind a vSwitch or
                         *     * `172.31.1.1`.
                         *
                         *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                         *
                         * @example 10.0.1.1
                         */
                        gateway: string;
                    }[];
                    /**
                     * @description Toggle to expose routes to the [Networks](#networks) vSwitch.
                     *
                     *     Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch in this [Network](#networks). Only takes effect if a [vSwitch is setup](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch) in this [Network](#networks).
                     *
                     * @example false
                     */
                    expose_routes_to_vswitch?: boolean;
                };
            };
        };
        responses: {
            /** @description Response for creating a [Network](#networks).
             *
             *     Contains the newly created [Network](#networks).
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        network?: {
                            /**
                             * Format: int64
                             * @description ID of the [Network](#networks).
                             * @example 4711
                             */
                            id: number;
                            /**
                             * @description Name of the [Network](#networks).
                             * @example mynet
                             */
                            name: string;
                            /**
                             * @description IP range of the [Network](#networks).
                             *
                             *     Uses CIDR notation.
                             *
                             * @example 10.0.0.0/16
                             */
                            ip_range: string;
                            /** @description List of subnets allocated in this [Network](#networks). */
                            subnets: {
                                /**
                                 * @description Type of subnet.
                                 *
                                 *     - `cloud` - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers).
                                 *     - `server` - Same as the `cloud` type. **Deprecated**, use the `cloud` type instead.
                                 *     - `vswitch` - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).
                                 *
                                 * @enum {string}
                                 */
                                type: "cloud" | "server" | "vswitch";
                                /**
                                 * @description IP range of the subnet.
                                 *
                                 *     Uses CIDR notation.
                                 *
                                 * @example 10.0.1.0/24
                                 */
                                ip_range?: string;
                                /**
                                 * @description Name of the [Network Zone](#network-zones).
                                 *
                                 *     The [Location](#locations) contains the `network_zone` property it belongs to.
                                 *
                                 * @example eu-central
                                 */
                                network_zone: string;
                                /**
                                 * @description Gateway for [Servers](#servers) attached to this subnet.
                                 *
                                 *     For subnets of type `server` this is always the first IP of the subnets IP range.
                                 *
                                 * @example 10.0.0.1
                                 */
                                gateway: string;
                                /**
                                 * Format: int64
                                 * @description ID of the robot vSwitch if the subnet is of type `vswitch`.
                                 * @example 1000
                                 */
                                vswitch_id?: number | null;
                            }[];
                            /** @description Array of routes set in this [Network](#networks). */
                            routes: {
                                /**
                                 * @description Destination network or host of the route.
                                 *
                                 *     Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.
                                 *
                                 *     Must be one of
                                 *     * private IPv4 ranges of RFC1918
                                 *     * or `0.0.0.0/0`.
                                 *
                                 *     Must not overlap with
                                 *     * an existing ip_range in any subnets
                                 *     * or with any destinations in other routes
                                 *     * or with `172.31.1.1`.
                                 *
                                 *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                                 *
                                 * @example 10.100.1.0/24
                                 */
                                destination: string;
                                /**
                                 * @description Gateway of the route.
                                 *
                                 *     Packages addressed for the specified destination will be send to this IP address.
                                 *
                                 *     Cannot be
                                 *     * the first IP of the networks ip_range,
                                 *     * an IP behind a vSwitch or
                                 *     * `172.31.1.1`.
                                 *
                                 *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                                 *
                                 * @example 10.0.1.1
                                 */
                                gateway: string;
                            }[];
                            /**
                             * @description Array of IDs of [Servers](#servers) attached to this [Network](#networks).
                             * @example [
                             *       42
                             *     ]
                             */
                            servers: number[];
                            /**
                             * @description Array of IDs of [Load Balancers](#load-balancers) attached to this [Network](#networks).
                             * @example [
                             *       42
                             *     ]
                             */
                            load_balancers?: number[];
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch connection.
                             * @example false
                             */
                            expose_routes_to_vswitch: boolean;
                        };
                    };
                };
            };
        };
    };
    list_networks_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Actions](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_networks_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for getting a single [Action](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `network` key contains the network. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        network?: {
                            /**
                             * Format: int64
                             * @description ID of the [Network](#networks).
                             * @example 4711
                             */
                            id: number;
                            /**
                             * @description Name of the [Network](#networks).
                             * @example mynet
                             */
                            name: string;
                            /**
                             * @description IP range of the [Network](#networks).
                             *
                             *     Uses CIDR notation.
                             *
                             * @example 10.0.0.0/16
                             */
                            ip_range: string;
                            /** @description List of subnets allocated in this [Network](#networks). */
                            subnets: {
                                /**
                                 * @description Type of subnet.
                                 *
                                 *     - `cloud` - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers).
                                 *     - `server` - Same as the `cloud` type. **Deprecated**, use the `cloud` type instead.
                                 *     - `vswitch` - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).
                                 *
                                 * @enum {string}
                                 */
                                type: "cloud" | "server" | "vswitch";
                                /**
                                 * @description IP range of the subnet.
                                 *
                                 *     Uses CIDR notation.
                                 *
                                 * @example 10.0.1.0/24
                                 */
                                ip_range?: string;
                                /**
                                 * @description Name of the [Network Zone](#network-zones).
                                 *
                                 *     The [Location](#locations) contains the `network_zone` property it belongs to.
                                 *
                                 * @example eu-central
                                 */
                                network_zone: string;
                                /**
                                 * @description Gateway for [Servers](#servers) attached to this subnet.
                                 *
                                 *     For subnets of type `server` this is always the first IP of the subnets IP range.
                                 *
                                 * @example 10.0.0.1
                                 */
                                gateway: string;
                                /**
                                 * Format: int64
                                 * @description ID of the robot vSwitch if the subnet is of type `vswitch`.
                                 * @example 1000
                                 */
                                vswitch_id?: number | null;
                            }[];
                            /** @description Array of routes set in this [Network](#networks). */
                            routes: {
                                /**
                                 * @description Destination network or host of the route.
                                 *
                                 *     Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.
                                 *
                                 *     Must be one of
                                 *     * private IPv4 ranges of RFC1918
                                 *     * or `0.0.0.0/0`.
                                 *
                                 *     Must not overlap with
                                 *     * an existing ip_range in any subnets
                                 *     * or with any destinations in other routes
                                 *     * or with `172.31.1.1`.
                                 *
                                 *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                                 *
                                 * @example 10.100.1.0/24
                                 */
                                destination: string;
                                /**
                                 * @description Gateway of the route.
                                 *
                                 *     Packages addressed for the specified destination will be send to this IP address.
                                 *
                                 *     Cannot be
                                 *     * the first IP of the networks ip_range,
                                 *     * an IP behind a vSwitch or
                                 *     * `172.31.1.1`.
                                 *
                                 *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                                 *
                                 * @example 10.0.1.1
                                 */
                                gateway: string;
                            }[];
                            /**
                             * @description Array of IDs of [Servers](#servers) attached to this [Network](#networks).
                             * @example [
                             *       42
                             *     ]
                             */
                            servers: number[];
                            /**
                             * @description Array of IDs of [Load Balancers](#load-balancers) attached to this [Network](#networks).
                             * @example [
                             *       42
                             *     ]
                             */
                            load_balancers?: number[];
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch connection.
                             * @example false
                             */
                            expose_routes_to_vswitch: boolean;
                        };
                    };
                };
            };
        };
    };
    update_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New [Network](#networks) name.
                     * @example new-name
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Toggle to expose routes to the [Networks](#networks) vSwitch.
                     *
                     *     Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch in this [Network](#networks). Only takes effect if a [vSwitch is setup](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch) in this [Network](#networks).
                     *
                     * @example false
                     */
                    expose_routes_to_vswitch?: boolean;
                };
            };
        };
        responses: {
            /** @description Response for updating a [Network](#networks).
             *
             *     Contains the updated [Network](#networks).
             *      */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "network": {
                     *         "id": 4711,
                     *         "name": "new-name",
                     *         "ip_range": "10.0.0.0/16",
                     *         "subnets": [
                     *           {
                     *             "type": "cloud",
                     *             "ip_range": "10.0.1.0/24",
                     *             "network_zone": "eu-central",
                     *             "gateway": "10.0.0.1"
                     *           }
                     *         ],
                     *         "routes": [
                     *           {
                     *             "destination": "10.100.1.0/24",
                     *             "gateway": "10.0.1.1"
                     *           }
                     *         ],
                     *         "servers": [
                     *           42
                     *         ],
                     *         "load_balancers": [
                     *           42
                     *         ],
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "created": "2016-01-30T23:50:00+00:00",
                     *         "expose_routes_to_vswitch": true
                     *       }
                     *     } */
                    "application/json": {
                        network?: {
                            /**
                             * Format: int64
                             * @description ID of the [Network](#networks).
                             * @example 4711
                             */
                            id: number;
                            /**
                             * @description Name of the [Network](#networks).
                             * @example mynet
                             */
                            name: string;
                            /**
                             * @description IP range of the [Network](#networks).
                             *
                             *     Uses CIDR notation.
                             *
                             * @example 10.0.0.0/16
                             */
                            ip_range: string;
                            /** @description List of subnets allocated in this [Network](#networks). */
                            subnets: {
                                /**
                                 * @description Type of subnet.
                                 *
                                 *     - `cloud` - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers).
                                 *     - `server` - Same as the `cloud` type. **Deprecated**, use the `cloud` type instead.
                                 *     - `vswitch` - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).
                                 *
                                 * @enum {string}
                                 */
                                type: "cloud" | "server" | "vswitch";
                                /**
                                 * @description IP range of the subnet.
                                 *
                                 *     Uses CIDR notation.
                                 *
                                 * @example 10.0.1.0/24
                                 */
                                ip_range?: string;
                                /**
                                 * @description Name of the [Network Zone](#network-zones).
                                 *
                                 *     The [Location](#locations) contains the `network_zone` property it belongs to.
                                 *
                                 * @example eu-central
                                 */
                                network_zone: string;
                                /**
                                 * @description Gateway for [Servers](#servers) attached to this subnet.
                                 *
                                 *     For subnets of type `server` this is always the first IP of the subnets IP range.
                                 *
                                 * @example 10.0.0.1
                                 */
                                gateway: string;
                                /**
                                 * Format: int64
                                 * @description ID of the robot vSwitch if the subnet is of type `vswitch`.
                                 * @example 1000
                                 */
                                vswitch_id?: number | null;
                            }[];
                            /** @description Array of routes set in this [Network](#networks). */
                            routes: {
                                /**
                                 * @description Destination network or host of the route.
                                 *
                                 *     Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.
                                 *
                                 *     Must be one of
                                 *     * private IPv4 ranges of RFC1918
                                 *     * or `0.0.0.0/0`.
                                 *
                                 *     Must not overlap with
                                 *     * an existing ip_range in any subnets
                                 *     * or with any destinations in other routes
                                 *     * or with `172.31.1.1`.
                                 *
                                 *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                                 *
                                 * @example 10.100.1.0/24
                                 */
                                destination: string;
                                /**
                                 * @description Gateway of the route.
                                 *
                                 *     Packages addressed for the specified destination will be send to this IP address.
                                 *
                                 *     Cannot be
                                 *     * the first IP of the networks ip_range,
                                 *     * an IP behind a vSwitch or
                                 *     * `172.31.1.1`.
                                 *
                                 *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                                 *
                                 * @example 10.0.1.1
                                 */
                                gateway: string;
                            }[];
                            /**
                             * @description Array of IDs of [Servers](#servers) attached to this [Network](#networks).
                             * @example [
                             *       42
                             *     ]
                             */
                            servers: number[];
                            /**
                             * @description Array of IDs of [Load Balancers](#load-balancers) attached to this [Network](#networks).
                             * @example [
                             *       42
                             *     ]
                             */
                            load_balancers?: number[];
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Indicates if the routes from this [Network](#networks) should be exposed to the vSwitch connection.
                             * @example false
                             */
                            expose_routes_to_vswitch: boolean;
                        };
                    };
                };
            };
        };
    };
    delete_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for deleting a [Network](#networks). */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_network_actions: {
        parameters: {
            query?: {
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Actions](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "add_subnet",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 42,
                     *               "type": "server"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    add_network_route: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Destination network or host of the route.
                     *
                     *     Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.
                     *
                     *     Must be one of
                     *     * private IPv4 ranges of RFC1918
                     *     * or `0.0.0.0/0`.
                     *
                     *     Must not overlap with
                     *     * an existing ip_range in any subnets
                     *     * or with any destinations in other routes
                     *     * or with `172.31.1.1`.
                     *
                     *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                     *
                     * @example 10.100.1.0/24
                     */
                    destination: string;
                    /**
                     * @description Gateway of the route.
                     *
                     *     Packages addressed for the specified destination will be send to this IP address.
                     *
                     *     Cannot be
                     *     * the first IP of the networks ip_range,
                     *     * an IP behind a vSwitch or
                     *     * `172.31.1.1`.
                     *
                     *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                     *
                     * @example 10.0.1.1
                     */
                    gateway: string;
                };
            };
        };
        responses: {
            /** @description Response for adding a route to a [Network](#networks).
             *
             *     The `action` key contains an [Action](#actions) with command `add_route`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "add_route",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    add_network_subnet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Type of subnet.
                     *
                     *     - `cloud` - Used to connect cloud [Servers](#servers) and [Load Balancers](#load-balancers).
                     *     - `server` - Same as the `cloud` type. **Deprecated**, use the `cloud` type instead.
                     *     - `vswitch` - Used to [connect cloud Servers and Load Balancers with dedicated Servers](https://docs.hetzner.com/cloud/networks/connect-dedi-vswitch).
                     *
                     * @enum {string}
                     */
                    type: "cloud" | "server" | "vswitch";
                    /**
                     * @description IP range of the subnet.
                     *
                     *     Uses CIDR notation.
                     *
                     *     Must be a subnet of the parent [Networks](#networks) `ip_range`.
                     *
                     *     Must not overlap with any other subnets or with any destinations in routes.
                     *
                     *     Minimum network size is /30. We highly recommend that you pick a larger subnet with a /24 netmask.
                     *
                     * @example 10.0.1.0/24
                     */
                    ip_range?: string;
                    /**
                     * @description Name of the [Network Zone](#network-zones).
                     *
                     *     The [Location](#locations) contains the `network_zone` it belongs to.
                     *
                     * @example eu-central
                     */
                    network_zone: string;
                    /**
                     * Format: int64
                     * @description ID of the robot vSwitch.
                     *
                     *     Must be supplied if the subnet is of type `vswitch`.
                     *
                     * @example 1000
                     */
                    vswitch_id?: number;
                };
            };
        };
        responses: {
            /** @description Response for adding a subnet to a [Network](#networks).
             *
             *     The `action` key contains an [Action](#actions) with command `add_subnet`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "add_subnet",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_network_ip_range: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description IP range of the [Network](#networks).
                     *
                     *     Uses CIDR notation.
                     *
                     *     Must span all included subnets. Must be one of the private IPv4 ranges of RFC1918.
                     *
                     *     Minimum network size is /24. We highly recommend that you pick a larger [Network](#networks) with a /16 netmask.
                     *
                     * @example 10.0.0.0/16
                     */
                    ip_range: string;
                };
            };
        };
        responses: {
            /** @description Response for changing the [Networks](#networks) IP range.
             *
             *     The `action` key contains an [Action](#actions) with command `change_ip_range`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_ip_range",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_network_protection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Delete protection setting.
                     *
                     *     If true, prevents the [Network](#networks) from being deleted.
                     *
                     * @example true
                     */
                    delete?: boolean;
                };
            };
        };
        responses: {
            /** @description Response for changing the [Networks](#networks) protection.
             *
             *     The `action` key contains an [Action](#actions) with command `change_protection`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    delete_network_route: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Destination network or host of the route.
                     *
                     *     Packages addressed for IPs matching the destination IP prefix will be send to the specified gateway.
                     *
                     *     Must be one of
                     *     * private IPv4 ranges of RFC1918
                     *     * or `0.0.0.0/0`.
                     *
                     *     Must not overlap with
                     *     * an existing ip_range in any subnets
                     *     * or with any destinations in other routes
                     *     * or with `172.31.1.1`.
                     *
                     *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                     *
                     * @example 10.100.1.0/24
                     */
                    destination: string;
                    /**
                     * @description Gateway of the route.
                     *
                     *     Packages addressed for the specified destination will be send to this IP address.
                     *
                     *     Cannot be
                     *     * the first IP of the networks ip_range,
                     *     * an IP behind a vSwitch or
                     *     * `172.31.1.1`.
                     *
                     *     `172.31.1.1` is being used as a gateway for the public network interface of [Servers](#servers).
                     *
                     * @example 10.0.1.1
                     */
                    gateway: string;
                };
            };
        };
        responses: {
            /** @description Response for deleting a route from a [Network](#networks).
             *
             *     The `action` key contains an [Action](#actions) with command `delete_route`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "delete_route",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    delete_network_subnet: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description IP range in CIDR block notation of the subnet to delete.
                     * @example 10.0.1.0/24
                     */
                    ip_range: string;
                };
            };
        };
        responses: {
            /** @description Response for deleting a subnet from a [Network](#networks).
             *
             *     The `action` key contains an [Action](#actions) with command `delete_subnet`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "delete_subnet",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_network_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Network. */
                id: number;
                /** @description ID of the Action. */
                action_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for getting an [Action](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "add_subnet",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_placement_groups: {
        parameters: {
            query?: {
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc" | "created" | "created:asc" | "created:desc";
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Filter resources by type. Can be used multiple times. The response will only
                 *     contain the resources with the specified type.
                 *      */
                type?: "spread";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `placement_groups` key contains an array of Placement Group objects. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "placement_groups": [
                     *         {
                     *           "id": 897,
                     *           "name": "my Placement Group",
                     *           "labels": {
                     *             "key": "value"
                     *           },
                     *           "type": "spread",
                     *           "created": "2019-01-08T12:10:00+00:00",
                     *           "servers": [
                     *             4711,
                     *             4712
                     *           ]
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        placement_groups: {
                            /**
                             * Format: int64
                             * @description ID of the Placement Group.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Type of Placement Group.
                             *
                             * @example spread
                             * @enum {string}
                             */
                            type: "spread";
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Array of IDs of Servers that are part of this Placement Group.
                             * @example [
                             *       42
                             *     ]
                             */
                            servers: number[];
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_placement_group: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "name": "my Placement Group",
                 *       "type": "spread"
                 *     } */
                "application/json": {
                    /**
                     * @description Name of the Placement Group.
                     * @example my Placement Group
                     */
                    name: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Define the Placement Group Type.
                     * @example spread
                     * @enum {string}
                     */
                    type: "spread";
                };
            };
        };
        responses: {
            /** @description The `PlacementGroup` key contains the Placement Group that was just created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "placement_group": {
                     *         "id": 897,
                     *         "name": "my Placement Group",
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "type": "spread",
                     *         "created": "2019-01-08T12:10:00+00:00",
                     *         "servers": []
                     *       }
                     *     } */
                    "application/json": {
                        /** PlacementGroup */
                        placement_group: {
                            /**
                             * Format: int64
                             * @description ID of the Placement Group.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Type of Placement Group.
                             *
                             * @example spread
                             * @enum {string}
                             */
                            type: "spread";
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Array of IDs of Servers that are part of this Placement Group.
                             * @example [
                             *       42
                             *     ]
                             */
                            servers: number[];
                        };
                        /** ActionNullable */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        } | null;
                    };
                };
            };
        };
    };
    get_placement_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Placement Group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `placement_group` key contains a Placement Group object. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "placement_group": {
                     *         "id": 897,
                     *         "name": "my Placement Group",
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "type": "spread",
                     *         "created": "2019-01-08T12:10:00+00:00",
                     *         "servers": [
                     *           4711,
                     *           4712
                     *         ]
                     *       }
                     *     } */
                    "application/json": {
                        /** PlacementGroup */
                        placement_group: {
                            /**
                             * Format: int64
                             * @description ID of the Placement Group.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Type of Placement Group.
                             *
                             * @example spread
                             * @enum {string}
                             */
                            type: "spread";
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Array of IDs of Servers that are part of this Placement Group.
                             * @example [
                             *       42
                             *     ]
                             */
                            servers: number[];
                        };
                    };
                };
            };
        };
    };
    update_placement_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Placement Group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New Placement Group name.
                     * @example my Placement Group
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `certificate` key contains the Placement Group that was just updated. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "placement_group": {
                     *         "id": 897,
                     *         "name": "my Placement Group",
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "type": "spread",
                     *         "created": "2019-01-08T12:10:00+00:00",
                     *         "servers": [
                     *           4711,
                     *           4712
                     *         ]
                     *       }
                     *     } */
                    "application/json": {
                        /** PlacementGroup */
                        placement_group: {
                            /**
                             * Format: int64
                             * @description ID of the Placement Group.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Type of Placement Group.
                             *
                             * @example spread
                             * @enum {string}
                             */
                            type: "spread";
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Array of IDs of Servers that are part of this Placement Group.
                             * @example [
                             *       42
                             *     ]
                             */
                            servers: number[];
                        };
                    };
                };
            };
        };
    };
    delete_placement_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Placement Group. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Placement Group deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    get_pricing: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `pricing` key in the reply contains an pricing object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        pricing: {
                            /**
                             * @description Currency the returned prices are expressed in, coded according to [ISO 4217](https://wikipedia.org/wiki/ISO_4217).
                             * @example EUR
                             */
                            currency: string;
                            /**
                             * Format: decimal
                             * @description VAT rate used for calculating prices with VAT.
                             * @example 19.00
                             */
                            vat_rate: string;
                            /** @description Price of [Primary IPs](#primary-ips) per type and per [Location](#locations). */
                            primary_ips: {
                                /**
                                 * @description Type of [Primary IP](#primary-ips) the price is for.
                                 * @example ipv4
                                 * @enum {string}
                                 */
                                type: "ipv4" | "ipv6";
                                /** @description Price of the [Primary IP](#primary-ips) type per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                            }[];
                            /** @description Price of [Floating IPs](#floating-ips) per type and per [Location](#locations). */
                            floating_ips: {
                                /**
                                 * @description Type of [Floating IP](#floating-ips) the price is for.
                                 * @example ipv4
                                 * @enum {string}
                                 */
                                type: "ipv4" | "ipv6";
                                /** @description Price of the [Floating IP](#floating-ips) type per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                            }[];
                            /** @description Price of [Images](#images). */
                            image: {
                                /** @description Price of [Images](#images) per GB/month. */
                                price_per_gb_month: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                            };
                            /** @description Price of [Volumes](#volumes). */
                            volume: {
                                /** @description Price of [Volumes](#volumes) per GB/month. */
                                price_per_gb_month: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                            };
                            /** @description Price of [Server](#servers) backups. */
                            server_backup: {
                                /**
                                 * Format: decimal
                                 * @description Price increase of the [Server](#servers) base price in percentage.
                                 * @example 20.00
                                 */
                                percentage: string;
                            };
                            /** @description Price of Server per [type](#server-types) and per [Location](#locations). */
                            server_types: {
                                /**
                                 * Format: int64
                                 * @description ID of the [Server Types](#server-types) the price is for.
                                 * @example 104
                                 */
                                id: number;
                                /**
                                 * @description Name of the [Server Types](#server-types) the price is for.
                                 * @example cpx11
                                 */
                                name: string;
                                /** @description Price of the [Server Types](#server-types) per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                            }[];
                            /** @description Price of Load Balancer per [type](#load-balancer-types) and per [Location](#locations). */
                            load_balancer_types: {
                                /**
                                 * Format: int64
                                 * @description ID of the [Load Balancer Types](#load-balancer-types) the price is for.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Name of the [Load Balancer Types](#load-balancer-types) the price is for.
                                 * @example lb11
                                 */
                                name: string;
                                /** @description Price of the [Load Balancer Types](#load-balancer-types) per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                            }[];
                            /**
                             * @deprecated
                             * @description Price of [Floating IPs](#floating-ips).
                             *
                             *     **Deprecated**: This field is deprecated, please refer to the `floating_ips` field instead.
                             *
                             *     See the [Changelog](https://docs.hetzner.cloud/changelog#2024-08-29-field-floating_ip-in-pricing-response-is-now-deprecated) for more details.
                             *
                             */
                            floating_ip: {
                                /** @description Price of one [Floating IP](#floating-ips) per month. */
                                price_monthly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    list_primary_ips: {
        parameters: {
            query?: {
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /**
                 * @description Filter results by IP address.
                 * @example 127.0.0.1
                 */
                ip?: string;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "created" | "created:asc" | "created:desc";
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Primary IPs](#primary-ips). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        primary_ips: {
                            /**
                             * Format: int64
                             * @description ID of the Primary IP.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Blocked state of the [Primary IP](#primary-ips).
                             * @example false
                             */
                            blocked: boolean;
                            /** @description [Datacenter](#datacenters) the [Primary IP](#primary-ips) is located at. */
                            datacenter: {
                                /**
                                 * Format: int64
                                 * @description ID of the Datacenter.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique name for the [Datacenter](#datacenters).
                                 *
                                 *     Can be used as a more descriptive identifier.
                                 *
                                 * @example fsn1-dc8
                                 */
                                name: string;
                                /**
                                 * @description Descriptive name for the [Datacenter](#datacenters).
                                 *
                                 *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                                 *
                                 * @example Falkenstein DC Park 8
                                 */
                                description: string;
                                /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                                 *      */
                                location: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Location.
                                     * @example 42
                                     */
                                    id: number;
                                    /**
                                     * @description Unique identifier of the [Location](#locations).
                                     * @example fsn1
                                     */
                                    name: string;
                                    /**
                                     * @description Human readable description of the [Location](#locations).
                                     * @example Falkenstein DC Park 1
                                     */
                                    description: string;
                                    /**
                                     * @description Country the [Location](#locations) resides in.
                                     *
                                     *     ISO 3166-1 alpha-2 code of the country.
                                     *
                                     * @example DE
                                     */
                                    country: string;
                                    /**
                                     * @description Name of the closest city to the [Location](#locations).
                                     *
                                     *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                     *
                                     * @example Falkenstein
                                     */
                                    city: string;
                                    /**
                                     * Format: double
                                     * @description Latitude of the city closest to the [Location](#locations).
                                     * @example 50.47612
                                     */
                                    latitude: number;
                                    /**
                                     * Format: double
                                     * @description Longitude of the city closest to the [Location](#locations).
                                     * @example 12.370071
                                     */
                                    longitude: number;
                                    /**
                                     * @description Name of the Network Zone this [Location](#locations) resides in.
                                     * @example eu-central
                                     */
                                    network_zone: string;
                                };
                                /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                                 *      */
                                server_types: {
                                    /**
                                     * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                     *     temporarily out of stock.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    supported: number[];
                                    /**
                                     * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                     *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available: number[];
                                    /**
                                     * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                     *
                                     *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available_for_migration: number[];
                                };
                            };
                            /**
                             * @description IP address.
                             * @example 2001:db8::/64
                             */
                            ip: string;
                            /** @description List of reverse DNS records. */
                            dns_ptr: {
                                /**
                                 * @description Single IPv4 or IPv6 address to create pointer for.
                                 *
                                 * @example 2001:db8::1
                                 */
                                ip: string;
                                /**
                                 * @description Domain Name to point to.
                                 *
                                 *     PTR record content used for reverse DNS.
                                 *
                                 * @example server.example.com
                                 */
                                dns_ptr: string;
                            }[];
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description [Primary IP](#primary-ips) type.
                             * @example ipv6
                             * @enum {string}
                             */
                            type: "ipv4" | "ipv6";
                            /**
                             * @description Auto deletion state.
                             *
                             *     If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.
                             *
                             * @default false
                             * @example true
                             */
                            auto_delete: boolean;
                            /**
                             * @description Type of resource the [Primary IP](#primary-ips) can get assigned to.
                             *
                             * @example server
                             * @enum {string}
                             */
                            assignee_type: "server";
                            /**
                             * Format: int64
                             * @description ID of resource the [Primary IP](#primary-ips) is assigned to.
                             *
                             *     `null` if the [Primary IP](#primary-ips) is not assigned.
                             *
                             * @example 17
                             */
                            assignee_id: number | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_primary_ip: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Request Body for creating a new [Primary IP](#primary-ips).
         *
         *     The `datacenter` and `assignee_id`/`assignee_type` attributes are mutually exclusive.
         *      */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the Resource. Must be unique per Project.
                     * @example my-resource
                     */
                    name: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description [Primary IP](#primary-ips) type.
                     * @example ipv6
                     * @enum {string}
                     */
                    type: "ipv4" | "ipv6";
                    /**
                     * @description [Datacenter](#datacenters) ID or name.
                     *
                     *     The  [Primary IP](#primary-ips) will be bound to this [Datacenter](#datacenters). Omit if `assignee_id`/`assignee_type` is provided.
                     *
                     * @example fsn1-dc8
                     */
                    datacenter?: string;
                    /**
                     * @description Type of resource the [Primary IP](#primary-ips) can get assigned to.
                     *
                     *     Currently [Primary IPs](#primary-ips) can only be assigned to [Servers](#servers),
                     *     therefore this field must be set to `server`.
                     *
                     * @example server
                     * @enum {string}
                     */
                    assignee_type: "server";
                    /**
                     * Format: int64
                     * @description ID of resource to assign the [Primary IP](#primary-ips) to.
                     *
                     *     Omitted if the [Primary IP](#primary-ips) should not get assigned.
                     *
                     * @example 17
                     */
                    assignee_id?: number | null;
                    /**
                     * @description Auto deletion state.
                     *
                     *     If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.
                     *
                     * @default false
                     * @example false
                     */
                    auto_delete?: boolean;
                };
            };
        };
        responses: {
            /** @description Response for creating a [Primary IP](#primary-ips).
             *
             *     Contains the newly created [Primary IP](#primary-ips).
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "primary_ip": {
                     *         "id": 42,
                     *         "name": "my-ip",
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "created": "2016-01-30T23:50:00+00:00",
                     *         "blocked": false,
                     *         "datacenter": {
                     *           "id": 42,
                     *           "name": "fsn1-dc8",
                     *           "description": "Falkenstein DC Park 8",
                     *           "location": {
                     *             "id": 1,
                     *             "name": "fsn1",
                     *             "description": "Falkenstein DC Park 1",
                     *             "country": "DE",
                     *             "city": "Falkenstein",
                     *             "latitude": 50.47612,
                     *             "longitude": 12.370071,
                     *             "network_zone": "eu-central"
                     *           },
                     *           "server_types": {
                     *             "supported": [
                     *               1,
                     *               2,
                     *               3
                     *             ],
                     *             "available": [
                     *               1,
                     *               2,
                     *               3
                     *             ],
                     *             "available_for_migration": [
                     *               1,
                     *               2,
                     *               3
                     *             ]
                     *           }
                     *         },
                     *         "ip": "2001:db8::/64",
                     *         "dns_ptr": [
                     *           {
                     *             "ip": "2001:db8::1",
                     *             "dns_ptr": "server.example.com"
                     *           }
                     *         ],
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "type": "ipv6",
                     *         "auto_delete": true,
                     *         "assignee_type": "server",
                     *         "assignee_id": 17
                     *       },
                     *       "action": {
                     *         "id": 13,
                     *         "command": "create_primary_ip",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 17,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** PrimaryIP */
                        primary_ip: {
                            /**
                             * Format: int64
                             * @description ID of the Primary IP.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Blocked state of the [Primary IP](#primary-ips).
                             * @example false
                             */
                            blocked: boolean;
                            /** @description [Datacenter](#datacenters) the [Primary IP](#primary-ips) is located at. */
                            datacenter: {
                                /**
                                 * Format: int64
                                 * @description ID of the Datacenter.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique name for the [Datacenter](#datacenters).
                                 *
                                 *     Can be used as a more descriptive identifier.
                                 *
                                 * @example fsn1-dc8
                                 */
                                name: string;
                                /**
                                 * @description Descriptive name for the [Datacenter](#datacenters).
                                 *
                                 *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                                 *
                                 * @example Falkenstein DC Park 8
                                 */
                                description: string;
                                /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                                 *      */
                                location: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Location.
                                     * @example 42
                                     */
                                    id: number;
                                    /**
                                     * @description Unique identifier of the [Location](#locations).
                                     * @example fsn1
                                     */
                                    name: string;
                                    /**
                                     * @description Human readable description of the [Location](#locations).
                                     * @example Falkenstein DC Park 1
                                     */
                                    description: string;
                                    /**
                                     * @description Country the [Location](#locations) resides in.
                                     *
                                     *     ISO 3166-1 alpha-2 code of the country.
                                     *
                                     * @example DE
                                     */
                                    country: string;
                                    /**
                                     * @description Name of the closest city to the [Location](#locations).
                                     *
                                     *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                     *
                                     * @example Falkenstein
                                     */
                                    city: string;
                                    /**
                                     * Format: double
                                     * @description Latitude of the city closest to the [Location](#locations).
                                     * @example 50.47612
                                     */
                                    latitude: number;
                                    /**
                                     * Format: double
                                     * @description Longitude of the city closest to the [Location](#locations).
                                     * @example 12.370071
                                     */
                                    longitude: number;
                                    /**
                                     * @description Name of the Network Zone this [Location](#locations) resides in.
                                     * @example eu-central
                                     */
                                    network_zone: string;
                                };
                                /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                                 *      */
                                server_types: {
                                    /**
                                     * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                     *     temporarily out of stock.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    supported: number[];
                                    /**
                                     * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                     *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available: number[];
                                    /**
                                     * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                     *
                                     *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available_for_migration: number[];
                                };
                            };
                            /**
                             * @description IP address.
                             * @example 2001:db8::/64
                             */
                            ip: string;
                            /** @description List of reverse DNS records. */
                            dns_ptr: {
                                /**
                                 * @description Single IPv4 or IPv6 address to create pointer for.
                                 *
                                 * @example 2001:db8::1
                                 */
                                ip: string;
                                /**
                                 * @description Domain Name to point to.
                                 *
                                 *     PTR record content used for reverse DNS.
                                 *
                                 * @example server.example.com
                                 */
                                dns_ptr: string;
                            }[];
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description [Primary IP](#primary-ips) type.
                             * @example ipv6
                             * @enum {string}
                             */
                            type: "ipv4" | "ipv6";
                            /**
                             * @description Auto deletion state.
                             *
                             *     If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.
                             *
                             * @default false
                             * @example true
                             */
                            auto_delete: boolean;
                            /**
                             * @description Type of resource the [Primary IP](#primary-ips) can get assigned to.
                             *
                             * @example server
                             * @enum {string}
                             */
                            assignee_type: "server";
                            /**
                             * Format: int64
                             * @description ID of resource the [Primary IP](#primary-ips) is assigned to.
                             *
                             *     `null` if the [Primary IP](#primary-ips) is not assigned.
                             *
                             * @example 17
                             */
                            assignee_id: number | null;
                        };
                        /** Action */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_primary_ips_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for listing [Actions](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_primary_ips_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for getting a single [Action](#actions). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_primary_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Primary IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `primary_ip` key contains the [Primary IP](#primary-ips). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** PrimaryIP */
                        primary_ip: {
                            /**
                             * Format: int64
                             * @description ID of the Primary IP.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Blocked state of the [Primary IP](#primary-ips).
                             * @example false
                             */
                            blocked: boolean;
                            /** @description [Datacenter](#datacenters) the [Primary IP](#primary-ips) is located at. */
                            datacenter: {
                                /**
                                 * Format: int64
                                 * @description ID of the Datacenter.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique name for the [Datacenter](#datacenters).
                                 *
                                 *     Can be used as a more descriptive identifier.
                                 *
                                 * @example fsn1-dc8
                                 */
                                name: string;
                                /**
                                 * @description Descriptive name for the [Datacenter](#datacenters).
                                 *
                                 *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                                 *
                                 * @example Falkenstein DC Park 8
                                 */
                                description: string;
                                /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                                 *      */
                                location: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Location.
                                     * @example 42
                                     */
                                    id: number;
                                    /**
                                     * @description Unique identifier of the [Location](#locations).
                                     * @example fsn1
                                     */
                                    name: string;
                                    /**
                                     * @description Human readable description of the [Location](#locations).
                                     * @example Falkenstein DC Park 1
                                     */
                                    description: string;
                                    /**
                                     * @description Country the [Location](#locations) resides in.
                                     *
                                     *     ISO 3166-1 alpha-2 code of the country.
                                     *
                                     * @example DE
                                     */
                                    country: string;
                                    /**
                                     * @description Name of the closest city to the [Location](#locations).
                                     *
                                     *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                     *
                                     * @example Falkenstein
                                     */
                                    city: string;
                                    /**
                                     * Format: double
                                     * @description Latitude of the city closest to the [Location](#locations).
                                     * @example 50.47612
                                     */
                                    latitude: number;
                                    /**
                                     * Format: double
                                     * @description Longitude of the city closest to the [Location](#locations).
                                     * @example 12.370071
                                     */
                                    longitude: number;
                                    /**
                                     * @description Name of the Network Zone this [Location](#locations) resides in.
                                     * @example eu-central
                                     */
                                    network_zone: string;
                                };
                                /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                                 *      */
                                server_types: {
                                    /**
                                     * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                     *     temporarily out of stock.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    supported: number[];
                                    /**
                                     * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                     *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available: number[];
                                    /**
                                     * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                     *
                                     *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available_for_migration: number[];
                                };
                            };
                            /**
                             * @description IP address.
                             * @example 2001:db8::/64
                             */
                            ip: string;
                            /** @description List of reverse DNS records. */
                            dns_ptr: {
                                /**
                                 * @description Single IPv4 or IPv6 address to create pointer for.
                                 *
                                 * @example 2001:db8::1
                                 */
                                ip: string;
                                /**
                                 * @description Domain Name to point to.
                                 *
                                 *     PTR record content used for reverse DNS.
                                 *
                                 * @example server.example.com
                                 */
                                dns_ptr: string;
                            }[];
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description [Primary IP](#primary-ips) type.
                             * @example ipv6
                             * @enum {string}
                             */
                            type: "ipv4" | "ipv6";
                            /**
                             * @description Auto deletion state.
                             *
                             *     If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.
                             *
                             * @default false
                             * @example true
                             */
                            auto_delete: boolean;
                            /**
                             * @description Type of resource the [Primary IP](#primary-ips) can get assigned to.
                             *
                             * @example server
                             * @enum {string}
                             */
                            assignee_type: "server";
                            /**
                             * Format: int64
                             * @description ID of resource the [Primary IP](#primary-ips) is assigned to.
                             *
                             *     `null` if the [Primary IP](#primary-ips) is not assigned.
                             *
                             * @example 17
                             */
                            assignee_id: number | null;
                        };
                    };
                };
            };
        };
    };
    update_primary_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Primary IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the Resource. Must be unique per Project.
                     * @example my-resource
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Auto deletion state.
                     *
                     *     If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.
                     *
                     * @default false
                     * @example true
                     */
                    auto_delete?: boolean;
                };
            };
        };
        responses: {
            /** @description The `primary_ip` key contains the updated [Primary IP](#primary-ips). */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** PrimaryIP */
                        primary_ip: {
                            /**
                             * Format: int64
                             * @description ID of the Primary IP.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Blocked state of the [Primary IP](#primary-ips).
                             * @example false
                             */
                            blocked: boolean;
                            /** @description [Datacenter](#datacenters) the [Primary IP](#primary-ips) is located at. */
                            datacenter: {
                                /**
                                 * Format: int64
                                 * @description ID of the Datacenter.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique name for the [Datacenter](#datacenters).
                                 *
                                 *     Can be used as a more descriptive identifier.
                                 *
                                 * @example fsn1-dc8
                                 */
                                name: string;
                                /**
                                 * @description Descriptive name for the [Datacenter](#datacenters).
                                 *
                                 *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                                 *
                                 * @example Falkenstein DC Park 8
                                 */
                                description: string;
                                /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                                 *      */
                                location: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Location.
                                     * @example 42
                                     */
                                    id: number;
                                    /**
                                     * @description Unique identifier of the [Location](#locations).
                                     * @example fsn1
                                     */
                                    name: string;
                                    /**
                                     * @description Human readable description of the [Location](#locations).
                                     * @example Falkenstein DC Park 1
                                     */
                                    description: string;
                                    /**
                                     * @description Country the [Location](#locations) resides in.
                                     *
                                     *     ISO 3166-1 alpha-2 code of the country.
                                     *
                                     * @example DE
                                     */
                                    country: string;
                                    /**
                                     * @description Name of the closest city to the [Location](#locations).
                                     *
                                     *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                     *
                                     * @example Falkenstein
                                     */
                                    city: string;
                                    /**
                                     * Format: double
                                     * @description Latitude of the city closest to the [Location](#locations).
                                     * @example 50.47612
                                     */
                                    latitude: number;
                                    /**
                                     * Format: double
                                     * @description Longitude of the city closest to the [Location](#locations).
                                     * @example 12.370071
                                     */
                                    longitude: number;
                                    /**
                                     * @description Name of the Network Zone this [Location](#locations) resides in.
                                     * @example eu-central
                                     */
                                    network_zone: string;
                                };
                                /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                                 *      */
                                server_types: {
                                    /**
                                     * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                     *     temporarily out of stock.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    supported: number[];
                                    /**
                                     * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                     *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available: number[];
                                    /**
                                     * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                     *
                                     *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available_for_migration: number[];
                                };
                            };
                            /**
                             * @description IP address.
                             * @example 2001:db8::/64
                             */
                            ip: string;
                            /** @description List of reverse DNS records. */
                            dns_ptr: {
                                /**
                                 * @description Single IPv4 or IPv6 address to create pointer for.
                                 *
                                 * @example 2001:db8::1
                                 */
                                ip: string;
                                /**
                                 * @description Domain Name to point to.
                                 *
                                 *     PTR record content used for reverse DNS.
                                 *
                                 * @example server.example.com
                                 */
                                dns_ptr: string;
                            }[];
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description [Primary IP](#primary-ips) type.
                             * @example ipv6
                             * @enum {string}
                             */
                            type: "ipv4" | "ipv6";
                            /**
                             * @description Auto deletion state.
                             *
                             *     If enabled the [Primary IP](#primary-ips) will be deleted once the assigned resource gets deleted.
                             *
                             * @default false
                             * @example true
                             */
                            auto_delete: boolean;
                            /**
                             * @description Type of resource the [Primary IP](#primary-ips) can get assigned to.
                             *
                             * @example server
                             * @enum {string}
                             */
                            assignee_type: "server";
                            /**
                             * Format: int64
                             * @description ID of resource the [Primary IP](#primary-ips) is assigned to.
                             *
                             *     `null` if the [Primary IP](#primary-ips) is not assigned.
                             *
                             * @example 17
                             */
                            assignee_id: number | null;
                        };
                    };
                };
            };
        };
    };
    delete_primary_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Primary IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description [Primary IP](#primary-ips) deletion succeeded. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    assign_primary_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Primary IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Type of resource assigning the Primary IP to.
                     * @example server
                     * @enum {string}
                     */
                    assignee_type: "server";
                    /**
                     * Format: int64
                     * @description ID of a resource of type `assignee_type`.
                     * @example 4711
                     */
                    assignee_id: number;
                };
            };
        };
        responses: {
            /** @description Response for assigning a [Primary IP](#primary-ips).
             *
             *     Contains an [Action](#actions) of type `assign_primary_ip`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "assign_primary_ip",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "primary_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_primary_ip_dns_ptr: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Primary IP. */
                id: number;
            };
            cookie?: never;
        };
        /** @description The `ip` attributes specifies for which IP address the record is set. For IPv4 addresses this must be the exact address of the [Primary IP](#primary-ips). For IPv6 addresses this must be a single address within the `/64` subnet of the [Primary IP](#primary-ips).
         *
         *     The `dns_ptr` attribute specifies the hostname used for the IP address.
         *
         *     For IPv6 [Floating IPs](#floating-ips) up to 100 entries can be created.
         *      */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Single IPv4 or IPv6 address to create pointer for.
                     *
                     * @example 2001:db8::1
                     */
                    ip: string;
                    /**
                     * @description Domain Name to point to.
                     *
                     *     PTR record content used for reverse DNS.
                     *
                     * @example server.example.com
                     */
                    dns_ptr: string;
                };
            };
        };
        responses: {
            /** @description Response for changing a [Primary IPs](#primary-ips) DNS pointer.
             *
             *     Contains an [Action](#actions) of type `change_dns_ptr`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_dns_ptr",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "primary_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_primary_ip_protection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Primary IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Prevent the Resource from being deleted.
                     * @example false
                     */
                    delete: boolean;
                };
            };
        };
        responses: {
            /** @description Response for changing a [Primary IPs](#primary-ips) protection settings.
             *
             *     Contains an [Action](#actions) of type `change_protection`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 4711,
                     *             "type": "primary_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    unassign_primary_ip: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Primary IP. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Response for unassigning a [Primary IP](#primary-ips).
             *
             *     Contains an [Action](#actions) of type `unassign_primary_ip`.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "unassign_primary_ip",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "primary_ip"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_server_types: {
        parameters: {
            query?: {
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `server_types` key in the reply contains an array of Server type objects with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        server_types: {
                            /**
                             * Format: int64
                             * @description ID of the Server type.
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Unique identifier of the Server type.
                             * @example cpx11
                             */
                            name: string;
                            /**
                             * @description Description of the Server type.
                             * @example CPX11
                             */
                            description: string;
                            /**
                             * @description Number of cpu cores a Server of this type will have.
                             * @example 2
                             */
                            cores: number;
                            /**
                             * @description Memory a Server of this type will have in GB.
                             * @example 2
                             */
                            memory: number;
                            /**
                             * @description Disk size a Server of this type will have in GB.
                             * @example 40
                             */
                            disk: number;
                            /**
                             * @description This field is deprecated. Use the deprecation object instead.
                             * @example false
                             */
                            deprecated: boolean;
                            /** @description Price per [Location](#locations). */
                            prices: {
                                /**
                                 * @description Name of the [Location](#locations) the price is for.
                                 * @example fsn1
                                 */
                                location: string;
                                /** @description Hourly price in this [Location](#locations). */
                                price_hourly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                                /** @description Monthly price in this [Location](#locations). */
                                price_monthly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                                /**
                                 * Format: int64
                                 * @description Free traffic per month in bytes in this [Location](#locations).
                                 * @example 654321
                                 */
                                included_traffic: number;
                                /** @description Additional traffic price per TB in this [Location](#locations). */
                                price_per_tb_traffic: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                            }[];
                            /**
                             * @description Type of Server boot drive. Local has higher speed. Network has better availability.
                             * @enum {string}
                             */
                            storage_type: "local" | "network";
                            /**
                             * @description Type of cpu.
                             * @example shared
                             * @enum {string}
                             */
                            cpu_type: "shared" | "dedicated";
                            /**
                             * @description CPU architecture of the Server Type.
                             *
                             * @example x86
                             * @enum {string}
                             */
                            architecture: "x86" | "arm";
                            /**
                             * DeprecationInfo
                             * @description Describes if, when and how the resource is deprecated. If this field is
                             *     set to `null` the resource is not deprecated. If a value is set, it is
                             *     considered deprecated.
                             *
                             */
                            deprecation?: {
                                /**
                                 * Format: iso-8601
                                 * @description Date of the deprecated resource removal.
                                 *
                                 *     Once this date is reached, the resource will not be returned
                                 *     by resource type "list" endpoint, and the resource can not be
                                 *     used to create new resources. For example, if this is an
                                 *     image, you can not create new servers with this image after
                                 *     the mentioned date.
                                 *
                                 * @example 2023-09-01T00:00:00+00:00
                                 */
                                unavailable_after: string;
                                /**
                                 * Format: iso-8601
                                 * @description Date of the deprecation announcement.
                                 *
                                 * @example 2023-06-01T00:00:00+00:00
                                 */
                                announced: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_server_type: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server Type. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `server_type` key in the reply contains a Server type object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        server_type: {
                            /**
                             * Format: int64
                             * @description ID of the Server type.
                             * @example 1
                             */
                            id: number;
                            /**
                             * @description Unique identifier of the Server type.
                             * @example cpx11
                             */
                            name: string;
                            /**
                             * @description Description of the Server type.
                             * @example CPX11
                             */
                            description: string;
                            /**
                             * @description Number of cpu cores a Server of this type will have.
                             * @example 2
                             */
                            cores: number;
                            /**
                             * @description Memory a Server of this type will have in GB.
                             * @example 2
                             */
                            memory: number;
                            /**
                             * @description Disk size a Server of this type will have in GB.
                             * @example 40
                             */
                            disk: number;
                            /**
                             * @description This field is deprecated. Use the deprecation object instead.
                             * @example false
                             */
                            deprecated: boolean;
                            /** @description Price per [Location](#locations). */
                            prices: {
                                /**
                                 * @description Name of the [Location](#locations) the price is for.
                                 * @example fsn1
                                 */
                                location: string;
                                /** @description Hourly price in this [Location](#locations). */
                                price_hourly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                                /** @description Monthly price in this [Location](#locations). */
                                price_monthly: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                                /**
                                 * Format: int64
                                 * @description Free traffic per month in bytes in this [Location](#locations).
                                 * @example 654321
                                 */
                                included_traffic: number;
                                /** @description Additional traffic price per TB in this [Location](#locations). */
                                price_per_tb_traffic: {
                                    /**
                                     * Format: decimal
                                     * @description Price without VAT.
                                     * @example 1.0000
                                     */
                                    net: string;
                                    /**
                                     * Format: decimal
                                     * @description Price with VAT added.
                                     * @example 1.1900
                                     */
                                    gross: string;
                                };
                            }[];
                            /**
                             * @description Type of Server boot drive. Local has higher speed. Network has better availability.
                             * @enum {string}
                             */
                            storage_type: "local" | "network";
                            /**
                             * @description Type of cpu.
                             * @example shared
                             * @enum {string}
                             */
                            cpu_type: "shared" | "dedicated";
                            /**
                             * @description CPU architecture of the Server Type.
                             *
                             * @example x86
                             * @enum {string}
                             */
                            architecture: "x86" | "arm";
                            /**
                             * DeprecationInfo
                             * @description Describes if, when and how the resource is deprecated. If this field is
                             *     set to `null` the resource is not deprecated. If a value is set, it is
                             *     considered deprecated.
                             *
                             */
                            deprecation?: {
                                /**
                                 * Format: iso-8601
                                 * @description Date of the deprecated resource removal.
                                 *
                                 *     Once this date is reached, the resource will not be returned
                                 *     by resource type "list" endpoint, and the resource can not be
                                 *     used to create new resources. For example, if this is an
                                 *     image, you can not create new servers with this image after
                                 *     the mentioned date.
                                 *
                                 * @example 2023-09-01T00:00:00+00:00
                                 */
                                unavailable_after: string;
                                /**
                                 * Format: iso-8601
                                 * @description Date of the deprecation announcement.
                                 *
                                 * @example 2023-06-01T00:00:00+00:00
                                 */
                                announced: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_servers: {
        parameters: {
            query?: {
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc" | "created" | "created:asc" | "created:desc";
                /** @description Filter resources by status. Can be used multiple times. The response will only
                 *     contain the resources with the specified status.
                 *      */
                status?: "running" | "initializing" | "starting" | "stopping" | "off" | "deleting" | "migrating" | "rebuilding" | "unknown";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description A paged array of servers. */
            200: {
                headers: {
                    /** @description A link to the next page of responses. */
                    "x-next"?: string;
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        servers: {
                            /**
                             * Format: int64
                             * @description ID of the Server.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Server (must be unique per Project and a valid hostname as per RFC 1123).
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description Status of the Server.
                             * @enum {string}
                             */
                            status: "running" | "initializing" | "starting" | "stopping" | "off" | "deleting" | "migrating" | "rebuilding" | "unknown";
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`. */
                            public_net: {
                                /** @description IP address (v4) and its reverse DNS entry of this Server. */
                                ipv4: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Primary IP.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description IP address (v4) of this Server.
                                     * @example 1.2.3.4
                                     */
                                    ip: string;
                                    /**
                                     * @description If the IP is blocked by our anti abuse dept.
                                     * @example false
                                     */
                                    blocked: boolean;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv4 addresses of this Server.
                                     * @example server01.example.com
                                     */
                                    dns_ptr: string;
                                } | null;
                                /** @description IPv6 network assigned to this Server and its reverse DNS entry. */
                                ipv6: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Primary IP.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description IP address (v6) of this Server.
                                     * @example 2001:db8::/64
                                     */
                                    ip: string;
                                    /**
                                     * @description If the IP is blocked by our anti abuse dept.
                                     * @example false
                                     */
                                    blocked: boolean;
                                    /** @description Reverse DNS PTR entries for the IPv6 addresses of this Server. */
                                    dns_ptr: {
                                        /**
                                         * @description Single IPv6 address of this Server for which the reverse DNS entry has been set up.
                                         * @example 2001:db8::1
                                         */
                                        ip: string;
                                        /**
                                         * @description DNS pointer for the specific IP address.
                                         * @example server.example.com
                                         */
                                        dns_ptr: string;
                                    }[] | null;
                                } | null;
                                /**
                                 * @description IDs of Floating IPs assigned to this Server.
                                 * @example [
                                 *       478
                                 *     ]
                                 */
                                floating_ips: number[];
                                /** @description Firewalls applied to the public network interface of this Server. */
                                firewalls?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Firewall.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description Status of the Firewall on the Server.
                                     * @example applied
                                     * @enum {string}
                                     */
                                    status?: "applied" | "pending";
                                }[];
                            };
                            /** @description Private networks information. */
                            private_net: {
                                /**
                                 * Format: int64
                                 * @description The Network ID the server is attached to.
                                 * @example 4711
                                 */
                                network?: number;
                                /**
                                 * @description The server IP address on the network.
                                 * @example 10.0.0.2
                                 */
                                ip?: string;
                                /**
                                 * @description Additional IP addresses of the server on the network.
                                 * @example [
                                 *       "10.0.0.3",
                                 *       "10.0.0.4"
                                 *     ]
                                 */
                                alias_ips?: string[];
                                /**
                                 * @description The server MAC address on the network.
                                 * @example 86:00:ff:2a:7d:e1
                                 */
                                mac_address?: string;
                            }[];
                            server_type: {
                                /**
                                 * Format: int64
                                 * @description ID of the Server type.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the Server type.
                                 * @example cpx11
                                 */
                                name: string;
                                /**
                                 * @description Description of the Server type.
                                 * @example CPX11
                                 */
                                description: string;
                                /**
                                 * @description Number of cpu cores a Server of this type will have.
                                 * @example 2
                                 */
                                cores: number;
                                /**
                                 * @description Memory a Server of this type will have in GB.
                                 * @example 2
                                 */
                                memory: number;
                                /**
                                 * @description Disk size a Server of this type will have in GB.
                                 * @example 40
                                 */
                                disk: number;
                                /**
                                 * @description This field is deprecated. Use the deprecation object instead.
                                 * @example false
                                 */
                                deprecated: boolean;
                                /** @description Price per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                                /**
                                 * @description Type of Server boot drive. Local has higher speed. Network has better availability.
                                 * @enum {string}
                                 */
                                storage_type: "local" | "network";
                                /**
                                 * @description Type of cpu.
                                 * @example shared
                                 * @enum {string}
                                 */
                                cpu_type: "shared" | "dedicated";
                                /**
                                 * @description CPU architecture of the Server Type.
                                 *
                                 * @example x86
                                 * @enum {string}
                                 */
                                architecture: "x86" | "arm";
                                /**
                                 * DeprecationInfo
                                 * @description Describes if, when and how the resource is deprecated. If this field is
                                 *     set to `null` the resource is not deprecated. If a value is set, it is
                                 *     considered deprecated.
                                 *
                                 */
                                deprecation?: {
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecated resource removal.
                                     *
                                     *     Once this date is reached, the resource will not be returned
                                     *     by resource type "list" endpoint, and the resource can not be
                                     *     used to create new resources. For example, if this is an
                                     *     image, you can not create new servers with this image after
                                     *     the mentioned date.
                                     *
                                     * @example 2023-09-01T00:00:00+00:00
                                     */
                                    unavailable_after: string;
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecation announcement.
                                     *
                                     * @example 2023-06-01T00:00:00+00:00
                                     */
                                    announced: string;
                                } | null;
                            };
                            /** @description Datacenter this Resource is located at. */
                            datacenter: {
                                /**
                                 * Format: int64
                                 * @description ID of the Datacenter.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique name for the [Datacenter](#datacenters).
                                 *
                                 *     Can be used as a more descriptive identifier.
                                 *
                                 * @example fsn1-dc8
                                 */
                                name: string;
                                /**
                                 * @description Descriptive name for the [Datacenter](#datacenters).
                                 *
                                 *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                                 *
                                 * @example Falkenstein DC Park 8
                                 */
                                description: string;
                                /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                                 *      */
                                location: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Location.
                                     * @example 42
                                     */
                                    id: number;
                                    /**
                                     * @description Unique identifier of the [Location](#locations).
                                     * @example fsn1
                                     */
                                    name: string;
                                    /**
                                     * @description Human readable description of the [Location](#locations).
                                     * @example Falkenstein DC Park 1
                                     */
                                    description: string;
                                    /**
                                     * @description Country the [Location](#locations) resides in.
                                     *
                                     *     ISO 3166-1 alpha-2 code of the country.
                                     *
                                     * @example DE
                                     */
                                    country: string;
                                    /**
                                     * @description Name of the closest city to the [Location](#locations).
                                     *
                                     *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                     *
                                     * @example Falkenstein
                                     */
                                    city: string;
                                    /**
                                     * Format: double
                                     * @description Latitude of the city closest to the [Location](#locations).
                                     * @example 50.47612
                                     */
                                    latitude: number;
                                    /**
                                     * Format: double
                                     * @description Longitude of the city closest to the [Location](#locations).
                                     * @example 12.370071
                                     */
                                    longitude: number;
                                    /**
                                     * @description Name of the Network Zone this [Location](#locations) resides in.
                                     * @example eu-central
                                     */
                                    network_zone: string;
                                };
                                /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                                 *      */
                                server_types: {
                                    /**
                                     * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                     *     temporarily out of stock.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    supported: number[];
                                    /**
                                     * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                     *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available: number[];
                                    /**
                                     * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                     *
                                     *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available_for_migration: number[];
                                };
                            };
                            /** @description Image the server is based on. */
                            image: {
                                /**
                                 * Format: int64
                                 * @description ID of the Image.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Image.
                                 * @example snapshot
                                 * @enum {string}
                                 */
                                type: "system" | "app" | "snapshot" | "backup";
                                /**
                                 * @description Whether the Image can be used or if it's still being created or unavailable.
                                 * @enum {string}
                                 */
                                status: "available" | "creating" | "unavailable";
                                /**
                                 * @description Unique identifier of the Image. This value is only set for system Images.
                                 * @example ubuntu-20.04
                                 */
                                name: string | null;
                                /**
                                 * @description Description of the Image.
                                 * @example Ubuntu 20.04 Standard 64 bit
                                 */
                                description: string;
                                /**
                                 * @description Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
                                 * @example 2.3
                                 */
                                image_size: number | null;
                                /**
                                 * @description Size of the disk contained in the Image in GB.
                                 * @example 10
                                 */
                                disk_size: number;
                                /**
                                 * @description Point in time when the Resource was created (in ISO-8601 format).
                                 * @example 2016-01-30T23:55:00+00:00
                                 */
                                created: string;
                                /** @description Information about the Server the Image was created from. */
                                created_from: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server the Image was created from.
                                     * @example 1
                                     */
                                    id: number;
                                    /**
                                     * @description Server name at the time the Image was created.
                                     * @example Server
                                     */
                                    name: string;
                                } | null;
                                /**
                                 * Format: int64
                                 * @description ID of Server the Image is bound to. Only set for Images of type `backup`.
                                 * @example null
                                 */
                                bound_to: number | null;
                                /**
                                 * @description Flavor of operating system contained in the Image.
                                 * @example ubuntu
                                 * @enum {string}
                                 */
                                os_flavor: "ubuntu" | "centos" | "debian" | "fedora" | "rocky" | "alma" | "opensuse" | "unknown";
                                /**
                                 * @description Operating system version.
                                 * @example 20.04
                                 */
                                os_version: string | null;
                                /**
                                 * @description Indicates that rapid deploy of the Image is available.
                                 * @example false
                                 */
                                rapid_deploy?: boolean;
                                /** @description Protection configuration for the Resource. */
                                protection: {
                                    /**
                                     * @description Prevent the Resource from being deleted.
                                     * @example false
                                     */
                                    delete: boolean;
                                };
                                /**
                                 * @description Point in time when the Image is considered to be deprecated (in ISO-8601 format).
                                 * @example 2018-02-28T00:00:00+00:00
                                 */
                                deprecated: string | null;
                                /**
                                 * @description Point in time where the Image was deleted (in ISO-8601 format).
                                 * @example null
                                 */
                                deleted: string | null;
                                /**
                                 * @description User-defined labels (`key/value` pairs) for the Resource.
                                 *     For more information, see "[Labels](#labels)".
                                 *
                                 * @example {
                                 *       "environment": "prod",
                                 *       "example.com/my": "label",
                                 *       "just-a-key": ""
                                 *     }
                                 */
                                labels: {
                                    [key: string]: string;
                                };
                                /**
                                 * @description CPU architecture compatible with the Image.
                                 *
                                 * @example x86
                                 * @enum {string}
                                 */
                                architecture: "x86" | "arm";
                            } | null;
                            /** @description ISO Image that is attached to this Server. Null if no ISO is attached. */
                            iso: {
                                /**
                                 * Format: int64
                                 * @description ID of the ISO.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the ISO. Only set for public ISOs.
                                 * @example FreeBSD-11.0-RELEASE-amd64-dvd1
                                 */
                                name: string | null;
                                /**
                                 * @description Description of the ISO.
                                 * @example FreeBSD 11.0 x64
                                 */
                                description: string;
                                /**
                                 * @description Type of the ISO.
                                 * @enum {string|null}
                                 */
                                type: "public" | "private" | null;
                                /**
                                 * DeprecationInfo
                                 * @description Describes if, when and how the resource is deprecated. If this field is
                                 *     set to `null` the resource is not deprecated. If a value is set, it is
                                 *     considered deprecated.
                                 *
                                 */
                                deprecation: {
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecated resource removal.
                                     *
                                     *     Once this date is reached, the resource will not be returned
                                     *     by resource type "list" endpoint, and the resource can not be
                                     *     used to create new resources. For example, if this is an
                                     *     image, you can not create new servers with this image after
                                     *     the mentioned date.
                                     *
                                     * @example 2023-09-01T00:00:00+00:00
                                     */
                                    unavailable_after: string;
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecation announcement.
                                     *
                                     * @example 2023-06-01T00:00:00+00:00
                                     */
                                    announced: string;
                                } | null;
                                /**
                                 * @description CPU architecture compatible with the ISO.
                                 *
                                 *     Null indicates no restriction on the architecture (wildcard).
                                 *
                                 * @example x86
                                 * @enum {string|null}
                                 */
                                architecture: "x86" | "arm" | null;
                            } | null;
                            /**
                             * @description True if rescue mode is enabled. Server will then boot into rescue system on next reboot.
                             * @example false
                             */
                            rescue_enabled: boolean;
                            /**
                             * @description True if Server has been locked and is not available to user.
                             * @example false
                             */
                            locked: boolean;
                            /**
                             * @description Time window (UTC) in which the backup will run, or null if the backups are not enabled.
                             * @example 22-02
                             */
                            backup_window: string | null;
                            /**
                             * Format: int64
                             * @description Outbound Traffic for the current billing period in bytes.
                             * @example 123456
                             */
                            outgoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Inbound Traffic for the current billing period in bytes.
                             * @example 123456
                             */
                            ingoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Free Traffic for the current billing period in bytes.
                             * @example 654321
                             */
                            included_traffic: number | null;
                            /** @description Protection configuration for the Server. */
                            protection: {
                                /**
                                 * @description If true, prevents the Server from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                                /**
                                 * @description If true, prevents the Server from being rebuilt.
                                 * @example false
                                 */
                                rebuild: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /** @description IDs of Volumes assigned to this Server. */
                            volumes?: number[];
                            /** @description Load Balancer IDs assigned to the server. */
                            load_balancers?: number[];
                            /**
                             * @description Size of the primary Disk.
                             * @example 50
                             */
                            primary_disk_size: number;
                            /**
                             * PlacementGroupNullable
                             * @description The placement group the server is assigned to.
                             */
                            placement_group?: {
                                /**
                                 * Format: int64
                                 * @description ID of the Placement Group.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Name of the Resource. Must be unique per Project.
                                 * @example my-resource
                                 */
                                name: string;
                                /**
                                 * @description User-defined labels (`key/value` pairs) for the Resource.
                                 *     For more information, see "[Labels](#labels)".
                                 *
                                 * @example {
                                 *       "environment": "prod",
                                 *       "example.com/my": "label",
                                 *       "just-a-key": ""
                                 *     }
                                 */
                                labels: {
                                    [key: string]: string;
                                };
                                /**
                                 * @description Type of Placement Group.
                                 *
                                 * @example spread
                                 * @enum {string}
                                 */
                                type: "spread";
                                /**
                                 * @description Point in time when the Resource was created (in ISO-8601 format).
                                 * @example 2016-01-30T23:55:00+00:00
                                 */
                                created: string;
                                /**
                                 * @description Array of IDs of Servers that are part of this Placement Group.
                                 * @example [
                                 *       42
                                 *     ]
                                 */
                                servers: number[];
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_server: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Please note that Server names must be unique per Project and valid hostnames as per RFC 1123 (i.e. may only contain letters, digits, periods, and dashes).
         *
         *     For `server_type` you can either use the ID as listed in `/server_types` or its name.
         *
         *     For `image` you can either use the ID as listed in `/images` or its name.
         *
         *     If you want to create the Server in a Location, you must set `location` to the ID or name as listed in `/locations`. This is the recommended way. You can be even more specific by setting `datacenter` to the ID or name as listed in `/datacenters`. However we only recommend this if you want to assign a specific Primary IP to the Server which is located in the specified Datacenter.
         *
         *     Some properties like `start_after_create` or `automount` will trigger Actions after the Server is created. Those Actions are listed in the `next_actions` field in the response.
         *
         *     For accessing your Server we strongly recommend to use SSH keys by passing the respective key IDs in `ssh_keys`. If you do not specify any `ssh_keys` we will generate a root password for you and return it in the response.
         *
         *     Please note that provided user-data is stored in our systems. While we take measures to protect it we highly recommend that you don’t use it to store passwords or other sensitive information.
         *
         *     #### Call specific error codes
         *
         *     | Code                             | Description                                                |
         *     |----------------------------------|------------------------------------------------------------|
         *     | `placement_error`                | An error during the placement occurred                     |
         *     | `primary_ip_assigned`            | The specified Primary IP is already assigned to a server   |
         *     | `primary_ip_datacenter_mismatch` | The specified Primary IP is in a different datacenter      |
         *     | `primary_ip_version_mismatch`    | The specified Primary IP has the wrong IP Version          |
         *      */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the Server to create (must be unique per Project and a valid hostname as per RFC 1123).
                     * @example my-server
                     */
                    name: string;
                    /**
                     * @description ID or name of Location to create Server in (must not be used together with datacenter).
                     * @example nbg1
                     */
                    location?: string;
                    /**
                     * @description ID or name of Datacenter to create Server in (must not be used together with location).
                     * @example nbg1-dc3
                     */
                    datacenter?: string;
                    /**
                     * @description ID or name of the Server type this Server should be created with.
                     * @example cpx11
                     */
                    server_type: string;
                    /**
                     * @description This automatically triggers a [Power on a Server-Server Action](#server-actions-power-on-a-server) after the creation is finished and is returned in the `next_actions` response object.
                     * @default true
                     * @example true
                     */
                    start_after_create?: boolean;
                    /**
                     * @description ID or name of the Image the Server is created from.
                     * @example ubuntu-20.04
                     */
                    image: string;
                    /**
                     * Format: int64
                     * @description ID of the Placement Group the Server should be in.
                     * @example 1
                     */
                    placement_group?: number;
                    /**
                     * @description SSH key IDs (`integer`) or names (`string`) which should be injected into the Server at creation time.
                     * @example [
                     *       "my-ssh-key"
                     *     ]
                     */
                    ssh_keys?: string[];
                    /**
                     * @description Volume IDs which should be attached to the Server at the creation time. Volumes must be in the same Location.
                     * @example [
                     *       123
                     *     ]
                     */
                    volumes?: number[];
                    /**
                     * @description Network IDs which should be attached to the Server private network interface at the creation time.
                     * @example [
                     *       456
                     *     ]
                     */
                    networks?: number[];
                    /**
                     * @description Firewalls which should be applied on the Server's public network interface at creation time.
                     * @example [
                     *       {
                     *         "firewall": 38
                     *       }
                     *     ]
                     */
                    firewalls?: {
                        /**
                         * Format: int64
                         * @description ID of the Firewall.
                         */
                        firewall: number;
                    }[];
                    /**
                     * @description Cloud-Init user data to use during Server creation. This field is limited to 32KiB.
                     * @example #cloud-config
                     *     runcmd:
                     *     - [touch, /root/cloud-init-worked]
                     *
                     */
                    user_data?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Auto-mount Volumes after attach.
                     * @example false
                     */
                    automount?: boolean;
                    /** @description Public Network options. */
                    public_net?: {
                        /**
                         * @description Attach an IPv4 on the public NIC. If false, no IPv4 address will be attached.
                         * @default true
                         */
                        enable_ipv4?: boolean;
                        /**
                         * @description Attach an IPv6 on the public NIC. If false, no IPv6 address will be attached.
                         * @default true
                         */
                        enable_ipv6?: boolean;
                        /** @description ID of the ipv4 Primary IP to use. If omitted and enable_ipv4 is true, a new ipv4 Primary IP will automatically be created. */
                        ipv4?: number | null;
                        /** @description ID of the ipv6 Primary IP to use. If omitted and enable_ipv6 is true, a new ipv6 Primary IP will automatically be created. */
                        ipv6?: number | null;
                    };
                };
            };
        };
        responses: {
            /** @description The `server` key in the reply contains a Server object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "server": {
                     *         "id": 42,
                     *         "name": "my-server",
                     *         "status": "initializing",
                     *         "created": "2016-01-30T23:50:00+00:00",
                     *         "public_net": {
                     *           "ipv4": {
                     *             "ip": "1.2.3.4",
                     *             "blocked": false,
                     *             "dns_ptr": "server01.example.com"
                     *           },
                     *           "ipv6": {
                     *             "ip": "2001:db8::/64",
                     *             "blocked": false,
                     *             "dns_ptr": [
                     *               {
                     *                 "ip": "2001:db8::1",
                     *                 "dns_ptr": "server.example.com"
                     *               }
                     *             ]
                     *           },
                     *           "floating_ips": [
                     *             478
                     *           ],
                     *           "firewalls": [
                     *             {
                     *               "id": 38,
                     *               "status": "applied"
                     *             }
                     *           ]
                     *         },
                     *         "private_net": [
                     *           {
                     *             "network": 4711,
                     *             "ip": "10.0.0.2",
                     *             "alias_ips": [],
                     *             "mac_address": "86:00:ff:2a:7d:e1"
                     *           }
                     *         ],
                     *         "server_type": {
                     *           "id": 1,
                     *           "name": "cpx11",
                     *           "description": "CPX11",
                     *           "cores": 2,
                     *           "memory": 2,
                     *           "disk": 40,
                     *           "deprecated": true,
                     *           "prices": [
                     *             {
                     *               "location": "fsn1",
                     *               "price_hourly": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               },
                     *               "price_monthly": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               },
                     *               "included_traffic": 21990232555520,
                     *               "price_per_tb_traffic": {
                     *                 "net": "1.0000000000",
                     *                 "gross": "1.1900000000000000"
                     *               }
                     *             }
                     *           ],
                     *           "storage_type": "local",
                     *           "cpu_type": "shared",
                     *           "architecture": "x86"
                     *         },
                     *         "datacenter": {
                     *           "id": 1,
                     *           "name": "fsn1-dc8",
                     *           "description": "Falkenstein 1 DC 8",
                     *           "location": {
                     *             "id": 1,
                     *             "name": "fsn1",
                     *             "description": "Falkenstein DC Park 1",
                     *             "country": "DE",
                     *             "city": "Falkenstein",
                     *             "latitude": 50.47612,
                     *             "longitude": 12.370071,
                     *             "network_zone": "eu-central"
                     *           },
                     *           "server_types": {
                     *             "supported": [
                     *               1,
                     *               2,
                     *               3
                     *             ],
                     *             "available": [
                     *               1,
                     *               2,
                     *               3
                     *             ],
                     *             "available_for_migration": [
                     *               1,
                     *               2,
                     *               3
                     *             ]
                     *           }
                     *         },
                     *         "image": {
                     *           "id": 4711,
                     *           "type": "snapshot",
                     *           "status": "available",
                     *           "name": "ubuntu-20.04",
                     *           "description": "Ubuntu 20.04 Standard 64 bit",
                     *           "image_size": 2.3,
                     *           "disk_size": 10,
                     *           "created": "2016-01-30T23:50:00+00:00",
                     *           "created_from": {
                     *             "id": 1,
                     *             "name": "Server"
                     *           },
                     *           "bound_to": null,
                     *           "os_flavor": "ubuntu",
                     *           "os_version": "20.04",
                     *           "rapid_deploy": false,
                     *           "protection": {
                     *             "delete": false
                     *           },
                     *           "deprecated": "2018-02-28T00:00:00+00:00",
                     *           "deleted": null,
                     *           "labels": {
                     *             "key": "value"
                     *           },
                     *           "architecture": "x86"
                     *         },
                     *         "iso": {
                     *           "id": 4711,
                     *           "name": "FreeBSD-11.0-RELEASE-amd64-dvd1",
                     *           "description": "FreeBSD 11.0 x64",
                     *           "type": "public",
                     *           "deprecation": {
                     *             "announced": "2018-02-28T00:00:00+00:00",
                     *             "unavailable_after": "2018-05-31T00:00:00+00:00"
                     *           },
                     *           "architecture": "x86"
                     *         },
                     *         "rescue_enabled": false,
                     *         "locked": false,
                     *         "backup_window": "22-02",
                     *         "outgoing_traffic": 123456,
                     *         "ingoing_traffic": 123456,
                     *         "included_traffic": 654321,
                     *         "protection": {
                     *           "delete": false,
                     *           "rebuild": false
                     *         },
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "volumes": [],
                     *         "load_balancers": [],
                     *         "primary_disk_size": 50
                     *       },
                     *       "action": {
                     *         "id": 1,
                     *         "command": "create_server",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       },
                     *       "next_actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "start_server",
                     *           "status": "running",
                     *           "progress": 0,
                     *           "started": "2016-01-30T23:50:00+00:00",
                     *           "finished": null,
                     *           "resources": [
                     *             {
                     *               "id": 42,
                     *               "type": "server"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "root_password": "YItygq1v3GYjjMomLaKc"
                     *     } */
                    "application/json": {
                        server: {
                            /**
                             * Format: int64
                             * @description ID of the Server.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Server (must be unique per Project and a valid hostname as per RFC 1123).
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description Status of the Server.
                             * @enum {string}
                             */
                            status: "running" | "initializing" | "starting" | "stopping" | "off" | "deleting" | "migrating" | "rebuilding" | "unknown";
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`. */
                            public_net: {
                                /** @description IP address (v4) and its reverse DNS entry of this Server. */
                                ipv4: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Primary IP.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description IP address (v4) of this Server.
                                     * @example 1.2.3.4
                                     */
                                    ip: string;
                                    /**
                                     * @description If the IP is blocked by our anti abuse dept.
                                     * @example false
                                     */
                                    blocked: boolean;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv4 addresses of this Server.
                                     * @example server01.example.com
                                     */
                                    dns_ptr: string;
                                } | null;
                                /** @description IPv6 network assigned to this Server and its reverse DNS entry. */
                                ipv6: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Primary IP.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description IP address (v6) of this Server.
                                     * @example 2001:db8::/64
                                     */
                                    ip: string;
                                    /**
                                     * @description If the IP is blocked by our anti abuse dept.
                                     * @example false
                                     */
                                    blocked: boolean;
                                    /** @description Reverse DNS PTR entries for the IPv6 addresses of this Server. */
                                    dns_ptr: {
                                        /**
                                         * @description Single IPv6 address of this Server for which the reverse DNS entry has been set up.
                                         * @example 2001:db8::1
                                         */
                                        ip: string;
                                        /**
                                         * @description DNS pointer for the specific IP address.
                                         * @example server.example.com
                                         */
                                        dns_ptr: string;
                                    }[] | null;
                                } | null;
                                /**
                                 * @description IDs of Floating IPs assigned to this Server.
                                 * @example [
                                 *       478
                                 *     ]
                                 */
                                floating_ips: number[];
                                /** @description Firewalls applied to the public network interface of this Server. */
                                firewalls?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Firewall.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description Status of the Firewall on the Server.
                                     * @example applied
                                     * @enum {string}
                                     */
                                    status?: "applied" | "pending";
                                }[];
                            };
                            /** @description Private networks information. */
                            private_net: {
                                /**
                                 * Format: int64
                                 * @description The Network ID the server is attached to.
                                 * @example 4711
                                 */
                                network?: number;
                                /**
                                 * @description The server IP address on the network.
                                 * @example 10.0.0.2
                                 */
                                ip?: string;
                                /**
                                 * @description Additional IP addresses of the server on the network.
                                 * @example [
                                 *       "10.0.0.3",
                                 *       "10.0.0.4"
                                 *     ]
                                 */
                                alias_ips?: string[];
                                /**
                                 * @description The server MAC address on the network.
                                 * @example 86:00:ff:2a:7d:e1
                                 */
                                mac_address?: string;
                            }[];
                            server_type: {
                                /**
                                 * Format: int64
                                 * @description ID of the Server type.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the Server type.
                                 * @example cpx11
                                 */
                                name: string;
                                /**
                                 * @description Description of the Server type.
                                 * @example CPX11
                                 */
                                description: string;
                                /**
                                 * @description Number of cpu cores a Server of this type will have.
                                 * @example 2
                                 */
                                cores: number;
                                /**
                                 * @description Memory a Server of this type will have in GB.
                                 * @example 2
                                 */
                                memory: number;
                                /**
                                 * @description Disk size a Server of this type will have in GB.
                                 * @example 40
                                 */
                                disk: number;
                                /**
                                 * @description This field is deprecated. Use the deprecation object instead.
                                 * @example false
                                 */
                                deprecated: boolean;
                                /** @description Price per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                                /**
                                 * @description Type of Server boot drive. Local has higher speed. Network has better availability.
                                 * @enum {string}
                                 */
                                storage_type: "local" | "network";
                                /**
                                 * @description Type of cpu.
                                 * @example shared
                                 * @enum {string}
                                 */
                                cpu_type: "shared" | "dedicated";
                                /**
                                 * @description CPU architecture of the Server Type.
                                 *
                                 * @example x86
                                 * @enum {string}
                                 */
                                architecture: "x86" | "arm";
                                /**
                                 * DeprecationInfo
                                 * @description Describes if, when and how the resource is deprecated. If this field is
                                 *     set to `null` the resource is not deprecated. If a value is set, it is
                                 *     considered deprecated.
                                 *
                                 */
                                deprecation?: {
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecated resource removal.
                                     *
                                     *     Once this date is reached, the resource will not be returned
                                     *     by resource type "list" endpoint, and the resource can not be
                                     *     used to create new resources. For example, if this is an
                                     *     image, you can not create new servers with this image after
                                     *     the mentioned date.
                                     *
                                     * @example 2023-09-01T00:00:00+00:00
                                     */
                                    unavailable_after: string;
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecation announcement.
                                     *
                                     * @example 2023-06-01T00:00:00+00:00
                                     */
                                    announced: string;
                                } | null;
                            };
                            /** @description Datacenter this Resource is located at. */
                            datacenter: {
                                /**
                                 * Format: int64
                                 * @description ID of the Datacenter.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique name for the [Datacenter](#datacenters).
                                 *
                                 *     Can be used as a more descriptive identifier.
                                 *
                                 * @example fsn1-dc8
                                 */
                                name: string;
                                /**
                                 * @description Descriptive name for the [Datacenter](#datacenters).
                                 *
                                 *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                                 *
                                 * @example Falkenstein DC Park 8
                                 */
                                description: string;
                                /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                                 *      */
                                location: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Location.
                                     * @example 42
                                     */
                                    id: number;
                                    /**
                                     * @description Unique identifier of the [Location](#locations).
                                     * @example fsn1
                                     */
                                    name: string;
                                    /**
                                     * @description Human readable description of the [Location](#locations).
                                     * @example Falkenstein DC Park 1
                                     */
                                    description: string;
                                    /**
                                     * @description Country the [Location](#locations) resides in.
                                     *
                                     *     ISO 3166-1 alpha-2 code of the country.
                                     *
                                     * @example DE
                                     */
                                    country: string;
                                    /**
                                     * @description Name of the closest city to the [Location](#locations).
                                     *
                                     *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                     *
                                     * @example Falkenstein
                                     */
                                    city: string;
                                    /**
                                     * Format: double
                                     * @description Latitude of the city closest to the [Location](#locations).
                                     * @example 50.47612
                                     */
                                    latitude: number;
                                    /**
                                     * Format: double
                                     * @description Longitude of the city closest to the [Location](#locations).
                                     * @example 12.370071
                                     */
                                    longitude: number;
                                    /**
                                     * @description Name of the Network Zone this [Location](#locations) resides in.
                                     * @example eu-central
                                     */
                                    network_zone: string;
                                };
                                /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                                 *      */
                                server_types: {
                                    /**
                                     * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                     *     temporarily out of stock.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    supported: number[];
                                    /**
                                     * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                     *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available: number[];
                                    /**
                                     * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                     *
                                     *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available_for_migration: number[];
                                };
                            };
                            /** @description Image the server is based on. */
                            image: {
                                /**
                                 * Format: int64
                                 * @description ID of the Image.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Image.
                                 * @example snapshot
                                 * @enum {string}
                                 */
                                type: "system" | "app" | "snapshot" | "backup";
                                /**
                                 * @description Whether the Image can be used or if it's still being created or unavailable.
                                 * @enum {string}
                                 */
                                status: "available" | "creating" | "unavailable";
                                /**
                                 * @description Unique identifier of the Image. This value is only set for system Images.
                                 * @example ubuntu-20.04
                                 */
                                name: string | null;
                                /**
                                 * @description Description of the Image.
                                 * @example Ubuntu 20.04 Standard 64 bit
                                 */
                                description: string;
                                /**
                                 * @description Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
                                 * @example 2.3
                                 */
                                image_size: number | null;
                                /**
                                 * @description Size of the disk contained in the Image in GB.
                                 * @example 10
                                 */
                                disk_size: number;
                                /**
                                 * @description Point in time when the Resource was created (in ISO-8601 format).
                                 * @example 2016-01-30T23:55:00+00:00
                                 */
                                created: string;
                                /** @description Information about the Server the Image was created from. */
                                created_from: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server the Image was created from.
                                     * @example 1
                                     */
                                    id: number;
                                    /**
                                     * @description Server name at the time the Image was created.
                                     * @example Server
                                     */
                                    name: string;
                                } | null;
                                /**
                                 * Format: int64
                                 * @description ID of Server the Image is bound to. Only set for Images of type `backup`.
                                 * @example null
                                 */
                                bound_to: number | null;
                                /**
                                 * @description Flavor of operating system contained in the Image.
                                 * @example ubuntu
                                 * @enum {string}
                                 */
                                os_flavor: "ubuntu" | "centos" | "debian" | "fedora" | "rocky" | "alma" | "opensuse" | "unknown";
                                /**
                                 * @description Operating system version.
                                 * @example 20.04
                                 */
                                os_version: string | null;
                                /**
                                 * @description Indicates that rapid deploy of the Image is available.
                                 * @example false
                                 */
                                rapid_deploy?: boolean;
                                /** @description Protection configuration for the Resource. */
                                protection: {
                                    /**
                                     * @description Prevent the Resource from being deleted.
                                     * @example false
                                     */
                                    delete: boolean;
                                };
                                /**
                                 * @description Point in time when the Image is considered to be deprecated (in ISO-8601 format).
                                 * @example 2018-02-28T00:00:00+00:00
                                 */
                                deprecated: string | null;
                                /**
                                 * @description Point in time where the Image was deleted (in ISO-8601 format).
                                 * @example null
                                 */
                                deleted: string | null;
                                /**
                                 * @description User-defined labels (`key/value` pairs) for the Resource.
                                 *     For more information, see "[Labels](#labels)".
                                 *
                                 * @example {
                                 *       "environment": "prod",
                                 *       "example.com/my": "label",
                                 *       "just-a-key": ""
                                 *     }
                                 */
                                labels: {
                                    [key: string]: string;
                                };
                                /**
                                 * @description CPU architecture compatible with the Image.
                                 *
                                 * @example x86
                                 * @enum {string}
                                 */
                                architecture: "x86" | "arm";
                            } | null;
                            /** @description ISO Image that is attached to this Server. Null if no ISO is attached. */
                            iso: {
                                /**
                                 * Format: int64
                                 * @description ID of the ISO.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the ISO. Only set for public ISOs.
                                 * @example FreeBSD-11.0-RELEASE-amd64-dvd1
                                 */
                                name: string | null;
                                /**
                                 * @description Description of the ISO.
                                 * @example FreeBSD 11.0 x64
                                 */
                                description: string;
                                /**
                                 * @description Type of the ISO.
                                 * @enum {string|null}
                                 */
                                type: "public" | "private" | null;
                                /**
                                 * DeprecationInfo
                                 * @description Describes if, when and how the resource is deprecated. If this field is
                                 *     set to `null` the resource is not deprecated. If a value is set, it is
                                 *     considered deprecated.
                                 *
                                 */
                                deprecation: {
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecated resource removal.
                                     *
                                     *     Once this date is reached, the resource will not be returned
                                     *     by resource type "list" endpoint, and the resource can not be
                                     *     used to create new resources. For example, if this is an
                                     *     image, you can not create new servers with this image after
                                     *     the mentioned date.
                                     *
                                     * @example 2023-09-01T00:00:00+00:00
                                     */
                                    unavailable_after: string;
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecation announcement.
                                     *
                                     * @example 2023-06-01T00:00:00+00:00
                                     */
                                    announced: string;
                                } | null;
                                /**
                                 * @description CPU architecture compatible with the ISO.
                                 *
                                 *     Null indicates no restriction on the architecture (wildcard).
                                 *
                                 * @example x86
                                 * @enum {string|null}
                                 */
                                architecture: "x86" | "arm" | null;
                            } | null;
                            /**
                             * @description True if rescue mode is enabled. Server will then boot into rescue system on next reboot.
                             * @example false
                             */
                            rescue_enabled: boolean;
                            /**
                             * @description True if Server has been locked and is not available to user.
                             * @example false
                             */
                            locked: boolean;
                            /**
                             * @description Time window (UTC) in which the backup will run, or null if the backups are not enabled.
                             * @example 22-02
                             */
                            backup_window: string | null;
                            /**
                             * Format: int64
                             * @description Outbound Traffic for the current billing period in bytes.
                             * @example 123456
                             */
                            outgoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Inbound Traffic for the current billing period in bytes.
                             * @example 123456
                             */
                            ingoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Free Traffic for the current billing period in bytes.
                             * @example 654321
                             */
                            included_traffic: number | null;
                            /** @description Protection configuration for the Server. */
                            protection: {
                                /**
                                 * @description If true, prevents the Server from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                                /**
                                 * @description If true, prevents the Server from being rebuilt.
                                 * @example false
                                 */
                                rebuild: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /** @description IDs of Volumes assigned to this Server. */
                            volumes?: number[];
                            /** @description Load Balancer IDs assigned to the server. */
                            load_balancers?: number[];
                            /**
                             * @description Size of the primary Disk.
                             * @example 50
                             */
                            primary_disk_size: number;
                            /**
                             * PlacementGroupNullable
                             * @description The placement group the server is assigned to.
                             */
                            placement_group?: {
                                /**
                                 * Format: int64
                                 * @description ID of the Placement Group.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Name of the Resource. Must be unique per Project.
                                 * @example my-resource
                                 */
                                name: string;
                                /**
                                 * @description User-defined labels (`key/value` pairs) for the Resource.
                                 *     For more information, see "[Labels](#labels)".
                                 *
                                 * @example {
                                 *       "environment": "prod",
                                 *       "example.com/my": "label",
                                 *       "just-a-key": ""
                                 *     }
                                 */
                                labels: {
                                    [key: string]: string;
                                };
                                /**
                                 * @description Type of Placement Group.
                                 *
                                 * @example spread
                                 * @enum {string}
                                 */
                                type: "spread";
                                /**
                                 * @description Point in time when the Resource was created (in ISO-8601 format).
                                 * @example 2016-01-30T23:55:00+00:00
                                 */
                                created: string;
                                /**
                                 * @description Array of IDs of Servers that are part of this Placement Group.
                                 * @example [
                                 *       42
                                 *     ]
                                 */
                                servers: number[];
                            } | null;
                        };
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                        next_actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /**
                         * @description Root password when no SSH keys have been specified.
                         * @example YItygq1v3GYjjMomLaKc
                         */
                        root_password: string | null;
                    };
                };
            };
        };
    };
    list_servers_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_servers_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply has this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `server` key in the reply contains a Server object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        server?: {
                            /**
                             * Format: int64
                             * @description ID of the Server.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Server (must be unique per Project and a valid hostname as per RFC 1123).
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description Status of the Server.
                             * @enum {string}
                             */
                            status: "running" | "initializing" | "starting" | "stopping" | "off" | "deleting" | "migrating" | "rebuilding" | "unknown";
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`. */
                            public_net: {
                                /** @description IP address (v4) and its reverse DNS entry of this Server. */
                                ipv4: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Primary IP.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description IP address (v4) of this Server.
                                     * @example 1.2.3.4
                                     */
                                    ip: string;
                                    /**
                                     * @description If the IP is blocked by our anti abuse dept.
                                     * @example false
                                     */
                                    blocked: boolean;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv4 addresses of this Server.
                                     * @example server01.example.com
                                     */
                                    dns_ptr: string;
                                } | null;
                                /** @description IPv6 network assigned to this Server and its reverse DNS entry. */
                                ipv6: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Primary IP.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description IP address (v6) of this Server.
                                     * @example 2001:db8::/64
                                     */
                                    ip: string;
                                    /**
                                     * @description If the IP is blocked by our anti abuse dept.
                                     * @example false
                                     */
                                    blocked: boolean;
                                    /** @description Reverse DNS PTR entries for the IPv6 addresses of this Server. */
                                    dns_ptr: {
                                        /**
                                         * @description Single IPv6 address of this Server for which the reverse DNS entry has been set up.
                                         * @example 2001:db8::1
                                         */
                                        ip: string;
                                        /**
                                         * @description DNS pointer for the specific IP address.
                                         * @example server.example.com
                                         */
                                        dns_ptr: string;
                                    }[] | null;
                                } | null;
                                /**
                                 * @description IDs of Floating IPs assigned to this Server.
                                 * @example [
                                 *       478
                                 *     ]
                                 */
                                floating_ips: number[];
                                /** @description Firewalls applied to the public network interface of this Server. */
                                firewalls?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Firewall.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description Status of the Firewall on the Server.
                                     * @example applied
                                     * @enum {string}
                                     */
                                    status?: "applied" | "pending";
                                }[];
                            };
                            /** @description Private networks information. */
                            private_net: {
                                /**
                                 * Format: int64
                                 * @description The Network ID the server is attached to.
                                 * @example 4711
                                 */
                                network?: number;
                                /**
                                 * @description The server IP address on the network.
                                 * @example 10.0.0.2
                                 */
                                ip?: string;
                                /**
                                 * @description Additional IP addresses of the server on the network.
                                 * @example [
                                 *       "10.0.0.3",
                                 *       "10.0.0.4"
                                 *     ]
                                 */
                                alias_ips?: string[];
                                /**
                                 * @description The server MAC address on the network.
                                 * @example 86:00:ff:2a:7d:e1
                                 */
                                mac_address?: string;
                            }[];
                            server_type: {
                                /**
                                 * Format: int64
                                 * @description ID of the Server type.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the Server type.
                                 * @example cpx11
                                 */
                                name: string;
                                /**
                                 * @description Description of the Server type.
                                 * @example CPX11
                                 */
                                description: string;
                                /**
                                 * @description Number of cpu cores a Server of this type will have.
                                 * @example 2
                                 */
                                cores: number;
                                /**
                                 * @description Memory a Server of this type will have in GB.
                                 * @example 2
                                 */
                                memory: number;
                                /**
                                 * @description Disk size a Server of this type will have in GB.
                                 * @example 40
                                 */
                                disk: number;
                                /**
                                 * @description This field is deprecated. Use the deprecation object instead.
                                 * @example false
                                 */
                                deprecated: boolean;
                                /** @description Price per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                                /**
                                 * @description Type of Server boot drive. Local has higher speed. Network has better availability.
                                 * @enum {string}
                                 */
                                storage_type: "local" | "network";
                                /**
                                 * @description Type of cpu.
                                 * @example shared
                                 * @enum {string}
                                 */
                                cpu_type: "shared" | "dedicated";
                                /**
                                 * @description CPU architecture of the Server Type.
                                 *
                                 * @example x86
                                 * @enum {string}
                                 */
                                architecture: "x86" | "arm";
                                /**
                                 * DeprecationInfo
                                 * @description Describes if, when and how the resource is deprecated. If this field is
                                 *     set to `null` the resource is not deprecated. If a value is set, it is
                                 *     considered deprecated.
                                 *
                                 */
                                deprecation?: {
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecated resource removal.
                                     *
                                     *     Once this date is reached, the resource will not be returned
                                     *     by resource type "list" endpoint, and the resource can not be
                                     *     used to create new resources. For example, if this is an
                                     *     image, you can not create new servers with this image after
                                     *     the mentioned date.
                                     *
                                     * @example 2023-09-01T00:00:00+00:00
                                     */
                                    unavailable_after: string;
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecation announcement.
                                     *
                                     * @example 2023-06-01T00:00:00+00:00
                                     */
                                    announced: string;
                                } | null;
                            };
                            /** @description Datacenter this Resource is located at. */
                            datacenter: {
                                /**
                                 * Format: int64
                                 * @description ID of the Datacenter.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique name for the [Datacenter](#datacenters).
                                 *
                                 *     Can be used as a more descriptive identifier.
                                 *
                                 * @example fsn1-dc8
                                 */
                                name: string;
                                /**
                                 * @description Descriptive name for the [Datacenter](#datacenters).
                                 *
                                 *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                                 *
                                 * @example Falkenstein DC Park 8
                                 */
                                description: string;
                                /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                                 *      */
                                location: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Location.
                                     * @example 42
                                     */
                                    id: number;
                                    /**
                                     * @description Unique identifier of the [Location](#locations).
                                     * @example fsn1
                                     */
                                    name: string;
                                    /**
                                     * @description Human readable description of the [Location](#locations).
                                     * @example Falkenstein DC Park 1
                                     */
                                    description: string;
                                    /**
                                     * @description Country the [Location](#locations) resides in.
                                     *
                                     *     ISO 3166-1 alpha-2 code of the country.
                                     *
                                     * @example DE
                                     */
                                    country: string;
                                    /**
                                     * @description Name of the closest city to the [Location](#locations).
                                     *
                                     *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                     *
                                     * @example Falkenstein
                                     */
                                    city: string;
                                    /**
                                     * Format: double
                                     * @description Latitude of the city closest to the [Location](#locations).
                                     * @example 50.47612
                                     */
                                    latitude: number;
                                    /**
                                     * Format: double
                                     * @description Longitude of the city closest to the [Location](#locations).
                                     * @example 12.370071
                                     */
                                    longitude: number;
                                    /**
                                     * @description Name of the Network Zone this [Location](#locations) resides in.
                                     * @example eu-central
                                     */
                                    network_zone: string;
                                };
                                /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                                 *      */
                                server_types: {
                                    /**
                                     * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                     *     temporarily out of stock.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    supported: number[];
                                    /**
                                     * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                     *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available: number[];
                                    /**
                                     * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                     *
                                     *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available_for_migration: number[];
                                };
                            };
                            /** @description Image the server is based on. */
                            image: {
                                /**
                                 * Format: int64
                                 * @description ID of the Image.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Image.
                                 * @example snapshot
                                 * @enum {string}
                                 */
                                type: "system" | "app" | "snapshot" | "backup";
                                /**
                                 * @description Whether the Image can be used or if it's still being created or unavailable.
                                 * @enum {string}
                                 */
                                status: "available" | "creating" | "unavailable";
                                /**
                                 * @description Unique identifier of the Image. This value is only set for system Images.
                                 * @example ubuntu-20.04
                                 */
                                name: string | null;
                                /**
                                 * @description Description of the Image.
                                 * @example Ubuntu 20.04 Standard 64 bit
                                 */
                                description: string;
                                /**
                                 * @description Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
                                 * @example 2.3
                                 */
                                image_size: number | null;
                                /**
                                 * @description Size of the disk contained in the Image in GB.
                                 * @example 10
                                 */
                                disk_size: number;
                                /**
                                 * @description Point in time when the Resource was created (in ISO-8601 format).
                                 * @example 2016-01-30T23:55:00+00:00
                                 */
                                created: string;
                                /** @description Information about the Server the Image was created from. */
                                created_from: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server the Image was created from.
                                     * @example 1
                                     */
                                    id: number;
                                    /**
                                     * @description Server name at the time the Image was created.
                                     * @example Server
                                     */
                                    name: string;
                                } | null;
                                /**
                                 * Format: int64
                                 * @description ID of Server the Image is bound to. Only set for Images of type `backup`.
                                 * @example null
                                 */
                                bound_to: number | null;
                                /**
                                 * @description Flavor of operating system contained in the Image.
                                 * @example ubuntu
                                 * @enum {string}
                                 */
                                os_flavor: "ubuntu" | "centos" | "debian" | "fedora" | "rocky" | "alma" | "opensuse" | "unknown";
                                /**
                                 * @description Operating system version.
                                 * @example 20.04
                                 */
                                os_version: string | null;
                                /**
                                 * @description Indicates that rapid deploy of the Image is available.
                                 * @example false
                                 */
                                rapid_deploy?: boolean;
                                /** @description Protection configuration for the Resource. */
                                protection: {
                                    /**
                                     * @description Prevent the Resource from being deleted.
                                     * @example false
                                     */
                                    delete: boolean;
                                };
                                /**
                                 * @description Point in time when the Image is considered to be deprecated (in ISO-8601 format).
                                 * @example 2018-02-28T00:00:00+00:00
                                 */
                                deprecated: string | null;
                                /**
                                 * @description Point in time where the Image was deleted (in ISO-8601 format).
                                 * @example null
                                 */
                                deleted: string | null;
                                /**
                                 * @description User-defined labels (`key/value` pairs) for the Resource.
                                 *     For more information, see "[Labels](#labels)".
                                 *
                                 * @example {
                                 *       "environment": "prod",
                                 *       "example.com/my": "label",
                                 *       "just-a-key": ""
                                 *     }
                                 */
                                labels: {
                                    [key: string]: string;
                                };
                                /**
                                 * @description CPU architecture compatible with the Image.
                                 *
                                 * @example x86
                                 * @enum {string}
                                 */
                                architecture: "x86" | "arm";
                            } | null;
                            /** @description ISO Image that is attached to this Server. Null if no ISO is attached. */
                            iso: {
                                /**
                                 * Format: int64
                                 * @description ID of the ISO.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the ISO. Only set for public ISOs.
                                 * @example FreeBSD-11.0-RELEASE-amd64-dvd1
                                 */
                                name: string | null;
                                /**
                                 * @description Description of the ISO.
                                 * @example FreeBSD 11.0 x64
                                 */
                                description: string;
                                /**
                                 * @description Type of the ISO.
                                 * @enum {string|null}
                                 */
                                type: "public" | "private" | null;
                                /**
                                 * DeprecationInfo
                                 * @description Describes if, when and how the resource is deprecated. If this field is
                                 *     set to `null` the resource is not deprecated. If a value is set, it is
                                 *     considered deprecated.
                                 *
                                 */
                                deprecation: {
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecated resource removal.
                                     *
                                     *     Once this date is reached, the resource will not be returned
                                     *     by resource type "list" endpoint, and the resource can not be
                                     *     used to create new resources. For example, if this is an
                                     *     image, you can not create new servers with this image after
                                     *     the mentioned date.
                                     *
                                     * @example 2023-09-01T00:00:00+00:00
                                     */
                                    unavailable_after: string;
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecation announcement.
                                     *
                                     * @example 2023-06-01T00:00:00+00:00
                                     */
                                    announced: string;
                                } | null;
                                /**
                                 * @description CPU architecture compatible with the ISO.
                                 *
                                 *     Null indicates no restriction on the architecture (wildcard).
                                 *
                                 * @example x86
                                 * @enum {string|null}
                                 */
                                architecture: "x86" | "arm" | null;
                            } | null;
                            /**
                             * @description True if rescue mode is enabled. Server will then boot into rescue system on next reboot.
                             * @example false
                             */
                            rescue_enabled: boolean;
                            /**
                             * @description True if Server has been locked and is not available to user.
                             * @example false
                             */
                            locked: boolean;
                            /**
                             * @description Time window (UTC) in which the backup will run, or null if the backups are not enabled.
                             * @example 22-02
                             */
                            backup_window: string | null;
                            /**
                             * Format: int64
                             * @description Outbound Traffic for the current billing period in bytes.
                             * @example 123456
                             */
                            outgoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Inbound Traffic for the current billing period in bytes.
                             * @example 123456
                             */
                            ingoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Free Traffic for the current billing period in bytes.
                             * @example 654321
                             */
                            included_traffic: number | null;
                            /** @description Protection configuration for the Server. */
                            protection: {
                                /**
                                 * @description If true, prevents the Server from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                                /**
                                 * @description If true, prevents the Server from being rebuilt.
                                 * @example false
                                 */
                                rebuild: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /** @description IDs of Volumes assigned to this Server. */
                            volumes?: number[];
                            /** @description Load Balancer IDs assigned to the server. */
                            load_balancers?: number[];
                            /**
                             * @description Size of the primary Disk.
                             * @example 50
                             */
                            primary_disk_size: number;
                            /**
                             * PlacementGroupNullable
                             * @description The placement group the server is assigned to.
                             */
                            placement_group?: {
                                /**
                                 * Format: int64
                                 * @description ID of the Placement Group.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Name of the Resource. Must be unique per Project.
                                 * @example my-resource
                                 */
                                name: string;
                                /**
                                 * @description User-defined labels (`key/value` pairs) for the Resource.
                                 *     For more information, see "[Labels](#labels)".
                                 *
                                 * @example {
                                 *       "environment": "prod",
                                 *       "example.com/my": "label",
                                 *       "just-a-key": ""
                                 *     }
                                 */
                                labels: {
                                    [key: string]: string;
                                };
                                /**
                                 * @description Type of Placement Group.
                                 *
                                 * @example spread
                                 * @enum {string}
                                 */
                                type: "spread";
                                /**
                                 * @description Point in time when the Resource was created (in ISO-8601 format).
                                 * @example 2016-01-30T23:55:00+00:00
                                 */
                                created: string;
                                /**
                                 * @description Array of IDs of Servers that are part of this Placement Group.
                                 * @example [
                                 *       42
                                 *     ]
                                 */
                                servers: number[];
                            } | null;
                        };
                    };
                };
            };
        };
    };
    update_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New name to set.
                     * @example my-server
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `server` key in the reply contains the updated Server. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        server?: {
                            /**
                             * Format: int64
                             * @description ID of the Server.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Server (must be unique per Project and a valid hostname as per RFC 1123).
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description Status of the Server.
                             * @enum {string}
                             */
                            status: "running" | "initializing" | "starting" | "stopping" | "off" | "deleting" | "migrating" | "rebuilding" | "unknown";
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description Public network information. The Server's IPv4 address can be found in `public_net->ipv4->ip`. */
                            public_net: {
                                /** @description IP address (v4) and its reverse DNS entry of this Server. */
                                ipv4: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Primary IP.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description IP address (v4) of this Server.
                                     * @example 1.2.3.4
                                     */
                                    ip: string;
                                    /**
                                     * @description If the IP is blocked by our anti abuse dept.
                                     * @example false
                                     */
                                    blocked: boolean;
                                    /**
                                     * @description Reverse DNS PTR entry for the IPv4 addresses of this Server.
                                     * @example server01.example.com
                                     */
                                    dns_ptr: string;
                                } | null;
                                /** @description IPv6 network assigned to this Server and its reverse DNS entry. */
                                ipv6: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Primary IP.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description IP address (v6) of this Server.
                                     * @example 2001:db8::/64
                                     */
                                    ip: string;
                                    /**
                                     * @description If the IP is blocked by our anti abuse dept.
                                     * @example false
                                     */
                                    blocked: boolean;
                                    /** @description Reverse DNS PTR entries for the IPv6 addresses of this Server. */
                                    dns_ptr: {
                                        /**
                                         * @description Single IPv6 address of this Server for which the reverse DNS entry has been set up.
                                         * @example 2001:db8::1
                                         */
                                        ip: string;
                                        /**
                                         * @description DNS pointer for the specific IP address.
                                         * @example server.example.com
                                         */
                                        dns_ptr: string;
                                    }[] | null;
                                } | null;
                                /**
                                 * @description IDs of Floating IPs assigned to this Server.
                                 * @example [
                                 *       478
                                 *     ]
                                 */
                                floating_ips: number[];
                                /** @description Firewalls applied to the public network interface of this Server. */
                                firewalls?: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Firewall.
                                     * @example 42
                                     */
                                    id?: number;
                                    /**
                                     * @description Status of the Firewall on the Server.
                                     * @example applied
                                     * @enum {string}
                                     */
                                    status?: "applied" | "pending";
                                }[];
                            };
                            /** @description Private networks information. */
                            private_net: {
                                /**
                                 * Format: int64
                                 * @description The Network ID the server is attached to.
                                 * @example 4711
                                 */
                                network?: number;
                                /**
                                 * @description The server IP address on the network.
                                 * @example 10.0.0.2
                                 */
                                ip?: string;
                                /**
                                 * @description Additional IP addresses of the server on the network.
                                 * @example [
                                 *       "10.0.0.3",
                                 *       "10.0.0.4"
                                 *     ]
                                 */
                                alias_ips?: string[];
                                /**
                                 * @description The server MAC address on the network.
                                 * @example 86:00:ff:2a:7d:e1
                                 */
                                mac_address?: string;
                            }[];
                            server_type: {
                                /**
                                 * Format: int64
                                 * @description ID of the Server type.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the Server type.
                                 * @example cpx11
                                 */
                                name: string;
                                /**
                                 * @description Description of the Server type.
                                 * @example CPX11
                                 */
                                description: string;
                                /**
                                 * @description Number of cpu cores a Server of this type will have.
                                 * @example 2
                                 */
                                cores: number;
                                /**
                                 * @description Memory a Server of this type will have in GB.
                                 * @example 2
                                 */
                                memory: number;
                                /**
                                 * @description Disk size a Server of this type will have in GB.
                                 * @example 40
                                 */
                                disk: number;
                                /**
                                 * @description This field is deprecated. Use the deprecation object instead.
                                 * @example false
                                 */
                                deprecated: boolean;
                                /** @description Price per [Location](#locations). */
                                prices: {
                                    /**
                                     * @description Name of the [Location](#locations) the price is for.
                                     * @example fsn1
                                     */
                                    location: string;
                                    /** @description Hourly price in this [Location](#locations). */
                                    price_hourly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /** @description Monthly price in this [Location](#locations). */
                                    price_monthly: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                    /**
                                     * Format: int64
                                     * @description Free traffic per month in bytes in this [Location](#locations).
                                     * @example 654321
                                     */
                                    included_traffic: number;
                                    /** @description Additional traffic price per TB in this [Location](#locations). */
                                    price_per_tb_traffic: {
                                        /**
                                         * Format: decimal
                                         * @description Price without VAT.
                                         * @example 1.0000
                                         */
                                        net: string;
                                        /**
                                         * Format: decimal
                                         * @description Price with VAT added.
                                         * @example 1.1900
                                         */
                                        gross: string;
                                    };
                                }[];
                                /**
                                 * @description Type of Server boot drive. Local has higher speed. Network has better availability.
                                 * @enum {string}
                                 */
                                storage_type: "local" | "network";
                                /**
                                 * @description Type of cpu.
                                 * @example shared
                                 * @enum {string}
                                 */
                                cpu_type: "shared" | "dedicated";
                                /**
                                 * @description CPU architecture of the Server Type.
                                 *
                                 * @example x86
                                 * @enum {string}
                                 */
                                architecture: "x86" | "arm";
                                /**
                                 * DeprecationInfo
                                 * @description Describes if, when and how the resource is deprecated. If this field is
                                 *     set to `null` the resource is not deprecated. If a value is set, it is
                                 *     considered deprecated.
                                 *
                                 */
                                deprecation?: {
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecated resource removal.
                                     *
                                     *     Once this date is reached, the resource will not be returned
                                     *     by resource type "list" endpoint, and the resource can not be
                                     *     used to create new resources. For example, if this is an
                                     *     image, you can not create new servers with this image after
                                     *     the mentioned date.
                                     *
                                     * @example 2023-09-01T00:00:00+00:00
                                     */
                                    unavailable_after: string;
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecation announcement.
                                     *
                                     * @example 2023-06-01T00:00:00+00:00
                                     */
                                    announced: string;
                                } | null;
                            };
                            /** @description Datacenter this Resource is located at. */
                            datacenter: {
                                /**
                                 * Format: int64
                                 * @description ID of the Datacenter.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique name for the [Datacenter](#datacenters).
                                 *
                                 *     Can be used as a more descriptive identifier.
                                 *
                                 * @example fsn1-dc8
                                 */
                                name: string;
                                /**
                                 * @description Descriptive name for the [Datacenter](#datacenters).
                                 *
                                 *     Desired to be easy to understand for humans. Might be changed for cosmetic reasons. Do not use this as an identifier.
                                 *
                                 * @example Falkenstein DC Park 8
                                 */
                                description: string;
                                /** @description [Location](#locations) the [Datacenter](#datacenters) is located at.
                                 *      */
                                location: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Location.
                                     * @example 42
                                     */
                                    id: number;
                                    /**
                                     * @description Unique identifier of the [Location](#locations).
                                     * @example fsn1
                                     */
                                    name: string;
                                    /**
                                     * @description Human readable description of the [Location](#locations).
                                     * @example Falkenstein DC Park 1
                                     */
                                    description: string;
                                    /**
                                     * @description Country the [Location](#locations) resides in.
                                     *
                                     *     ISO 3166-1 alpha-2 code of the country.
                                     *
                                     * @example DE
                                     */
                                    country: string;
                                    /**
                                     * @description Name of the closest city to the [Location](#locations).
                                     *
                                     *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                     *
                                     * @example Falkenstein
                                     */
                                    city: string;
                                    /**
                                     * Format: double
                                     * @description Latitude of the city closest to the [Location](#locations).
                                     * @example 50.47612
                                     */
                                    latitude: number;
                                    /**
                                     * Format: double
                                     * @description Longitude of the city closest to the [Location](#locations).
                                     * @example 12.370071
                                     */
                                    longitude: number;
                                    /**
                                     * @description Name of the Network Zone this [Location](#locations) resides in.
                                     * @example eu-central
                                     */
                                    network_zone: string;
                                };
                                /** @description [Server Types](#server-types) supported and available in this [Datacenter](#datacenters).
                                 *      */
                                server_types: {
                                    /**
                                     * @description List of [Server Types](#server-types) supported in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) are generally available in this Datacenter, but might be
                                     *     temporarily out of stock.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    supported: number[];
                                    /**
                                     * @description [Server Types](#server-types) currently available in this [Datacenter](#datacenters).
                                     *
                                     *     These [Server Types](#server-types) can currently be purchased. Types that are temporarily unavailable
                                     *     but are supported in this [Datacenter](#datacenters) are listed as `supported`.
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available: number[];
                                    /**
                                     * @description [Server Types](#server-types) available to migrate to in this [Datacenter](#datacenters).
                                     *
                                     *     Existing [Servers](#servers) can be migrated to these [Server Types](#server-types).
                                     *
                                     * @example [
                                     *       1,
                                     *       2,
                                     *       3
                                     *     ]
                                     */
                                    available_for_migration: number[];
                                };
                            };
                            /** @description Image the server is based on. */
                            image: {
                                /**
                                 * Format: int64
                                 * @description ID of the Image.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Image.
                                 * @example snapshot
                                 * @enum {string}
                                 */
                                type: "system" | "app" | "snapshot" | "backup";
                                /**
                                 * @description Whether the Image can be used or if it's still being created or unavailable.
                                 * @enum {string}
                                 */
                                status: "available" | "creating" | "unavailable";
                                /**
                                 * @description Unique identifier of the Image. This value is only set for system Images.
                                 * @example ubuntu-20.04
                                 */
                                name: string | null;
                                /**
                                 * @description Description of the Image.
                                 * @example Ubuntu 20.04 Standard 64 bit
                                 */
                                description: string;
                                /**
                                 * @description Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
                                 * @example 2.3
                                 */
                                image_size: number | null;
                                /**
                                 * @description Size of the disk contained in the Image in GB.
                                 * @example 10
                                 */
                                disk_size: number;
                                /**
                                 * @description Point in time when the Resource was created (in ISO-8601 format).
                                 * @example 2016-01-30T23:55:00+00:00
                                 */
                                created: string;
                                /** @description Information about the Server the Image was created from. */
                                created_from: {
                                    /**
                                     * Format: int64
                                     * @description ID of the Server the Image was created from.
                                     * @example 1
                                     */
                                    id: number;
                                    /**
                                     * @description Server name at the time the Image was created.
                                     * @example Server
                                     */
                                    name: string;
                                } | null;
                                /**
                                 * Format: int64
                                 * @description ID of Server the Image is bound to. Only set for Images of type `backup`.
                                 * @example null
                                 */
                                bound_to: number | null;
                                /**
                                 * @description Flavor of operating system contained in the Image.
                                 * @example ubuntu
                                 * @enum {string}
                                 */
                                os_flavor: "ubuntu" | "centos" | "debian" | "fedora" | "rocky" | "alma" | "opensuse" | "unknown";
                                /**
                                 * @description Operating system version.
                                 * @example 20.04
                                 */
                                os_version: string | null;
                                /**
                                 * @description Indicates that rapid deploy of the Image is available.
                                 * @example false
                                 */
                                rapid_deploy?: boolean;
                                /** @description Protection configuration for the Resource. */
                                protection: {
                                    /**
                                     * @description Prevent the Resource from being deleted.
                                     * @example false
                                     */
                                    delete: boolean;
                                };
                                /**
                                 * @description Point in time when the Image is considered to be deprecated (in ISO-8601 format).
                                 * @example 2018-02-28T00:00:00+00:00
                                 */
                                deprecated: string | null;
                                /**
                                 * @description Point in time where the Image was deleted (in ISO-8601 format).
                                 * @example null
                                 */
                                deleted: string | null;
                                /**
                                 * @description User-defined labels (`key/value` pairs) for the Resource.
                                 *     For more information, see "[Labels](#labels)".
                                 *
                                 * @example {
                                 *       "environment": "prod",
                                 *       "example.com/my": "label",
                                 *       "just-a-key": ""
                                 *     }
                                 */
                                labels: {
                                    [key: string]: string;
                                };
                                /**
                                 * @description CPU architecture compatible with the Image.
                                 *
                                 * @example x86
                                 * @enum {string}
                                 */
                                architecture: "x86" | "arm";
                            } | null;
                            /** @description ISO Image that is attached to this Server. Null if no ISO is attached. */
                            iso: {
                                /**
                                 * Format: int64
                                 * @description ID of the ISO.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the ISO. Only set for public ISOs.
                                 * @example FreeBSD-11.0-RELEASE-amd64-dvd1
                                 */
                                name: string | null;
                                /**
                                 * @description Description of the ISO.
                                 * @example FreeBSD 11.0 x64
                                 */
                                description: string;
                                /**
                                 * @description Type of the ISO.
                                 * @enum {string|null}
                                 */
                                type: "public" | "private" | null;
                                /**
                                 * DeprecationInfo
                                 * @description Describes if, when and how the resource is deprecated. If this field is
                                 *     set to `null` the resource is not deprecated. If a value is set, it is
                                 *     considered deprecated.
                                 *
                                 */
                                deprecation: {
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecated resource removal.
                                     *
                                     *     Once this date is reached, the resource will not be returned
                                     *     by resource type "list" endpoint, and the resource can not be
                                     *     used to create new resources. For example, if this is an
                                     *     image, you can not create new servers with this image after
                                     *     the mentioned date.
                                     *
                                     * @example 2023-09-01T00:00:00+00:00
                                     */
                                    unavailable_after: string;
                                    /**
                                     * Format: iso-8601
                                     * @description Date of the deprecation announcement.
                                     *
                                     * @example 2023-06-01T00:00:00+00:00
                                     */
                                    announced: string;
                                } | null;
                                /**
                                 * @description CPU architecture compatible with the ISO.
                                 *
                                 *     Null indicates no restriction on the architecture (wildcard).
                                 *
                                 * @example x86
                                 * @enum {string|null}
                                 */
                                architecture: "x86" | "arm" | null;
                            } | null;
                            /**
                             * @description True if rescue mode is enabled. Server will then boot into rescue system on next reboot.
                             * @example false
                             */
                            rescue_enabled: boolean;
                            /**
                             * @description True if Server has been locked and is not available to user.
                             * @example false
                             */
                            locked: boolean;
                            /**
                             * @description Time window (UTC) in which the backup will run, or null if the backups are not enabled.
                             * @example 22-02
                             */
                            backup_window: string | null;
                            /**
                             * Format: int64
                             * @description Outbound Traffic for the current billing period in bytes.
                             * @example 123456
                             */
                            outgoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Inbound Traffic for the current billing period in bytes.
                             * @example 123456
                             */
                            ingoing_traffic: number | null;
                            /**
                             * Format: int64
                             * @description Free Traffic for the current billing period in bytes.
                             * @example 654321
                             */
                            included_traffic: number | null;
                            /** @description Protection configuration for the Server. */
                            protection: {
                                /**
                                 * @description If true, prevents the Server from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                                /**
                                 * @description If true, prevents the Server from being rebuilt.
                                 * @example false
                                 */
                                rebuild: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /** @description IDs of Volumes assigned to this Server. */
                            volumes?: number[];
                            /** @description Load Balancer IDs assigned to the server. */
                            load_balancers?: number[];
                            /**
                             * @description Size of the primary Disk.
                             * @example 50
                             */
                            primary_disk_size: number;
                            /**
                             * PlacementGroupNullable
                             * @description The placement group the server is assigned to.
                             */
                            placement_group?: {
                                /**
                                 * Format: int64
                                 * @description ID of the Placement Group.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Name of the Resource. Must be unique per Project.
                                 * @example my-resource
                                 */
                                name: string;
                                /**
                                 * @description User-defined labels (`key/value` pairs) for the Resource.
                                 *     For more information, see "[Labels](#labels)".
                                 *
                                 * @example {
                                 *       "environment": "prod",
                                 *       "example.com/my": "label",
                                 *       "just-a-key": ""
                                 *     }
                                 */
                                labels: {
                                    [key: string]: string;
                                };
                                /**
                                 * @description Type of Placement Group.
                                 *
                                 * @example spread
                                 * @enum {string}
                                 */
                                type: "spread";
                                /**
                                 * @description Point in time when the Resource was created (in ISO-8601 format).
                                 * @example 2016-01-30T23:55:00+00:00
                                 */
                                created: string;
                                /**
                                 * @description Array of IDs of Servers that are part of this Placement Group.
                                 * @example [
                                 *       42
                                 *     ]
                                 */
                                servers: number[];
                            } | null;
                        };
                    };
                };
            };
        };
    };
    delete_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    list_server_actions: {
        parameters: {
            query?: {
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "start_server",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 42,
                     *               "type": "server"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    add_server_to_placement_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of Placement Group the Server should be added to.
                     * @example 1
                     */
                    placement_group: number;
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "add_to_placement_group",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    attach_server_iso: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description ID or name of ISO to attach to the Server as listed in GET `/isos`.
                     * @example FreeBSD-11.0-RELEASE-amd64-dvd1
                     */
                    iso: string;
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "attach_iso",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    attach_server_to_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of an existing network to attach the Server to.
                     * @example 4711
                     */
                    network: number;
                    /**
                     * @description IP to request to be assigned to this Server; if you do not provide this then you will be auto assigned an IP address.
                     * @example 10.0.1.1
                     */
                    ip?: string;
                    /**
                     * @description Additional IPs to be assigned to this Server.
                     * @example [
                     *       "10.0.1.2"
                     *     ]
                     */
                    alias_ips?: string[];
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "attach_to_network",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_server_alias_ips: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of an existing Network already attached to the Server.
                     * @example 4711
                     */
                    network: number;
                    /**
                     * @description New alias IPs to set for this Server.
                     * @example [
                     *       "10.0.1.2"
                     *     ]
                     */
                    alias_ips: string[];
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_alias_ips",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_server_dns_ptr: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        /** @description Select the IP address for which to change the DNS entry by passing `ip`. It can be either IPv4 or IPv6. The target hostname is set by passing `dns_ptr`. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Primary IP address for which the reverse DNS entry should be set.
                     * @example 1.2.3.4
                     */
                    ip: string;
                    /**
                     * @description Hostname to set as a reverse DNS PTR entry, reset to original value if `null`.
                     * @example server01.example.com
                     */
                    dns_ptr: string | null;
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_dns_ptr",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_server_protection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description If true, prevents the Server from being deleted (currently delete and rebuild attribute needs to have the same value).
                     * @example true
                     */
                    delete?: boolean;
                    /**
                     * @description If true, prevents the Server from being rebuilt (currently delete and rebuild attribute needs to have the same value).
                     * @example true
                     */
                    rebuild?: boolean;
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_server_type: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description If false, do not upgrade the disk (this allows downgrading the Server type later).
                     * @example true
                     */
                    upgrade_disk: boolean;
                    /**
                     * @description ID or name of Server type the Server should migrate to.
                     * @example cpx11
                     */
                    server_type: string;
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_server_type",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    create_server_image: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Description of the Image, will be auto-generated if not set.
                     * @example my image
                     */
                    description?: string;
                    /**
                     * @description Type of Image to create.
                     * @default snapshot
                     * @example snapshot
                     * @enum {string}
                     */
                    type?: "snapshot" | "backup";
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `image` key in the reply contains an the created Image, which is an object with this structure.
             *
             *     The `action` key in the reply contains an Action object with this structure.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "image": {
                     *         "id": 4711,
                     *         "type": "snapshot",
                     *         "status": "creating",
                     *         "name": null,
                     *         "description": "my image",
                     *         "image_size": 2.3,
                     *         "disk_size": 10,
                     *         "created": "2016-01-30T23:50:00+00:00",
                     *         "created_from": {
                     *           "id": 1,
                     *           "name": "Server"
                     *         },
                     *         "bound_to": null,
                     *         "os_flavor": "ubuntu",
                     *         "os_version": "20.04",
                     *         "rapid_deploy": false,
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "deprecated": "2018-02-28T00:00:00+00:00",
                     *         "deleted": null,
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "architecture": "x86"
                     *       },
                     *       "action": {
                     *         "id": 13,
                     *         "command": "create_image",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        image?: {
                            /**
                             * Format: int64
                             * @description ID of the Image.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Type of the Image.
                             * @example snapshot
                             * @enum {string}
                             */
                            type: "system" | "app" | "snapshot" | "backup";
                            /**
                             * @description Whether the Image can be used or if it's still being created or unavailable.
                             * @enum {string}
                             */
                            status: "available" | "creating" | "unavailable";
                            /**
                             * @description Unique identifier of the Image. This value is only set for system Images.
                             * @example ubuntu-20.04
                             */
                            name: string | null;
                            /**
                             * @description Description of the Image.
                             * @example Ubuntu 20.04 Standard 64 bit
                             */
                            description: string;
                            /**
                             * @description Size of the Image file in our storage in GB. For snapshot Images this is the value relevant for calculating costs for the Image.
                             * @example 2.3
                             */
                            image_size: number | null;
                            /**
                             * @description Size of the disk contained in the Image in GB.
                             * @example 10
                             */
                            disk_size: number;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /** @description Information about the Server the Image was created from. */
                            created_from: {
                                /**
                                 * Format: int64
                                 * @description ID of the Server the Image was created from.
                                 * @example 1
                                 */
                                id: number;
                                /**
                                 * @description Server name at the time the Image was created.
                                 * @example Server
                                 */
                                name: string;
                            } | null;
                            /**
                             * Format: int64
                             * @description ID of Server the Image is bound to. Only set for Images of type `backup`.
                             * @example null
                             */
                            bound_to: number | null;
                            /**
                             * @description Flavor of operating system contained in the Image.
                             * @example ubuntu
                             * @enum {string}
                             */
                            os_flavor: "ubuntu" | "centos" | "debian" | "fedora" | "rocky" | "alma" | "opensuse" | "unknown";
                            /**
                             * @description Operating system version.
                             * @example 20.04
                             */
                            os_version: string | null;
                            /**
                             * @description Indicates that rapid deploy of the Image is available.
                             * @example false
                             */
                            rapid_deploy?: boolean;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description Point in time when the Image is considered to be deprecated (in ISO-8601 format).
                             * @example 2018-02-28T00:00:00+00:00
                             */
                            deprecated: string | null;
                            /**
                             * @description Point in time where the Image was deleted (in ISO-8601 format).
                             * @example null
                             */
                            deleted: string | null;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description CPU architecture compatible with the Image.
                             *
                             * @example x86
                             * @enum {string}
                             */
                            architecture: "x86" | "arm";
                        };
                        /** Action */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    detach_server_from_network: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of an existing network to detach the Server from.
                     * @example 4711
                     */
                    network: number;
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "detach_from_network",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 4711,
                     *             "type": "network"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    detach_server_iso: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "detach_iso",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    disable_server_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "disable_backup",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    disable_server_rescue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "disable_rescue",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    enable_server_backup: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "enable_backup",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    enable_server_rescue: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Type of rescue system to boot.
                     * @default linux64
                     * @enum {string}
                     */
                    type?: "linux64";
                    /**
                     * @description Array of SSH key IDs which should be injected into the rescue system.
                     * @example [
                     *       2323
                     *     ]
                     */
                    ssh_keys?: number[];
                };
            };
        };
        responses: {
            /** @description The `root_password` key in the reply contains the root password that can be used to access the booted rescue system.
             *
             *     The `action` key in the reply contains an Action object with this structure.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "root_password": "zCWbFhnu950dUTko5f40",
                     *       "action": {
                     *         "id": 13,
                     *         "command": "enable_rescue",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /**
                         * @description Password that will be set for this Server once the Action succeeds.
                         * @example zCWbFhnu950dUTko5f40
                         */
                        root_password?: string;
                        /** Action */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    poweroff_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "stop_server",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    poweron_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "start_server",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    reboot_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "reboot_server",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    rebuild_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        /** @description To select which Image to rebuild from you can either pass an ID or a name as the `image` argument. Passing a name only works for `system` Images since the other Image types do not have a name set. */
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description ID or name of Image to rebuilt from.
                     * @example ubuntu-20.04
                     */
                    image: string;
                };
            };
        };
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "rebuild_server",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       },
                     *       "root_password": null
                     *     } */
                    "application/json": {
                        /** @description New root password when not using SSH keys. */
                        root_password?: string | null;
                        /** Action */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    remove_server_from_placement_group: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "remove_from_placement_group",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    request_server_console: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "wss_url": "wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c",
                     *       "password": "9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x",
                     *       "action": {
                     *         "id": 13,
                     *         "command": "request_console",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /**
                         * @description URL of websocket proxy to use; this includes a token which is valid for a limited time only.
                         * @example wss://console.hetzner.cloud/?server_id=1&token=3db32d15-af2f-459c-8bf8-dee1fd05f49c
                         */
                        wss_url: string;
                        /**
                         * @description VNC password to use for this connection (this password only works in combination with a wss_url with valid token).
                         * @example 9MQaTg2VAGI0FIpc10k3UpRXcHj2wQ6x
                         */
                        password: string;
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    reset_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "reset_server",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    reset_server_password: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `root_password` key in the reply contains the new root password that will be active if the Action succeeds.
             *
             *     The `action` key in the reply contains an Action object with this structure.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "root_password": "zCWbFhnu950dUTko5f40",
                     *       "action": {
                     *         "id": 13,
                     *         "command": "reset_password",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /**
                         * @description Password that will be set for this Server once the Action succeeds.
                         * @example zCWbFhnu950dUTko5f40
                         */
                        root_password?: string;
                        /** Action */
                        action?: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    shutdown_server: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply contains an Action object with this structure. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "shutdown_server",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_server_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
                /** @description ID of the Action. */
                action_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply has this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "start_server",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_server_metrics: {
        parameters: {
            query: {
                /** @description Type of metrics to get. */
                type: "cpu" | "disk" | "network";
                /** @description Start of period to get Metrics for (in ISO-8601 format). */
                start: string;
                /** @description End of period to get Metrics for (in ISO-8601 format). */
                end: string;
                /** @description Resolution of results in seconds. */
                step?: string;
            };
            header?: never;
            path: {
                /** @description ID of the Server. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `metrics` key in the reply contains a metrics object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        metrics: {
                            /**
                             * @description Start of period of metrics reported (in ISO-8601 format).
                             * @example 2017-01-01T00:00:00+00:00
                             */
                            start: string;
                            /**
                             * @description End of period of metrics reported (in ISO-8601 format).
                             * @example 2017-01-01T23:00:00+00:00
                             */
                            end: string;
                            /**
                             * @description Resolution of results in seconds.
                             * @example 60
                             */
                            step: number;
                            /**
                             * @description Hash with timeseries information, containing the name of timeseries as key.
                             * @example {
                             *       "name_of_timeseries": {
                             *         "values": [
                             *           [
                             *             1435781470.622,
                             *             "42"
                             *           ],
                             *           [
                             *             1435781471.622,
                             *             "43"
                             *           ]
                             *         ]
                             *       }
                             *     }
                             */
                            time_series: {
                                [key: string]: {
                                    /** @description Metrics Timestamps with values. */
                                    values: (number | string)[][];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    list_ssh_keys: {
        parameters: {
            query?: {
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc";
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Can be used to filter SSH keys by their fingerprint. The response will only contain the SSH key matching the specified fingerprint. */
                fingerprint?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `ssh_keys` key in the reply contains an array of SSH key objects with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ssh_keys: {
                            /**
                             * Format: int64
                             * @description ID of the SSH Key.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description MD5 fingerprint of the SSH public key.
                             * @example b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f
                             */
                            fingerprint: string;
                            /**
                             * @description Public key.
                             * @example ssh-rsa AAAjjk76kgf...Xt
                             */
                            public_key: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_ssh_key: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description Name of the SSH key.
                     * @example My ssh key
                     */
                    name: string;
                    /**
                     * @description Public key.
                     * @example ssh-rsa AAAjjk76kgf...Xt
                     */
                    public_key: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `ssh_key` key in the reply contains the object that was just created. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ssh_key: {
                            /**
                             * Format: int64
                             * @description ID of the SSH Key.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description MD5 fingerprint of the SSH public key.
                             * @example b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f
                             */
                            fingerprint: string;
                            /**
                             * @description Public key.
                             * @example ssh-rsa AAAjjk76kgf...Xt
                             */
                            public_key: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                        };
                    };
                };
            };
        };
    };
    get_ssh_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the SSH Key. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `ssh_key` key in the reply contains an SSH key object with this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        ssh_key: {
                            /**
                             * Format: int64
                             * @description ID of the SSH Key.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description MD5 fingerprint of the SSH public key.
                             * @example b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f
                             */
                            fingerprint: string;
                            /**
                             * @description Public key.
                             * @example ssh-rsa AAAjjk76kgf...Xt
                             */
                            public_key: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                        };
                    };
                };
            };
        };
    };
    update_ssh_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the SSH Key. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New name Name to set.
                     * @example My ssh key
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `ssh_key` key in the reply contains the modified SSH key object with the new description. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "ssh_key": {
                     *         "id": 2323,
                     *         "name": "My ssh key",
                     *         "fingerprint": "b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f",
                     *         "public_key": "ssh-rsa AAAjjk76kgf...Xt",
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "created": "2016-01-30T23:50:00+00:00"
                     *       }
                     *     } */
                    "application/json": {
                        ssh_key: {
                            /**
                             * Format: int64
                             * @description ID of the SSH Key.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * @description MD5 fingerprint of the SSH public key.
                             * @example b7:2f:30:a0:2f:6c:58:6c:21:04:58:61:ba:06:3b:2f
                             */
                            fingerprint: string;
                            /**
                             * @description Public key.
                             * @example ssh-rsa AAAjjk76kgf...Xt
                             */
                            public_key: string;
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                        };
                    };
                };
            };
        };
    };
    delete_ssh_key: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the SSH Key. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description SSH key deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_volumes: {
        parameters: {
            query?: {
                /** @description Filter resources by status. Can be used multiple times. The response will only
                 *     contain the resources with the specified status.
                 *      */
                status?: "available" | "creating";
                /** @description Sort resources by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "name" | "name:asc" | "name:desc" | "created" | "created:asc" | "created:desc";
                /** @description Filter resources by their name. The response will only contain the resources
                 *     matching exactly the specified name.
                 *      */
                name?: string;
                /** @description Filter resources by labels. The response will only contain resources matching the
                 *     label selector. For more information, see "[Label Selector](#label-selector)".
                 *      */
                label_selector?: string;
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `volumes` key contains a list of volumes. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        volumes: {
                            /**
                             * Format: int64
                             * @description ID of the Volume.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * Format: int64
                             * @description ID of the Server the Volume is attached to, null if it is not attached at all.
                             * @example 12
                             */
                            server: number | null;
                            /** @description Location of the Volume. Volume can only be attached to Servers in the same Location. */
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /**
                             * @description Size in GB of the Volume.
                             * @example 42
                             */
                            size: number;
                            /**
                             * @description Device path on the file system for the Volume.
                             * @example /dev/disk/by-id/scsi-0HC_Volume_4711
                             */
                            linux_device: string;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Status of the Volume.
                             * @example available
                             * @enum {string}
                             */
                            status: "available" | "creating";
                            /**
                             * @description Filesystem of the Volume if formatted on creation, null if not formatted on creation.
                             * @example xfs
                             */
                            format: string | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    create_volume: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                /** @example {
                 *       "size": 42,
                 *       "name": "test-database",
                 *       "labels": {
                 *         "key": "value"
                 *       },
                 *       "location": "nbg1",
                 *       "automount": false,
                 *       "format": "xfs"
                 *     } */
                "application/json": {
                    /**
                     * @description Size of the Volume in GB.
                     * @example 42
                     */
                    size: number;
                    /**
                     * @description Name of the volume.
                     * @example databases-storage
                     */
                    name: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                    /**
                     * @description Auto-mount Volume after attach. `server` must be provided.
                     * @example false
                     */
                    automount?: boolean;
                    /**
                     * @description Format Volume after creation. One of: `xfs`, `ext4`.
                     * @example xfs
                     */
                    format?: string;
                    /**
                     * @description Location to create the Volume in (can be omitted if Server is specified).
                     * @example nbg1
                     */
                    location?: string;
                    /**
                     * Format: int64
                     * @description Server to which to attach the Volume once it's created (Volume will be created in the same Location as the server).
                     */
                    server?: number;
                };
            };
        };
        responses: {
            /** @description The `volume` key contains the Volume that was just created.
             *
             *     The `action` key contains the Action tracking Volume creation.
             *      */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "volume": {
                     *         "id": 4711,
                     *         "created": "2016-01-30T23:50:11+00:00",
                     *         "name": "database-storage",
                     *         "server": 12,
                     *         "location": {
                     *           "id": 1,
                     *           "name": "fsn1",
                     *           "description": "Falkenstein DC Park 1",
                     *           "country": "DE",
                     *           "city": "Falkenstein",
                     *           "latitude": 50.47612,
                     *           "longitude": 12.370071,
                     *           "network_zone": "eu-central"
                     *         },
                     *         "size": 42,
                     *         "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "status": "available",
                     *         "format": "xfs"
                     *       },
                     *       "action": {
                     *         "id": 13,
                     *         "command": "create_volume",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 554,
                     *             "type": "volume"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       },
                     *       "next_actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "attach_volume",
                     *           "status": "running",
                     *           "progress": 0,
                     *           "started": "2016-01-30T23:50:00+00:00",
                     *           "finished": null,
                     *           "resources": [
                     *             {
                     *               "id": 42,
                     *               "type": "server"
                     *             },
                     *             {
                     *               "id": 554,
                     *               "type": "volume"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ]
                     *     } */
                    "application/json": {
                        volume: {
                            /**
                             * Format: int64
                             * @description ID of the Volume.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * Format: int64
                             * @description ID of the Server the Volume is attached to, null if it is not attached at all.
                             * @example 12
                             */
                            server: number | null;
                            /** @description Location of the Volume. Volume can only be attached to Servers in the same Location. */
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /**
                             * @description Size in GB of the Volume.
                             * @example 42
                             */
                            size: number;
                            /**
                             * @description Device path on the file system for the Volume.
                             * @example /dev/disk/by-id/scsi-0HC_Volume_4711
                             */
                            linux_device: string;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Status of the Volume.
                             * @example available
                             * @enum {string}
                             */
                            status: "available" | "creating";
                            /**
                             * @description Filesystem of the Volume if formatted on creation, null if not formatted on creation.
                             * @example xfs
                             */
                            format: string | null;
                        };
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                        next_actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                    };
                };
            };
        };
    };
    list_volumes_actions: {
        parameters: {
            query?: {
                /** @description Filter the actions by ID. Can be used multiple times. The response will only contain
                 *     actions matching the specified IDs.
                 *      */
                id?: number;
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    get_volumes_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Action. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key in the reply has this structure. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_volume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `volume` key contains the volume. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        volume: {
                            /**
                             * Format: int64
                             * @description ID of the Volume.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * Format: int64
                             * @description ID of the Server the Volume is attached to, null if it is not attached at all.
                             * @example 12
                             */
                            server: number | null;
                            /** @description Location of the Volume. Volume can only be attached to Servers in the same Location. */
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /**
                             * @description Size in GB of the Volume.
                             * @example 42
                             */
                            size: number;
                            /**
                             * @description Device path on the file system for the Volume.
                             * @example /dev/disk/by-id/scsi-0HC_Volume_4711
                             */
                            linux_device: string;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Status of the Volume.
                             * @example available
                             * @enum {string}
                             */
                            status: "available" | "creating";
                            /**
                             * @description Filesystem of the Volume if formatted on creation, null if not formatted on creation.
                             * @example xfs
                             */
                            format: string | null;
                        };
                    };
                };
            };
        };
    };
    update_volume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New Volume name.
                     * @example database-storage
                     */
                    name?: string;
                    /**
                     * @description User-defined labels (`key/value` pairs) for the Resource.
                     *
                     *     Note that the set of [Labels](#labels) provided in the request will overwrite the
                     *     existing one.
                     *
                     *     For more information, see "[Labels](#labels)".
                     *
                     * @example {
                     *       "environment": "prod",
                     *       "example.com/my": "label",
                     *       "just-a-key": ""
                     *     }
                     */
                    labels?: {
                        [key: string]: string;
                    };
                };
            };
        };
        responses: {
            /** @description The `volume` key contains the updated volume. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "volume": {
                     *         "id": 4711,
                     *         "created": "2016-01-30T23:50:11+00:00",
                     *         "name": "database-storage",
                     *         "server": 12,
                     *         "location": {
                     *           "id": 1,
                     *           "name": "fsn1",
                     *           "description": "Falkenstein DC Park 1",
                     *           "country": "DE",
                     *           "city": "Falkenstein",
                     *           "latitude": 50.47612,
                     *           "longitude": 12.370071,
                     *           "network_zone": "eu-central"
                     *         },
                     *         "size": 42,
                     *         "linux_device": "/dev/disk/by-id/scsi-0HC_Volume_4711",
                     *         "protection": {
                     *           "delete": false
                     *         },
                     *         "labels": {
                     *           "key": "value"
                     *         },
                     *         "status": "available",
                     *         "format": "xfs"
                     *       }
                     *     } */
                    "application/json": {
                        volume: {
                            /**
                             * Format: int64
                             * @description ID of the Volume.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Point in time when the Resource was created (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            created: string;
                            /**
                             * @description Name of the Resource. Must be unique per Project.
                             * @example my-resource
                             */
                            name: string;
                            /**
                             * Format: int64
                             * @description ID of the Server the Volume is attached to, null if it is not attached at all.
                             * @example 12
                             */
                            server: number | null;
                            /** @description Location of the Volume. Volume can only be attached to Servers in the same Location. */
                            location: {
                                /**
                                 * Format: int64
                                 * @description ID of the Location.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Unique identifier of the [Location](#locations).
                                 * @example fsn1
                                 */
                                name: string;
                                /**
                                 * @description Human readable description of the [Location](#locations).
                                 * @example Falkenstein DC Park 1
                                 */
                                description: string;
                                /**
                                 * @description Country the [Location](#locations) resides in.
                                 *
                                 *     ISO 3166-1 alpha-2 code of the country.
                                 *
                                 * @example DE
                                 */
                                country: string;
                                /**
                                 * @description Name of the closest city to the [Location](#locations).
                                 *
                                 *     City name or city name and state in short form. E.g. `Falkenstein` or `Ashburn, VA`.
                                 *
                                 * @example Falkenstein
                                 */
                                city: string;
                                /**
                                 * Format: double
                                 * @description Latitude of the city closest to the [Location](#locations).
                                 * @example 50.47612
                                 */
                                latitude: number;
                                /**
                                 * Format: double
                                 * @description Longitude of the city closest to the [Location](#locations).
                                 * @example 12.370071
                                 */
                                longitude: number;
                                /**
                                 * @description Name of the Network Zone this [Location](#locations) resides in.
                                 * @example eu-central
                                 */
                                network_zone: string;
                            };
                            /**
                             * @description Size in GB of the Volume.
                             * @example 42
                             */
                            size: number;
                            /**
                             * @description Device path on the file system for the Volume.
                             * @example /dev/disk/by-id/scsi-0HC_Volume_4711
                             */
                            linux_device: string;
                            /** @description Protection configuration for the Resource. */
                            protection: {
                                /**
                                 * @description Prevent the Resource from being deleted.
                                 * @example false
                                 */
                                delete: boolean;
                            };
                            /**
                             * @description User-defined labels (`key/value` pairs) for the Resource.
                             *     For more information, see "[Labels](#labels)".
                             *
                             * @example {
                             *       "environment": "prod",
                             *       "example.com/my": "label",
                             *       "just-a-key": ""
                             *     }
                             */
                            labels: {
                                [key: string]: string;
                            };
                            /**
                             * @description Status of the Volume.
                             * @example available
                             * @enum {string}
                             */
                            status: "available" | "creating";
                            /**
                             * @description Filesystem of the Volume if formatted on creation, null if not formatted on creation.
                             * @example xfs
                             */
                            format: string | null;
                        };
                    };
                };
            };
        };
    };
    delete_volume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Volume deleted. */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_volume_actions: {
        parameters: {
            query?: {
                /** @description Sort actions by field and direction. Can be used multiple times. For more
                 *     information, see "[Sorting](#sorting)".
                 *      */
                sort?: "id" | "id:asc" | "id:desc" | "command" | "command:asc" | "command:desc" | "status" | "status:asc" | "status:desc" | "started" | "started:asc" | "started:desc" | "finished" | "finished:asc" | "finished:desc";
                /** @description Filter the actions by status. Can be used multiple times. The response will only
                 *     contain actions matching the specified statuses.
                 *      */
                status?: "running" | "success" | "error";
                /** @description Page number to return. For more information, see "[Pagination](#pagination)". */
                page?: number;
                /** @description Maximum number of entries returned per page. For more information, see "[Pagination](#pagination)". */
                per_page?: number;
            };
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `actions` key contains a list of Actions. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "actions": [
                     *         {
                     *           "id": 13,
                     *           "command": "attach_volume",
                     *           "status": "success",
                     *           "progress": 100,
                     *           "started": "2016-01-30T23:55:00+00:00",
                     *           "finished": "2016-01-30T23:56:00+00:00",
                     *           "resources": [
                     *             {
                     *               "id": 42,
                     *               "type": "server"
                     *             },
                     *             {
                     *               "id": 13,
                     *               "type": "volume"
                     *             }
                     *           ],
                     *           "error": {
                     *             "code": "action_failed",
                     *             "message": "Action failed"
                     *           }
                     *         }
                     *       ],
                     *       "meta": {
                     *         "pagination": {
                     *           "page": 1,
                     *           "per_page": 25,
                     *           "previous_page": null,
                     *           "next_page": null,
                     *           "last_page": 1,
                     *           "total_entries": 21
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        actions: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        }[];
                        /** ListMeta */
                        meta: {
                            /** @description See "[Pagination](#pagination)" for more information. */
                            pagination: {
                                /**
                                 * Format: int64
                                 * @description Current page number.
                                 * @example 3
                                 */
                                page: number;
                                /**
                                 * Format: int64
                                 * @description Maximum number of entries returned per page.
                                 * @example 25
                                 */
                                per_page: number;
                                /**
                                 * Format: int64
                                 * @description Page number of the previous page. Can be null if the current page is the first one.
                                 * @example 2
                                 */
                                previous_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the next page. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                next_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Page number of the last page available. Can be null if the current page is the last one.
                                 * @example 4
                                 */
                                last_page: number | null;
                                /**
                                 * Format: int64
                                 * @description Total number of entries that exist for this query. Can be null if unknown.
                                 * @example 100
                                 */
                                total_entries: number | null;
                            };
                        };
                    };
                };
            };
        };
    };
    attach_volume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * Format: int64
                     * @description ID of the Server the Volume will be attached to.
                     * @example 43
                     */
                    server: number;
                    /**
                     * @description Auto-mount the Volume after attaching it.
                     * @example false
                     */
                    automount?: boolean;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `attach_volume` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "attach_volume",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 43,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 554,
                     *             "type": "volume"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    change_volume_protection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description If true, prevents the Volume from being deleted.
                     * @example true
                     */
                    delete?: boolean;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `change_protection` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "change_protection",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           },
                     *           {
                     *             "id": 554,
                     *             "type": "volume"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    detach_volume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the `detach_volume` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "detach_volume",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    resize_volume: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
            };
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": {
                    /**
                     * @description New Volume size in GB (must be greater than current size).
                     * @example 50
                     */
                    size: number;
                };
            };
        };
        responses: {
            /** @description The `action` key contains the `resize_volume` Action. */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "resize_volume",
                     *         "status": "running",
                     *         "progress": 0,
                     *         "started": "2016-01-30T23:50:00+00:00",
                     *         "finished": null,
                     *         "resources": [
                     *           {
                     *             "id": 554,
                     *             "type": "volume"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
    get_volume_action: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                /** @description ID of the Volume. */
                id: number;
                /** @description ID of the Action. */
                action_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The `action` key contains the Volume Action. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    /** @example {
                     *       "action": {
                     *         "id": 13,
                     *         "command": "attach_volume",
                     *         "status": "success",
                     *         "progress": 100,
                     *         "started": "2016-01-30T23:55:00+00:00",
                     *         "finished": "2016-01-30T23:56:00+00:00",
                     *         "resources": [
                     *           {
                     *             "id": 42,
                     *             "type": "server"
                     *           }
                     *         ],
                     *         "error": {
                     *           "code": "action_failed",
                     *           "message": "Action failed"
                     *         }
                     *       }
                     *     } */
                    "application/json": {
                        /** Action */
                        action: {
                            /**
                             * Format: int64
                             * @description ID of the Action.
                             * @example 42
                             */
                            id: number;
                            /**
                             * @description Command executed in the Action.
                             * @example start_resource
                             */
                            command: string;
                            /**
                             * @description Status of the Action.
                             * @enum {string}
                             */
                            status: "running" | "success" | "error";
                            /**
                             * @description Point in time when the Action was started (in ISO-8601 format).
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            started: string;
                            /**
                             * @description Point in time when the Action was finished (in ISO-8601 format). Only set if the Action is finished otherwise null.
                             * @example 2016-01-30T23:55:00+00:00
                             */
                            finished: string | null;
                            /**
                             * Format: int32
                             * @description Progress of the Action in percent.
                             * @example 100
                             */
                            progress: number;
                            /** @description Resources the Action relates to. */
                            resources: {
                                /**
                                 * Format: int64
                                 * @description ID of the Resource.
                                 * @example 42
                                 */
                                id: number;
                                /**
                                 * @description Type of the Resource.
                                 * @example server
                                 */
                                type: string;
                            }[];
                            /** @description Error message for the Action if an error occurred, otherwise null. */
                            error: {
                                /**
                                 * @description Fixed error code for machines.
                                 * @example action_failed
                                 */
                                code: string;
                                /**
                                 * @description Error message for humans.
                                 * @example Action failed
                                 */
                                message: string;
                            } | null;
                        };
                    };
                };
            };
        };
    };
}
