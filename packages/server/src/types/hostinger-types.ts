/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
	"/api/billing/v1/catalog": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get catalog item list
		 * @description This endpoint retrieves a list of catalog items available for order.
		 *
		 *     Prices in catalog items is displayed as cents (without floating point), e.g: float `17.99` is displayed as integer `1799`.
		 */
		get: operations["billing_getCatalogItemListV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/billing/v1/orders": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Create new service order
		 * @deprecated
		 * @description This endpoint creates a new service order.
		 *
		 *     **DEPRECATED**
		 *
		 *     To purchase a domain, use [`POST /api/domains/v1/portfolio`](/#tag/domains-portfolio/POST/api/domains/v1/portfolio) instead.
		 *
		 *     To purchase a VPS, use [`POST /api/vps/v1/virtual-machines`](/#tag/vps-virtual-machine/POST/api/vps/v1/virtual-machines) instead.
		 *
		 *
		 *     To place order, you need to provide payment method ID and list of price items from the catalog endpoint together with quantity.
		 *     Coupons also can be provided during order creation.
		 *
		 *     Orders created using this endpoint will be set for automatic renewal.
		 *
		 *     Some `credit_card` payments might need additional verification, rendering purchase unprocessed.
		 *     We recommend use other payment methods than `credit_card` if you encounter this issue.
		 */
		post: operations["billing_createNewServiceOrderV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/billing/v1/payment-methods/{paymentMethodId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Set default payment method
		 * @description This endpoint sets default payment method for your account.
		 */
		post: operations["billing_setDefaultPaymentMethodV1"];
		/**
		 * Delete payment method
		 * @description This endpoint deletes a payment method from your account.
		 */
		delete: operations["billing_deletePaymentMethodV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/billing/v1/payment-methods": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get payment method list
		 * @description This endpoint retrieves a list of available payment methods that can be used for placing new orders.
		 *
		 *     If you want to add new payment method, please use [hPanel](https://hpanel.hostinger.com/billing/payment-methods).
		 */
		get: operations["billing_getPaymentMethodListV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/billing/v1/subscriptions/{subscriptionId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Cancel subscription
		 * @description This endpoint cancels a subscription and stops any further billing.
		 */
		delete: operations["billing_cancelSubscriptionV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/billing/v1/subscriptions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get subscription list
		 * @description This endpoint retrieves a list of all subscriptions associated with your account.
		 */
		get: operations["billing_getSubscriptionListV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/dns/v1/snapshots/{domain}/{snapshotId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get snapshot
		 * @description This endpoint retrieves particular DNS snapshot with the contents of DNS zone records.
		 */
		get: operations["DNS_getSnapshotV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/dns/v1/snapshots/{domain}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get snapshot list
		 * @description This endpoint retrieves list of DNS snapshots.
		 */
		get: operations["DNS_getSnapshotListV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/dns/v1/snapshots/{domain}/{snapshotId}/restore": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Restore snapshot
		 * @description This endpoint restores DNS zone to the selected snapshot.
		 */
		post: operations["DNS_restoreSnapshotV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/dns/v1/zones/{domain}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get records
		 * @description This endpoint retrieves DNS zone records for a specific domain.
		 */
		get: operations["DNS_getRecordsV1"];
		/**
		 * Update zone records
		 * @description This endpoint updates DNS records for the selected domain.
		 *
		 *     Using `overwrite = true` will replace existing records with the provided ones.
		 *     Otherwise existing records will be updated and new records will be added.
		 */
		put: operations["DNS_updateZoneRecordsV1"];
		post?: never;
		/**
		 * Delete zone records
		 * @description This endpoint deletes DNS records for the selected domain.
		 *     To filter which records to delete, add the `name` of the record and `type` to the filter.
		 *     Multiple filters can be provided with single request.
		 *
		 *     If you have multiple records with the same name and type, and you want to delete only part of them,
		 *     refer to the `Update zone records` endpoint.
		 */
		delete: operations["DNS_deleteZoneRecordsV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/dns/v1/zones/{domain}/reset": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Reset zone records
		 * @description This endpoint resets DNS zone to the default records.
		 */
		post: operations["DNS_resetZoneRecordsV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/dns/v1/zones/{domain}/validate": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Validate zone records
		 * @description This endpoint used to validate DNS records prior update for the selected domain.
		 *
		 *     If the validation is successful, the response will contain `200 Success` code.
		 *     If there is validation error, the response will fail with `422 Validation error` code.
		 */
		post: operations["DNS_validateZoneRecordsV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/availability": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Check domain availability
		 * @description This endpoint checks the availability of a domain name. Multiple TLDs can be checked at once.
		 *     If you want to get alternative domains with response, provide only one TLD in the request and set `with_alternatives` to `true`.
		 *     TLDs should be provided without the leading dot (e.g. `com`, `net`, `org`).
		 *
		 *     Endpoint has rate limit of 10 requests per minute.
		 */
		post: operations["domains_checkDomainAvailabilityV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/forwarding/{domain}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get forwarding data
		 * @description This endpoint retrieves domain forwarding data.
		 */
		get: operations["domains_getForwardingDataV1"];
		put?: never;
		post?: never;
		/**
		 * Delete forwarding data
		 * @description This endpoint deletes domain forwarding data.
		 */
		delete: operations["domains_deleteForwardingDataV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/forwarding": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Create forwarding data
		 * @description This endpoint creates domain forwarding data.
		 */
		post: operations["domains_createForwardingDataV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/portfolio/{domain}/domain-lock": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Enable domain lock
		 * @description This endpoint enables domain lock for the domain. When domain lock is enabled,
		 *     the domain cannot be transferred to another registrar without first disabling the lock.
		 */
		put: operations["domains_enableDomainLockV1"];
		post?: never;
		/**
		 * Disable domain lock
		 * @description This endpoint disables domain lock for the domain. Domain lock needs to be disabled
		 *     before transferring the domain to another registrar.
		 */
		delete: operations["domains_disableDomainLockV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/portfolio/{domain}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get domain
		 * @description This endpoint retrieves details for specified domain.
		 */
		get: operations["domains_getDomainV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/portfolio": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get domain list
		 * @description This endpoint retrieves a list of all domains associated with your account.
		 */
		get: operations["domains_getDomainListV1"];
		put?: never;
		/**
		 * Purchase new domain
		 * @description This endpoint allows you to buy (purchase) and register a new domain name.
		 *
		 *     If registration fails, login to [hPanel](https://hpanel.hostinger.com/) and check the domain registration status.
		 *
		 *     If no payment method is provided, your default payment method will be used automatically.
		 *
		 *     If no WHOIS information is provided, the default contact information for that TLD (Top-Level Domain) will be used.
		 *     Before making a request, ensure that WHOIS information for the desired TLD exists in your account.
		 *
		 *     Some TLDs require `additional_details` to be provided and these will be validated before completing the purchase. The required additional details vary by TLD.
		 */
		post: operations["domains_purchaseNewDomainV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/portfolio/{domain}/privacy-protection": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Enable privacy protection
		 * @description This endpoint enables privacy protection for the domain.
		 *     When privacy protection is enabled, the domain owner's personal information is hidden from the public WHOIS database.
		 */
		put: operations["domains_enablePrivacyProtectionV1"];
		post?: never;
		/**
		 * Disable privacy protection
		 * @description This endpoint disables privacy protection for the domain.
		 *     When privacy protection is disabled, the domain owner's personal information is visible in the public WHOIS database.
		 */
		delete: operations["domains_disablePrivacyProtectionV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/portfolio/{domain}/nameservers": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Update nameservers
		 * @description This endpoint sets the nameservers for a specified domain.
		 *
		 *     Be aware, that improper nameserver configuration can lead to the domain being unresolvable or unavailable.
		 */
		put: operations["domains_updateNameserversV1"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/whois/{whoisId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get WHOIS profile
		 * @description This endpoint retrieves a WHOIS contact profile.
		 */
		get: operations["domains_getWHOISProfileV1"];
		put?: never;
		post?: never;
		/**
		 * Delete WHOIS profile
		 * @description This endpoint deletes WHOIS contact profile.
		 */
		delete: operations["domains_deleteWHOISProfileV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/whois": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get WHOIS profile list
		 * @description This endpoint retrieves a list of WHOIS contact profiles.
		 */
		get: operations["domains_getWHOISProfileListV1"];
		put?: never;
		/**
		 * Create WHOIS profile
		 * @description This endpoint creates WHOIS contact profile.
		 */
		post: operations["domains_createWHOISProfileV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/domains/v1/whois/{whoisId}/usage": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get WHOIS profile usage
		 * @description This endpoint retrieves a domain list where provided WHOIS contact profile is used.
		 */
		get: operations["domains_getWHOISProfileUsageV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/data-centers": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get data centers list
		 * @description This endpoint retrieves a list of all data centers available.
		 */
		get: operations["VPS_getDataCentersListV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/firewall/{firewallId}/activate/{virtualMachineId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Activate firewall
		 * @description This endpoint activates a firewall for a specified virtual machine.
		 *
		 *     Only one firewall can be active for a virtual machine at a time.
		 */
		post: operations["VPS_activateFirewallV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/firewall/{firewallId}/deactivate/{virtualMachineId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Deactivate firewall
		 * @description This endpoint deactivates a firewall for a specified virtual machine.
		 */
		post: operations["VPS_deactivateFirewallV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/firewall/{firewallId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get firewall
		 * @description This endpoint retrieves firewall by its ID and rules associated with it.
		 */
		get: operations["VPS_getFirewallV1"];
		put?: never;
		post?: never;
		/**
		 * Delete firewall
		 * @description This endpoint deletes a specified firewall.
		 *
		 *     Any virtual machine that has this firewall activated will automatically have it deactivated.
		 */
		delete: operations["VPS_deleteFirewallV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/firewall": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get firewall list
		 * @description This endpoint retrieves a list of all firewalls available.
		 */
		get: operations["VPS_getFirewallListV1"];
		put?: never;
		/**
		 * Create new firewall
		 * @description This endpoint creates a new firewall.
		 */
		post: operations["VPS_createNewFirewallV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/firewall/{firewallId}/rules/{ruleId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Update firewall rule
		 * @description This endpoint updates a specific firewall rule from a specified firewall.
		 *
		 *     Any virtual machine that has this firewall activated will loose sync with the firewall and will have to be synced again manually.
		 */
		put: operations["VPS_updateFirewallRuleV1"];
		post?: never;
		/**
		 * Delete firewall rule
		 * @description This endpoint deletes a specific firewall rule from a specified firewall.
		 *
		 *     Any virtual machine that has this firewall activated will loose sync with the firewall and will have to be synced again manually.
		 */
		delete: operations["VPS_deleteFirewallRuleV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/firewall/{firewallId}/rules": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Create firewall rule
		 * @description This endpoint creates new firewall rule from a specified firewall.
		 *     By default, the firewall drops all incoming traffic, which means you must add accept rules for all ports you want to use.
		 *
		 *     Any virtual machine that has this firewall activated will loose sync with the firewall and will have to be synced again manually.
		 */
		post: operations["VPS_createFirewallRuleV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/firewall/{firewallId}/sync/{virtualMachineId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Sync firewall
		 * @description This endpoint syncs a firewall for a specified virtual machine.
		 *
		 *     Firewall can loose sync with virtual machine if the firewall has new rules added, removed or updated.
		 */
		post: operations["VPS_syncFirewallV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/post-install-scripts/{postInstallScriptId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get post-install script
		 * @description This endpoint retrieves post-install script by its ID.
		 */
		get: operations["VPS_getPostInstallScriptV1"];
		/**
		 * Update post-install script
		 * @description This endpoint updates a specific post-install script.
		 */
		put: operations["VPS_updatePostInstallScriptV1"];
		post?: never;
		/**
		 * Delete a post-install script
		 * @description This endpoint deletes a post-install script from your account.
		 */
		delete: operations["VPS_deleteAPostInstallScriptV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/post-install-scripts": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get post-install script list
		 * @description This endpoint retrieves a list of post-install scripts associated with your account.
		 */
		get: operations["VPS_getPostInstallScriptListV1"];
		put?: never;
		/**
		 * Create post-install script
		 * @description This endpoint allows you to add a new post-install script to your account,
		 *     which can then be used run after the installation of a virtual machine instance.
		 *
		 *     The script contents will be saved to the file `/post_install` with executable attribute set and will be executed once virtual machine is installed.
		 *     The output of the script will be redirected to `/post_install.log`. Maximum script size is 48KB.
		 */
		post: operations["VPS_createPostInstallScriptV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/public-keys/attach/{virtualMachineId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Attach public key
		 * @description This endpoint attaches an existing public keys from your account to a specified virtual machine.
		 *
		 *     Multiple keys can be attached to a single virtual machine.
		 */
		post: operations["VPS_attachPublicKeyV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/public-keys/{publicKeyId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Delete a public key
		 * @description This endpoint deletes a public key from your account.
		 *
		 *     **Deleting public key from account does not remove it from virtual machine**
		 */
		delete: operations["VPS_deleteAPublicKeyV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/public-keys": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get public key list
		 * @description This endpoint retrieves a list of public keys associated with your account.
		 */
		get: operations["VPS_getPublicKeyListV1"];
		put?: never;
		/**
		 * Create new public key
		 * @description This endpoint allows you to add a new public key to your account,
		 *     which can then be attached to virtual machine instances for secure access.
		 */
		post: operations["VPS_createNewPublicKeyV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/templates/{templateId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get template
		 * @description This endpoint retrieves details of a specific OS template for virtual machines.
		 */
		get: operations["VPS_getTemplateV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/templates": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get template list
		 * @description This endpoint retrieves a list of available OS templates for virtual machines.
		 */
		get: operations["VPS_getTemplateListV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/actions/{actionId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get action
		 * @description This endpoint retrieves details of a specific action performed on a specified virtual machine.
		 *
		 *     This endpoint allows you to view detailed information about a particular action, including the action name, timestamp, and status.
		 */
		get: operations["VPS_getActionV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/actions": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get action list
		 * @description This endpoint retrieves a list of actions performed on a specified virtual machine.
		 *
		 *     Actions are operations or events that have been executed on the virtual machine, such as starting, stopping, or modifying
		 *     the machine. This endpoint allows you to view the history of these actions, providing details about each action,
		 *     such as the action name, timestamp, and status.
		 */
		get: operations["VPS_getActionListV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/public-keys": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get attached public keys
		 * @description This endpoint retrieves a list of public keys attached to a specified virtual machine.
		 */
		get: operations["VPS_getAttachedPublicKeysV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/backups/{backupId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		post?: never;
		/**
		 * Delete backup
		 * @description This endpoint deletes a specified backup for a virtual machine.
		 */
		delete: operations["VPS_deleteBackupV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/backups": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get backup list
		 * @description This endpoint retrieves a list of backups for a specified virtual machine.
		 */
		get: operations["VPS_getBackupListV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/backups/{backupId}/restore": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Restore backup
		 * @description This endpoint restores a backup for a specified virtual machine.
		 *
		 *     The system will then initiate the restore process, which may take some time depending on the size of the backup.
		 *
		 *     **All data on the virtual machine will be overwritten with the data from the backup.**
		 */
		post: operations["VPS_restoreBackupV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/hostname": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Set hostname
		 * @description This endpoint sets the hostname for a specified virtual machine.
		 *     Changing hostname does not update PTR record automatically.
		 *     If you want your virtual machine to be reachable by a hostname,
		 *     you need to point your domain A/AAAA records to virtual machine IP as well.
		 */
		put: operations["VPS_setHostnameV1"];
		post?: never;
		/**
		 * Reset hostname
		 * @description This endpoint resets the hostname and PTR record of a specified virtual machine to the default value.
		 */
		delete: operations["VPS_resetHostnameV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get virtual machine
		 * @description This endpoint retrieves detailed information about a specified virtual machine.
		 */
		get: operations["VPS_getVirtualMachineV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get virtual machine list
		 * @description This endpoint retrieves a list of all available virtual machines.
		 */
		get: operations["VPS_getVirtualMachineListV1"];
		put?: never;
		/**
		 * Purchase new virtual machine
		 * @description This endpoint allows you to buy (purchase) and setup a new virtual machine.
		 *
		 *     If virtual machine setup fails for any reason, login to [hPanel](https://hpanel.hostinger.com/) and complete the setup manually.
		 *
		 *     If no payment method is provided, your default payment method will be used automatically.
		 */
		post: operations["VPS_purchaseNewVirtualMachineV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/monarx": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get scan metrics
		 * @description This endpoint retrieves the scan metrics for the [Monarx](https://www.monarx.com/) malware scanner installed on a specified virtual machine.
		 *     The scan metrics provide detailed information about the malware scans performed by Monarx, including the number of scans,
		 *     detected threats, and other relevant statistics. This information is useful for monitoring the security status of the
		 *     virtual machine and assessing the effectiveness of the malware scanner.
		 */
		get: operations["VPS_getScanMetricsV1"];
		put?: never;
		/**
		 * Install Monarx
		 * @description This endpoint installs the Monarx malware scanner on a specified virtual machine.
		 *
		 *     [Monarx](https://www.monarx.com/) is a security tool designed to detect and prevent malware infections on virtual machines.
		 *     By installing Monarx, users can enhance the security of their virtual machines, ensuring that they are protected against malicious software.
		 */
		post: operations["VPS_installMonarxV1"];
		/**
		 * Uninstall Monarx
		 * @description This endpoint uninstalls the Monarx malware scanner on a specified virtual machine.
		 *     If Monarx is not installed, the request will still be processed without any effect.
		 */
		delete: operations["VPS_uninstallMonarxV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/metrics": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get metrics
		 * @description This endpoint retrieves the historical metrics for a specified virtual machine.
		 *     It includes the following metrics:
		 *     - CPU usage
		 *     - Memory usage
		 *     - Disk usage
		 *     - Network usage
		 *     - Uptime
		 */
		get: operations["VPS_getMetricsV1"];
		put?: never;
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/nameservers": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Set nameservers
		 * @description This endpoint sets the nameservers for a specified virtual machine.
		 *     Be aware, that improper nameserver configuration can lead to the virtual machine being unable to resolve domain names.
		 */
		put: operations["VPS_setNameserversV1"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/ptr": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Create PTR record
		 * @description This endpoint creates or updates a PTR (Pointer) record for a specified virtual machine.
		 */
		post: operations["VPS_createPTRRecordV1"];
		/**
		 * Delete PTR record
		 * @description This endpoint deletes a PTR (Pointer) record for a specified virtual machine.
		 *
		 *     Once deleted, reverse DNS lookups to the virtual machine's IP address will no longer return the previously configured hostname.
		 */
		delete: operations["VPS_deletePTRRecordV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/panel-password": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Set panel password
		 * @description This endpoint sets the panel password for a specified virtual machine.
		 *     If virtual machine does not use panel OS, the request will still be processed without any effect.
		 *     Requirements for the password is the same as in the [recreate virtual machine endpoint](/#tag/vps-virtual-machine/POST/api/vps/v1/virtual-machines/{virtualMachineId}/recreate).
		 */
		put: operations["VPS_setPanelPasswordV1"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/recovery": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Start recovery mode
		 * @description This endpoint initiates the recovery mode for a specified virtual machine.
		 *     Recovery mode is a special state that allows users to perform system rescue operations,
		 *     such as repairing file systems, recovering data, or troubleshooting issues that prevent the virtual machine
		 *     from booting normally.
		 *
		 *     Virtual machine will boot recovery disk image and original disk image will be mounted in `/mnt` directory.
		 */
		post: operations["VPS_startRecoveryModeV1"];
		/**
		 * Stop recovery mode
		 * @description This endpoint stops the recovery mode for a specified virtual machine.
		 *     If virtual machine is not in recovery mode, this operation will fail.
		 */
		delete: operations["VPS_stopRecoveryModeV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/recreate": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Recreate virtual machine
		 * @description This endpoint will recreate a virtual machine from scratch.
		 *     The recreation process involves reinstalling the operating system and resetting the virtual machine to its initial state.
		 *     Snapshots, if there are any, will be deleted.
		 *
		 *     ## Password Requirements
		 *     Password will be checked against leaked password databases.
		 *     Requirements for the password are:
		 *     - At least 8 characters long
		 *     - At least one uppercase letter
		 *     - At least one lowercase letter
		 *     - At least one number
		 *     - Is not leaked publicly
		 *
		 *     **This operation is irreversible and will result in the loss of all data stored on the virtual machine!**
		 */
		post: operations["VPS_recreateVirtualMachineV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/restart": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Restart virtual machine
		 * @description This endpoint restarts a specified virtual machine. This is equivalent to fully stopping and starting the virtual machine.
		 *     If the virtual machine was stopped, it will be started.
		 */
		post: operations["VPS_restartVirtualMachineV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/root-password": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		/**
		 * Set root password
		 * @description This endpoint sets the root password for a specified virtual machine.
		 *     Requirements for the password is the same as in the [recreate virtual machine endpoint](/#tag/vps-virtual-machine/POST/api/vps/v1/virtual-machines/{virtualMachineId}/recreate).
		 */
		put: operations["VPS_setRootPasswordV1"];
		post?: never;
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/setup": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Setup new virtual machine
		 * @description This endpoint will setup newly purchased virtual machine with `initial` state.
		 */
		post: operations["VPS_setupNewVirtualMachineV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/snapshot": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		/**
		 * Get snapshot
		 * @description This endpoint retrieves a snapshot for a specified virtual machine.
		 */
		get: operations["VPS_getSnapshotV1"];
		put?: never;
		/**
		 * Create snapshot
		 * @description This endpoint creates a snapshot of a specified virtual machine.
		 *     A snapshot captures the state and data of the virtual machine at a specific point in time,
		 *     allowing users to restore the virtual machine to that state if needed.
		 *     This operation is useful for backup purposes, system recovery,
		 *     and testing changes without affecting the current state of the virtual machine.
		 *
		 *     **Creating new snapshot will overwrite the existing snapshot!**
		 */
		post: operations["VPS_createSnapshotV1"];
		/**
		 * Delete snapshot
		 * @description This endpoint deletes a snapshot of a specified virtual machine.
		 */
		delete: operations["VPS_deleteSnapshotV1"];
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/snapshot/restore": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Restore snapshot
		 * @description This endpoint restores a specified virtual machine to a previous state using a snapshot.
		 *     Restoring from a snapshot allows users to revert the virtual machine to that state, which is useful for system recovery, undoing changes, or testing.
		 */
		post: operations["VPS_restoreSnapshotV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/start": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Start virtual machine
		 * @description This endpoint starts a specified virtual machine.
		 *     If the virtual machine is already running, the request will still be processed without any effect.
		 */
		post: operations["VPS_startVirtualMachineV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
	"/api/vps/v1/virtual-machines/{virtualMachineId}/stop": {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		get?: never;
		put?: never;
		/**
		 * Stop virtual machine
		 * @description This endpoint stops a specified virtual machine.
		 *     If the virtual machine is already stopped, the request will still be processed without any effect.
		 */
		post: operations["VPS_stopVirtualMachineV1"];
		delete?: never;
		options?: never;
		head?: never;
		patch?: never;
		trace?: never;
	};
}
export type webhooks = Record<string, never>;
export interface components {
	schemas: {
		"Common.Schema.PaginationMetaSchema": {
			/** @example 1 */
			current_page?: number;
			/** @example 15 */
			per_page?: number;
			/** @example 100 */
			total?: number;
		};
		"Billing.V1.Order.StoreRequest": {
			/**
			 * @description Payment method ID
			 * @example 517244
			 */
			payment_method_id: number;
			items: {
				/**
				 * @description Price Item ID
				 * @example hostingercom-vps-kvm2-usd-1m
				 */
				item_id: string;
				/** @example 1 */
				quantity: number;
			}[];
			/** @description Discount coupon codes */
			coupons?: unknown[];
		};
		"Billing.V1.Subscription.CancelRequest": {
			/**
			 * @description Cancellation reason code
			 * @example other
			 * @enum {string|null}
			 */
			reason_code?: "other" | null;
			/**
			 * @description Cancellation option
			 * @example immediately
			 * @enum {string|null}
			 */
			cancel_option?: "immediately" | null;
		};
		"DNS.V1.Zone.DestroyRequest": {
			/** @description Filter records for deletion */
			filters: {
				/**
				 * @description Name of the record
				 * @example @
				 */
				name: string;
				/**
				 * @description Type of the record
				 * @example A
				 * @enum {string}
				 */
				type:
					| "A"
					| "AAAA"
					| "CNAME"
					| "ALIAS"
					| "MX"
					| "TXT"
					| "NS"
					| "SOA"
					| "SRV"
					| "CAA";
			}[];
		};
		"DNS.V1.Zone.ResetRequest": {
			/**
			 * @description Determines if operation should be run synchronously
			 * @default true
			 * @example true
			 */
			sync: boolean;
			/**
			 * @description Determines if email records should be reset
			 * @default true
			 * @example true
			 */
			reset_email_records: boolean;
			/**
			 * @description Specifies which record types to not reset
			 * @example [
			 *       "MX",
			 *       "TXT"
			 *     ]
			 */
			whitelisted_record_types?: string[];
		};
		"DNS.V1.Zone.UpdateRequest": {
			/**
			 * @description If `true`, resource records (RRs) matching name and type will be deleted and new RRs will be created, otherwise resource records' ttl's are updated and new records are appended. If no matching RRs are found, they are created.
			 * @default true
			 * @example true
			 */
			overwrite: boolean;
			zone: {
				/**
				 * @description Name of the record (use `@` for wildcard name)
				 * @example www
				 */
				name: string;
				/** @description Records assigned to the name */
				records: {
					/**
					 * @description Content of the name record
					 * @example mydomain.tld.
					 */
					content: string;
				}[];
				/**
				 * @description TTL (Time-To-Live) of the record
				 * @example 14400
				 */
				ttl?: number;
				/**
				 * @description Type of the record
				 * @example A
				 * @enum {string}
				 */
				type:
					| "A"
					| "AAAA"
					| "CNAME"
					| "ALIAS"
					| "MX"
					| "TXT"
					| "NS"
					| "SOA"
					| "SRV"
					| "CAA";
			}[];
		};
		"Domains.V1.Availability.AvailabilityRequest": {
			/**
			 * @description Domain name (without TLD)
			 * @example mydomain
			 */
			domain: string;
			/**
			 * @description TLDs list
			 * @example [
			 *       "com",
			 *       "net",
			 *       "org"
			 *     ]
			 */
			tlds: string[];
			/**
			 * @description Should response include alternatives
			 * @default false
			 * @example true
			 */
			with_alternatives: boolean;
		};
		"Domains.V1.Forwarding.StoreRequest": {
			/**
			 * @description Domain name
			 * @example mydomain.tld
			 */
			domain: string;
			/**
			 * @description Redirect type
			 * @example 301
			 * @enum {string}
			 */
			redirect_type: "301" | "302";
			/**
			 * @description URL to forward domain to
			 * @example https://forward.to.my.url
			 */
			redirect_url: string;
		};
		"Domains.V1.Portfolio.PurchaseRequest": {
			/**
			 * @description Domain name
			 * @example my-new-domain.tld
			 */
			domain: string;
			/**
			 * @description Catalog price item ID
			 * @example hostingercom-domain-com-usd-1y
			 */
			item_id: string;
			/**
			 * @description Payment method ID, default will be used if not provided
			 * @example 1327362
			 */
			payment_method_id?: number;
			/** @description Domain contact information */
			domain_contacts?: {
				/**
				 * @description Owner contact WHOIS record ID
				 * @example 741288
				 */
				owner_id?: number;
				/**
				 * @description Administrative contact WHOIS record ID
				 * @example 546123
				 */
				admin_id?: number;
				/**
				 * @description Billing contact WHOIS record ID
				 * @example 741288
				 */
				billing_id?: number;
				/**
				 * @description Technical contact WHOIS record ID
				 * @example 741288
				 */
				tech_id?: number;
			};
			/** @description Additional registration data, possible values depends on TLD */
			additional_details?: Record<string, never>;
			/** @description Discount coupon codes */
			coupons?: unknown[];
		};
		"Domains.V1.Portfolio.UpdateNameserversRequest": {
			/**
			 * @description First name server
			 * @example ns1.some-nameserver.tld
			 */
			ns1: string;
			/**
			 * @description Second name server
			 * @example ns2.some-nameserver.tld
			 */
			ns2: string;
			/**
			 * @description Third name server
			 * @example ns3.some-nameserver.tld
			 */
			ns3?: string;
			/**
			 * @description Fourth name server
			 * @example ns4.some-nameserver.tld
			 */
			ns4?: string;
		};
		"Domains.V1.WHOIS.StoreRequest": {
			/**
			 * @description TLD of the domain (without leading dot)
			 * @example com
			 */
			tld: string;
			/**
			 * @description ISO 3166 2-letter country code
			 * @example NL
			 */
			country: string;
			/**
			 * @description Legal entity type
			 * @example individual
			 * @enum {string}
			 */
			entity_type: "individual" | "organization";
			/** @description TLD details */
			tld_details?: Record<string, never>;
			/** @description WHOIS details */
			whois_details: Record<string, never>;
		};
		"VPS.V1.Firewall.Rules.StoreRequest": {
			/**
			 * @example TCP
			 * @enum {string}
			 */
			protocol:
				| "TCP"
				| "UDP"
				| "ICMP"
				| "GRE"
				| "any"
				| "ESP"
				| "AH"
				| "ICMPv6"
				| "SSH"
				| "HTTP"
				| "HTTPS"
				| "MySQL"
				| "PostgreSQL";
			/**
			 * @description Port or port range, ex: 1024:2048
			 * @example 443
			 */
			port: string;
			/**
			 * @example any
			 * @enum {string}
			 */
			source: "any" | "custom";
			/**
			 * @description IP range, CIDR, single IP or `any`
			 * @example 351.15.24.0/24
			 */
			source_detail: string;
		};
		"VPS.V1.Firewall.StoreRequest": {
			/** @example My Firewall Group */
			name: string;
		};
		"VPS.V1.PostInstallScript.StoreRequest": {
			/**
			 * @description Name of the script
			 * @example My Script
			 */
			name: string;
			/**
			 * @description Content of the script
			 * @example #!/bin/bash
			 *
			 *     echo 'Hello, World!'
			 */
			content: string;
		};
		"VPS.V1.PublicKey.AttachRequest": {
			/**
			 * @description Public Key IDs to attach
			 * @example [
			 *       18232,
			 *       10230230
			 *     ]
			 */
			ids: number[];
		};
		"VPS.V1.PublicKey.StoreRequest": {
			/** @example My Public Key */
			name: string;
			/** @example ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD... */
			key: string;
		};
		"VPS.V1.VirtualMachine.HostnameUpdateRequest": {
			/** @example my.server.tld */
			hostname: string;
		};
		"VPS.V1.VirtualMachine.MetricGetRequest": {
			/**
			 * Format: date-time
			 * @example 2025-05-01T00:00:00Z
			 */
			date_from: string;
			/**
			 * Format: date-time
			 * @example 2025-06-01T00:00:00Z
			 */
			date_to: string;
		};
		"VPS.V1.VirtualMachine.NameserversUpdateRequest": {
			/** @example 4.3.2.1 */
			ns1: string;
			/** @example 1.2.3.4 */
			ns2?: string;
		};
		"VPS.V1.VirtualMachine.PanelPasswordUpdateRequest": {
			/**
			 * Format: password
			 * @description Panel password for the virtual machine
			 * @example oMeNRustosIO
			 */
			password: string;
		};
		"VPS.V1.VirtualMachine.PurchaseRequest": {
			/**
			 * @description Catalog price item ID
			 * @example hostingercom-vps-kvm2-usd-1m
			 */
			item_id: string;
			/**
			 * @description Payment method ID, default will be used if not provided
			 * @example 1327362
			 */
			payment_method_id?: number;
			setup: components["schemas"]["VPS.V1.VirtualMachine.SetupRequest"];
			/** @description Discount coupon codes */
			coupons?: unknown[];
		};
		"VPS.V1.VirtualMachine.Recovery.StartRequest": {
			/**
			 * @description Temporary root password for recovery mode
			 * @example oMeNRustosIO
			 */
			root_password: string;
		};
		"VPS.V1.VirtualMachine.RecreateRequest": {
			/**
			 * @description Template ID
			 * @example 1130
			 */
			template_id: number;
			/**
			 * Format: password
			 * @description Password for the virtual machine. If not provided, random password will be generated. Password will not be shown in the response.
			 * @example oMeNRustosIO
			 */
			password?: string;
			/**
			 * @description Post-install script ID
			 * @example 6324
			 */
			post_install_script_id?: number;
		};
		"VPS.V1.VirtualMachine.RootPasswordUpdateRequest": {
			/**
			 * Format: password
			 * @description Root password for the virtual machine
			 * @example oMeNRustosIO
			 */
			password: string;
		};
		"VPS.V1.VirtualMachine.SetupRequest": {
			/**
			 * @description Template ID
			 * @example 1130
			 */
			template_id: number;
			/**
			 * @description Data center ID
			 * @example 19
			 */
			data_center_id: number;
			/**
			 * @description Post-install script ID
			 * @example 6324
			 */
			post_install_script_id?: number;
			/**
			 * Format: password
			 * @description Password for the virtual machine. If not provided, random password will be generated. Password will not be shown in the response.
			 * @example oMeNRustosIO
			 */
			password?: string;
			/**
			 * @description Override default hostname of the virtual machine
			 * @example my.server.tld
			 */
			hostname?: string;
			/**
			 * @description Install Monarx malware scanner (if supported)
			 * @default false
			 * @example false
			 */
			install_monarx: boolean;
			/**
			 * @description Enable weekly backup schedule
			 * @default true
			 * @example true
			 */
			enable_backups: boolean;
			/**
			 * @description Name server 1
			 * @example 4.3.2.1
			 */
			ns1?: string;
			/**
			 * @description Name server 2
			 * @example 1.2.3.4
			 */
			ns2?: string;
			/** @description Use SSH key */
			public_key?: {
				/**
				 * @description Name of the SSH key
				 * @example my-key
				 */
				name?: string;
				/**
				 * @description Contents of the SSH key
				 * @example ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC2X...
				 */
				key?: string;
			};
		};
		/** @description Array of [`Billing.V1.Catalog.CatalogItemResource`](#model/billingv1catalogcatalogitemresource) */
		"Billing.V1.Catalog.CatalogItemCollection": components["schemas"]["Billing.V1.Catalog.CatalogItemResource"][];
		/** @description Array of [`Billing.V1.Catalog.CatalogItemPriceResource`](#model/billingv1catalogcatalogitempriceresource) */
		"Billing.V1.Catalog.CatalogItemPriceCollection": components["schemas"]["Billing.V1.Catalog.CatalogItemPriceResource"][];
		"Billing.V1.Catalog.CatalogItemPriceResource": {
			/**
			 * @description Price item ID
			 * @example hostingercom-vps-kvm2-usd-1m
			 */
			id?: string;
			/**
			 * @description Price item name
			 * @example KVM 2 (billed every month)
			 */
			name?: string;
			/**
			 * @description Currency code
			 * @example USD
			 */
			currency?: string;
			/**
			 * @description Price in cents
			 * @example 1799
			 */
			price?: number;
			/**
			 * @description First period price in cents
			 * @example 899
			 */
			first_period_price?: number;
			/**
			 * @description Period
			 * @example 1
			 */
			period?: number;
			/**
			 * @description Period unit
			 * @example day
			 * @enum {string}
			 */
			period_unit?: "day" | "week" | "month" | "year" | "none";
		};
		"Billing.V1.Catalog.CatalogItemResource": {
			/**
			 * @description Catalog item ID
			 * @example hostingercom-vps-kvm2
			 */
			id?: string;
			/** @example KVM 2 */
			name?: string;
			/** @example VPS */
			category?: string;
			/**
			 * @description Flexible key-value storage containing category-specific metadata for the catalog item. The structure and available fields vary depending on the item category.
			 * @example {
			 *       "field": "value"
			 *     }
			 */
			metadata?: Record<string, never> | null;
			prices?: components["schemas"]["Billing.V1.Catalog.CatalogItemPriceCollection"];
		};
		"Billing.V1.Order.OrderBillingAddressResource": {
			/** @example John */
			first_name?: string;
			/** @example Doe */
			last_name?: string;
			/** @example null */
			company?: string | null;
			/** @example null */
			address_1?: string | null;
			/** @example null */
			address_2?: string | null;
			/** @example null */
			city?: string | null;
			/** @example null */
			state?: string | null;
			/** @example null */
			zip?: string | null;
			/** @example NL */
			country?: string | null;
			/** @example null */
			phone?: string | null;
			/** @example john@doe.tld */
			email?: string;
		};
		"Billing.V1.Order.OrderResource": {
			/**
			 * @description Order ID
			 * @example 2957086
			 */
			id?: number;
			/**
			 * @description Subscription ID
			 * @example Azz353Uhl1xC54pR0
			 */
			subscription_id?: string;
			/**
			 * @example completed
			 * @enum {string}
			 */
			status?:
				| "completed"
				| "pending"
				| "processing"
				| "failed"
				| "refunded"
				| "cancelled"
				| "awaiting_payment"
				| "payment_initiated"
				| "fraud_refund";
			/**
			 * @description Currency code
			 * @example USD
			 */
			currency?: string;
			/**
			 * @description Subtotal price (exc. VAT) in cents
			 * @example 899
			 */
			subtotal?: number;
			/**
			 * @description Total price (inc. VAT) in cents
			 * @example 1088
			 */
			total?: number;
			billing_address?: components["schemas"]["Billing.V1.Order.OrderBillingAddressResource"];
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-27T11:54:22Z
			 */
			updated_at?: string;
		};
		"Billing.V1.Order.VirtualMachineOrderResource": {
			order?: components["schemas"]["Billing.V1.Order.OrderResource"];
			virtual_machine?: components["schemas"]["VPS.V1.VirtualMachine.VirtualMachineResource"];
		};
		/** @description Array of [`Billing.V1.PaymentMethod.PaymentMethodResource`](#model/billingv1paymentmethodpaymentmethodresource) */
		"Billing.V1.PaymentMethod.PaymentMethodCollection": components["schemas"]["Billing.V1.PaymentMethod.PaymentMethodResource"][];
		"Billing.V1.PaymentMethod.PaymentMethodResource": {
			/**
			 * @description Payment method ID
			 * @example 6523
			 */
			id?: number;
			/** @example Credit Card */
			name?: string;
			/** @example 1234*****6464 */
			identifier?: string;
			/** @example card */
			payment_method?: string;
			/** @example true */
			is_default?: boolean;
			/** @example false */
			is_expired?: boolean;
			/** @example false */
			is_suspended?: boolean;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-27T11:54:22Z
			 */
			expires_at?: string;
		};
		/** @description Array of [`Billing.V1.Subscription.SubscriptionResource`](#model/billingv1subscriptionsubscriptionresource) */
		"Billing.V1.Subscription.SubscriptionCollection": components["schemas"]["Billing.V1.Subscription.SubscriptionResource"][];
		"Billing.V1.Subscription.SubscriptionResource": {
			/**
			 * @description Subscription ID
			 * @example Azz36nUfKX1S1MSF
			 */
			id?: string;
			/** @example KVM 1 */
			name?: string;
			/**
			 * @example active
			 * @enum {string}
			 */
			status?:
				| "active"
				| "paused"
				| "cancelled"
				| "not_renewing"
				| "transferred"
				| "in_trial"
				| "future";
			/** @example 1 */
			billing_period?: number;
			/** @example day */
			billing_period_unit?: string;
			/** @example USD */
			currency_code?: string;
			/**
			 * @description Total price in cents
			 * @example 1799
			 */
			total_price?: number;
			/**
			 * @description Renewal price in cents
			 * @example 1799
			 */
			renewal_price?: number;
			/** @example true */
			is_auto_renewed?: boolean;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-27T11:54:22Z
			 */
			expires_at?: string | null;
			/**
			 * Format: date-time
			 * @example 2025-02-28T11:54:22Z
			 */
			next_billing_at?: string | null;
		};
		"Common.SuccessEmptyResource": {
			/** @example Request accepted */
			message?: string;
		};
		/** @description Array of [`DNS.V1.Snapshot.SnapshotResource`](#model/dnsv1snapshotsnapshotresource) */
		"DNS.V1.Snapshot.SnapshotCollection": components["schemas"]["DNS.V1.Snapshot.SnapshotResource"][];
		"DNS.V1.Snapshot.SnapshotResource": {
			/**
			 * @description Snapshot ID
			 * @example 5341
			 */
			id?: number;
			/**
			 * @description Reason of the update
			 * @example Zone records update request
			 */
			reason?: string;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
		};
		"DNS.V1.Snapshot.SnapshotWithContentResource": {
			/**
			 * @description Snapshot ID
			 * @example 5341
			 */
			id?: number;
			/**
			 * @description Reason of the update
			 * @example Zone records update request
			 */
			reason?: string;
			snapshot?: components["schemas"]["DNS.V1.Zone.RecordCollection"];
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
		};
		/** @description Array of [`DNS.V1.Zone.NameRecordResource`](#model/dnsv1zonenamerecordresource) */
		"DNS.V1.Zone.NameRecordCollection": components["schemas"]["DNS.V1.Zone.NameRecordResource"][];
		"DNS.V1.Zone.NameRecordResource": {
			/**
			 * @description Content of the name record
			 * @example mydomain.tld.
			 */
			content?: string;
			/**
			 * @description Flag to mark name record as disabled
			 * @example false
			 */
			is_disabled?: boolean;
		};
		/** @description Array of [`DNS.V1.Zone.RecordResource`](#model/dnsv1zonerecordresource) */
		"DNS.V1.Zone.RecordCollection": components["schemas"]["DNS.V1.Zone.RecordResource"][];
		"DNS.V1.Zone.RecordResource": {
			/**
			 * @description Name of the record (use `@` for wildcard name)
			 * @example www
			 */
			name?: string;
			records?: components["schemas"]["DNS.V1.Zone.NameRecordCollection"];
			/**
			 * @description TTL (Time-To-Live) of the record
			 * @example 14400
			 */
			ttl?: number;
			/**
			 * @description Type of the record
			 * @example A
			 * @enum {string}
			 */
			type?:
				| "A"
				| "AAAA"
				| "CNAME"
				| "ALIAS"
				| "MX"
				| "TXT"
				| "NS"
				| "SOA"
				| "SRV"
				| "CAA";
		};
		/** @description Array of [`Domains.V1.Availability.AvailabilityResource`](#model/domainsv1availabilityavailabilityresource) */
		"Domains.V1.Availability.AvailabilityCollection": components["schemas"]["Domains.V1.Availability.AvailabilityResource"][];
		"Domains.V1.Availability.AvailabilityResource": {
			/**
			 * @description Domain name, `null` when not claimed free domain
			 * @example mydomain.tld
			 */
			domain?: string | null;
			/**
			 * @description `true` if domain is available for registration
			 * @example true
			 */
			is_available?: boolean;
			/**
			 * @description `true` if domain is provided as an alternative
			 * @example false
			 */
			is_alternative?: boolean;
			/** @description Special rules and/or restrictions applied for registering TLD */
			restriction?: string | null;
		};
		/** @description Array of [`Domains.V1.Domain.DomainResource`](#model/domainsv1domaindomainresource) */
		"Domains.V1.Domain.DomainCollection": components["schemas"]["Domains.V1.Domain.DomainResource"][];
		"Domains.V1.Domain.DomainExtendedResource": {
			/**
			 * @description Domain name
			 * @example mydomain.tld
			 */
			domain?: string;
			/**
			 * @description Status of the domain
			 * @example active
			 * @enum {string}
			 */
			status?:
				| "active"
				| "pending_setup"
				| "expired"
				| "requested"
				| "pending_verification";
			message?: string | null;
			/**
			 * @description Is privacy protection allowed for the domain
			 * @example true
			 */
			is_privacy_protection_allowed?: boolean;
			/**
			 * @description Is privacy protection enabled for the domain
			 * @example false
			 */
			is_privacy_protected?: boolean;
			/**
			 * @description Is domain allowed to be locked
			 * @example true
			 */
			is_lockable?: boolean;
			/**
			 * @description Is domain locked
			 * @example true
			 */
			is_locked?: boolean;
			/**
			 * @description Name servers
			 * @example {
			 *       "ns1": "ns1.example.tld",
			 *       "ns2": "ns2.example.tld"
			 *     }
			 */
			name_servers?: {
				/**
				 * @description Name server 1
				 * @example ns1.example.tld
				 */
				ns1?: string;
				/**
				 * @description Name server 2
				 * @example ns2.example.tld
				 */
				ns2?: string;
			};
			/**
			 * @description Child name servers
			 * @example {
			 *       "ns1.example.tld": [
			 *         "258.231.55.321",
			 *         "258.231.55.322"
			 *       ]
			 *     }
			 */
			child_name_servers?: string[][];
			/** @description WHOIS profiles */
			domain_contacts?: {
				/**
				 * @description Admin WHOIS profile ID
				 * @example 114698
				 */
				admin_id?: number;
				/**
				 * @description Owner WHOIS profile ID
				 * @example 614698
				 */
				owner_id?: number;
				/**
				 * @description Billing WHOIS profile ID
				 * @example 154698
				 */
				billing_id?: number;
				/**
				 * @description Technician WHOIS profile ID
				 * @example 524248
				 */
				tech_id?: number;
			};
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			updated_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-04-27T11:54:22Z
			 */
			"60_days_lock_expires_at"?: string | null;
			/**
			 * Format: date-time
			 * @example 2025-02-27T12:54:22Z
			 */
			registered_at?: string | null;
			/**
			 * Format: date-time
			 * @example 2025-03-27T11:54:22Z
			 */
			expires_at?: string | null;
		};
		"Domains.V1.Domain.DomainResource": {
			/**
			 * @description Domain ID
			 * @example 13632
			 */
			id?: number;
			/**
			 * @description Domain name, `null` when not claimed free domain
			 * @example mydomain.tld
			 */
			domain?: string | null;
			/**
			 * @example domain
			 * @enum {string}
			 */
			type?: "domain" | "free_domain";
			/**
			 * @example active
			 * @enum {string}
			 */
			status?:
				| "active"
				| "pending_setup"
				| "expired"
				| "requested"
				| "pending_verification";
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-27T11:54:22Z
			 */
			expires_at?: string | null;
		};
		"Domains.V1.Forwarding.ForwardingResource": {
			/**
			 * @description Domain name
			 * @example mydomain.tld
			 */
			domain?: string | null;
			/**
			 * @description Redirect type
			 * @example 301
			 * @enum {string}
			 */
			redirect_type?: "301" | "302";
			/**
			 * @description URL domain is forwarded to
			 * @example https://forward.to.my.url
			 */
			redirect_url?: string;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-27T11:54:22Z
			 */
			updated_at?: string | null;
		};
		/** @description Array of [`Domains.V1.WHOIS.ProfileResource`](#model/domainsv1whoisprofileresource) */
		"Domains.V1.WHOIS.ProfileCollection": components["schemas"]["Domains.V1.WHOIS.ProfileResource"][];
		"Domains.V1.WHOIS.ProfileResource": {
			/**
			 * @description WHOIS Profile ID
			 * @example 746263
			 */
			id?: number;
			/**
			 * @description TLD to which contact profile can be applied to
			 * @example com
			 */
			tld?: string;
			/**
			 * @description ISO 3166 2-letter country code
			 * @example NL
			 */
			country?: string;
			/**
			 * @description WHOIS profile entity type
			 * @example individual
			 * @enum {string}
			 */
			entity_type?: "individual" | "organization";
			/**
			 * @description WHOIS profile details
			 * @example {
			 *       "first_name": "John",
			 *       "last_name": "Doe",
			 *       "email": "john@doe.tld"
			 *     }
			 */
			whois_details?: Record<string, never>;
			/** @description TLD details */
			tld_details?: Record<string, never>;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-19T11:54:22Z
			 */
			updated_at?: string;
		};
		/**
		 * @description Array of domains
		 * @example [
		 *       "mydomain1.tld",
		 *       "mydomain2.tld"
		 *     ]
		 */
		"Domains.V1.WHOIS.ProfileUsageResource": string[];
		/** @description Array of [`VPS.V1.Action.ActionResource`](#model/vpsv1actionactionresource) */
		"VPS.V1.Action.ActionCollection": components["schemas"]["VPS.V1.Action.ActionResource"][];
		"VPS.V1.Action.ActionResource": {
			/**
			 * @description Action ID
			 * @example 8123712
			 */
			id?: number;
			/**
			 * @description Action name
			 * @example action_name
			 */
			name?: string;
			/**
			 * @description Action state
			 * @example success
			 * @enum {string}
			 */
			state?: "success" | "error" | "delayed" | "sent" | "created";
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:00Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:58:00Z
			 */
			updated_at?: string;
		};
		/** @description Array of [`VPS.V1.Backup.BackupResource`](#model/vpsv1backupbackupresource) */
		"VPS.V1.Backup.BackupCollection": components["schemas"]["VPS.V1.Backup.BackupResource"][];
		"VPS.V1.Backup.BackupResource": {
			/**
			 * @description Backup ID
			 * @example 325
			 */
			id?: number;
			/**
			 * @description Location of the backup
			 * @example nl-srv-openvzbackups
			 */
			location?: string;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
		};
		/** @description Array of [`VPS.V1.DataCenter.DataCenterResource`](#model/vpsv1datacenterdatacenterresource) */
		"VPS.V1.DataCenter.DataCenterCollection": components["schemas"]["VPS.V1.DataCenter.DataCenterResource"][];
		"VPS.V1.DataCenter.DataCenterResource": {
			/**
			 * @description Data center ID
			 * @example 29
			 */
			id?: number;
			/**
			 * @description Data center name
			 * @example phx
			 */
			name?: string | null;
			/**
			 * @description Data center location country (two letter code)
			 * @example us
			 */
			location?: string | null;
			/**
			 * @description Data center location city
			 * @example Phoenix
			 */
			city?: string | null;
			/**
			 * @description Data center location continent
			 * @example North America
			 */
			continent?: string | null;
		};
		/** @description Array of [`VPS.V1.Firewall.FirewallResource`](#model/vpsv1firewallfirewallresource) */
		"VPS.V1.Firewall.FirewallCollection": components["schemas"]["VPS.V1.Firewall.FirewallResource"][];
		"VPS.V1.Firewall.FirewallResource": {
			/**
			 * @description Firewall ID
			 * @example 65224
			 */
			id?: number;
			/**
			 * @description Firewall name
			 * @example HTTP and SSH only
			 */
			name?: string;
			/**
			 * @description Is current firewall synced with VPS
			 * @example false
			 */
			is_synced?: boolean;
			rules?: components["schemas"]["VPS.V1.Firewall.FirewallRuleCollection"];
			/**
			 * Format: date-time
			 * @example 2021-09-01T12:00:00Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2021-09-01T12:00:00Z
			 */
			updated_at?: string;
		};
		/** @description Array of [`VPS.V1.Firewall.FirewallRuleResource`](#model/vpsv1firewallfirewallruleresource) */
		"VPS.V1.Firewall.FirewallRuleCollection": components["schemas"]["VPS.V1.Firewall.FirewallRuleResource"][];
		"VPS.V1.Firewall.FirewallRuleResource": {
			/**
			 * @description Firewall rule ID
			 * @example 24541
			 */
			id?: number;
			/**
			 * @description Firewall rule action
			 * @example accept
			 * @enum {string}
			 */
			action?: "accept" | "drop";
			/**
			 * @description Firewall rule protocol
			 * @example TCP
			 * @enum {string}
			 */
			protocol?:
				| "TCP"
				| "UDP"
				| "ICMP"
				| "GRE"
				| "any"
				| "ESP"
				| "AH"
				| "ICMPv6"
				| "SSH"
				| "HTTP"
				| "HTTPS"
				| "MySQL"
				| "PostgreSQL";
			/**
			 * @description Firewall rule destination port: single or port range
			 * @example 1024:2048
			 */
			port?: string;
			/**
			 * @description Firewall rule source. Can be `any` or `custom`
			 * @example any
			 */
			source?: string;
			/**
			 * @description Firewall rule source detail. Can be `any` or IP address, CIDR or range
			 * @example any
			 */
			source_detail?: string;
		};
		/** @description Array of [`VPS.V1.IPAddress.IPAddressResource`](#model/vpsv1ipaddressipaddressresource) */
		"VPS.V1.IPAddress.IPAddressCollection": components["schemas"]["VPS.V1.IPAddress.IPAddressResource"][];
		"VPS.V1.IPAddress.IPAddressResource": {
			/**
			 * @description IP address ID
			 * @example 52347
			 */
			id?: number;
			/**
			 * @description IP address: IPv4 or IPv6
			 * @example 213.331.273.15
			 */
			address?: string;
			/**
			 * @description IP address PTR record
			 * @example something.domain.tld
			 */
			ptr?: string | null;
		};
		"VPS.V1.Malware.MetricsResource": {
			/**
			 * @description Records found during last scan
			 * @example 1
			 */
			records?: number;
			/**
			 * @description Malicious files found during last scan
			 * @example 2
			 */
			malicious?: number;
			/**
			 * @description Compromised files found during last scan
			 * @example 3
			 */
			compromised?: number;
			/**
			 * @description Total number of files scanned during last scan
			 * @example 193218
			 */
			scanned_files?: number;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			scan_started_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-27T11:54:22Z
			 */
			scan_ended_at?: string | null;
		};
		"VPS.V1.Metrics.MetricsCollection": {
			/**
			 * @description CPU usage in percentage, 0 - 100%
			 * @example {
			 *       "unit": "%",
			 *       "usage": {
			 *         "1742269632": 1.45
			 *       }
			 *     }
			 */
			cpu_usage?:
				| components["schemas"]["VPS.V1.Metrics.MetricsResource"]
				| null;
			/**
			 * @description RAM usage in bytes
			 * @example {
			 *       "unit": "bytes",
			 *       "usage": {
			 *         "1742269632": 554176512
			 *       }
			 *     }
			 */
			ram_usage?:
				| components["schemas"]["VPS.V1.Metrics.MetricsResource"]
				| null;
			/**
			 * @description Disk space usage in bytes
			 * @example {
			 *       "unit": "bytes",
			 *       "usage": {
			 *         "1742269632": 2620018688
			 *       }
			 *     }
			 */
			disk_space?:
				| components["schemas"]["VPS.V1.Metrics.MetricsResource"]
				| null;
			/**
			 * @description Outgoing traffic in bytes
			 * @example {
			 *       "unit": "bytes",
			 *       "usage": {
			 *         "1742269632": 784800
			 *       }
			 *     }
			 */
			outgoing_traffic?:
				| components["schemas"]["VPS.V1.Metrics.MetricsResource"]
				| null;
			/**
			 * @description Incoming traffic in bytes
			 * @example {
			 *       "unit": "bytes",
			 *       "usage": {
			 *         "1742269632": 8978400
			 *       }
			 *     }
			 */
			incoming_traffic?:
				| components["schemas"]["VPS.V1.Metrics.MetricsResource"]
				| null;
			/**
			 * @description Uptime in milliseconds
			 * @example {
			 *       "unit": "milliseconds",
			 *       "usage": {
			 *         "1742269632": 455248
			 *       }
			 *     }
			 */
			uptime?: components["schemas"]["VPS.V1.Metrics.MetricsResource"] | null;
		};
		"VPS.V1.Metrics.MetricsResource": {
			/**
			 * @description Measurement unit
			 * @example measurement-unit
			 */
			unit?: string;
			/**
			 * @description Object, containing UNIX timestamps as a key and measurement as a value.
			 * @example {
			 *       "timestamp": 123
			 *     }
			 */
			usage?: Record<string, never>;
		};
		/** @description Array of [`VPS.V1.PostInstallScript.PostInstallScriptResource`](#model/vpsv1postinstallscriptpostinstallscriptresource) */
		"VPS.V1.PostInstallScript.PostInstallScriptCollection": components["schemas"]["VPS.V1.PostInstallScript.PostInstallScriptResource"][];
		"VPS.V1.PostInstallScript.PostInstallScriptResource": {
			/**
			 * @description Post-install script ID
			 * @example 325
			 */
			id?: number;
			/**
			 * @description Name of the script
			 * @example My Setup Script
			 */
			name?: string;
			/**
			 * @description Content of the script
			 * @example #!/bin/bash\napt-get update\napt-get install -y nginx
			 */
			content?: string;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-19T11:54:22Z
			 */
			updated_at?: string;
		};
		/** @description Array of [`VPS.V1.PublicKey.PublicKeyResource`](#model/vpsv1publickeypublickeyresource) */
		"VPS.V1.PublicKey.PublicKeyCollection": components["schemas"]["VPS.V1.PublicKey.PublicKeyResource"][];
		"VPS.V1.PublicKey.PublicKeyResource": {
			/**
			 * @description Public key ID
			 * @example 325
			 */
			id?: number;
			/**
			 * @description Public key name
			 * @example My public key
			 */
			name?: string;
			/**
			 * @description Public key content
			 * @example ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQD...
			 */
			key?: string;
		};
		"VPS.V1.Snapshot.SnapshotResource": {
			/**
			 * @description Snapshot ID
			 * @example 325
			 */
			id?: number;
			/**
			 * Format: date-time
			 * @example 2025-02-27T11:54:22Z
			 */
			created_at?: string;
			/**
			 * Format: date-time
			 * @example 2025-03-19T11:54:22Z
			 */
			expires_at?: string;
		};
		/** @description Array of [`VPS.V1.Template.TemplateResource`](#model/vpsv1templatetemplateresource) */
		"VPS.V1.Template.TemplateCollection": components["schemas"]["VPS.V1.Template.TemplateResource"][];
		"VPS.V1.Template.TemplateResource": {
			/**
			 * @description Template ID
			 * @example 6523
			 */
			id?: number;
			/**
			 * @description Template name
			 * @example Ubuntu 20.04 LTS
			 */
			name?: string;
			/**
			 * @description Template description
			 * @example Ubuntu 20.04 LTS
			 */
			description?: string;
			/**
			 * @description Link to official OS documentation
			 * @example https://docs.ubuntu.com
			 */
			documentation?: string | null;
		};
		/** @description Array of [`VPS.V1.VirtualMachine.VirtualMachineResource`](#model/vpsv1virtualmachinevirtualmachineresource) */
		"VPS.V1.VirtualMachine.VirtualMachineCollection": components["schemas"]["VPS.V1.VirtualMachine.VirtualMachineResource"][];
		"VPS.V1.VirtualMachine.VirtualMachineResource": {
			/**
			 * @description Virtual machine ID
			 * @example 17923
			 */
			id?: number;
			/**
			 * @description Active firewall ID, `null` if disabled
			 * @example null
			 */
			firewall_group_id?: number | null;
			/**
			 * @description Subscription ID
			 * @example Azz353Uhl1xC54pR0
			 */
			subscription_id?: string | null;
			/**
			 * @description VPS plan name
			 * @example KVM 4
			 */
			plan?: string | null;
			/** @example srv17923.hstgr.cloud */
			hostname?: string;
			/**
			 * @example running
			 * @enum {string}
			 */
			state?:
				| "running"
				| "starting"
				| "stopping"
				| "stopped"
				| "creating"
				| "initial"
				| "error"
				| "suspending"
				| "unsuspending"
				| "suspended"
				| "destroying"
				| "destroyed"
				| "recreating"
				| "restoring"
				| "recovery"
				| "stopping_recovery";
			/**
			 * @example unlocked
			 * @enum {string}
			 */
			actions_lock?: "unlocked" | "locked";
			/**
			 * @description CPUs count assigned to virtual machine
			 * @example 4
			 */
			cpus?: number;
			/**
			 * @description Memory available to virtual machine (in megabytes)
			 * @example 8192
			 */
			memory?: number;
			/**
			 * @description Virtual machine disk size (in megabytes)
			 * @example 51200
			 */
			disk?: number;
			/**
			 * @description Monthly internet traffic available to virtual machine (in megabytes)
			 * @example 1073741824
			 */
			bandwidth?: number;
			/**
			 * @description Primary DNS resolver
			 * @example 1.1.1.1
			 */
			ns1?: string | null;
			/**
			 * @description Secondary DNS resolver
			 * @example 8.8.8.8
			 */
			ns2?: string | null;
			/** @description IPv4 address of virtual machine */
			ipv4?:
				| components["schemas"]["VPS.V1.IPAddress.IPAddressCollection"]
				| null;
			/** @description IPv6 address of virtual machine, `null` if not assigned */
			ipv6?:
				| components["schemas"]["VPS.V1.IPAddress.IPAddressCollection"]
				| null;
			/** @description OS template installed in virtual machine */
			template?:
				| components["schemas"]["VPS.V1.Template.TemplateResource"]
				| null;
			/**
			 * Format: date-time
			 * @example 2024-09-05T07:25:36.00000Z
			 */
			created_at?: string;
		};
	};
	responses: {
		/** @description Error response */
		"Common.Response.ErrorResponse": {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": {
					/**
					 * @description Message of the error
					 * @example Error message
					 */
					message?: string;
					/**
					 * @description Request correlation ID
					 * @example 26a91bd9-f8c8-4a83-9df9-83e23d696fe3
					 */
					correlation_id?: string;
				};
			};
		};
		/** @description Unauthenticated response */
		"Common.Response.UnauthorizedResponse": {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": {
					/**
					 * @description Message of the error
					 * @example Unauthenticated
					 */
					message?: string;
					/**
					 * @description Request correlation ID
					 * @example 26a91bd9-f8c8-4a83-9df9-83e23d696fe3
					 */
					correlation_id?: string;
				};
			};
		};
		/** @description Validation error response */
		"Common.Response.UnprocessableContentResponse": {
			headers: {
				[name: string]: unknown;
			};
			content: {
				"application/json": {
					/**
					 * @description Validation error message
					 * @example The name field is required. (and 1 more error)
					 */
					message?: string;
					/** @description Object of detailed errors for each field */
					errors?: {
						/** @example [
						 *       "The field_1 field is required.",
						 *       "The field_1 must be a number."
						 *     ] */
						field_1?: unknown[];
						/** @example [
						 *       "The field_2 field is required.",
						 *       "The field_2 must be a string."
						 *     ] */
						field_2?: unknown[];
					};
					/**
					 * @description Request correlation ID
					 * @example 26a91bd9-f8c8-4a83-9df9-83e23d696fe3
					 */
					correlation_id?: string;
				};
			};
		};
	};
	parameters: {
		/** @description Filter catalog items by category */
		category: "DOMAIN" | "VPS";
		/** @description Filter catalog items by name. Use `*` for wildcard search, e.g. `.COM*` to find .com domain */
		name: string;
		/** @description Payment method ID */
		paymentMethodId: number;
		/** @description Subscription ID */
		subscriptionId: string;
		/** @description Domain name */
		domain: string;
		/** @description Page number */
		page: number;
		/** @description Snapshot ID */
		snapshotId: number;
		/** @description Filter by TLD (without leading dot) */
		tld: string;
		/** @description WHOIS ID */
		whoisId: number;
		/** @description Token ID */
		tokenId: number;
		/** @description Action ID */
		actionId: number;
		/** @description Backup ID */
		backupId: number;
		/** @description Firewall ID */
		firewallId: number;
		/** @description Firewall Rule ID */
		ruleId: number;
		/** @description Post-install script ID */
		postInstallScriptId: number;
		/** @description Public Key ID */
		publicKeyId: number;
		/** @description Template ID */
		templateId: number;
		/** @description Virtual Machine ID */
		virtualMachineId: number;
	};
	requestBodies: never;
	headers: never;
	pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
	billing_getCatalogItemListV1: {
		parameters: {
			query?: {
				/** @description Filter catalog items by category */
				category?: components["parameters"]["category"];
				/** @description Filter catalog items by name. Use `*` for wildcard search, e.g. `.COM*` to find .com domain */
				name?: components["parameters"]["name"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Billing.V1.Catalog.CatalogItemCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	billing_createNewServiceOrderV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Billing.V1.Order.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Billing.V1.Order.OrderResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	billing_setDefaultPaymentMethodV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Payment method ID */
				paymentMethodId: components["parameters"]["paymentMethodId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	billing_deletePaymentMethodV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Payment method ID */
				paymentMethodId: components["parameters"]["paymentMethodId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	billing_getPaymentMethodListV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Billing.V1.PaymentMethod.PaymentMethodCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	billing_cancelSubscriptionV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Subscription ID */
				subscriptionId: components["parameters"]["subscriptionId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Billing.V1.Subscription.CancelRequest"];
			};
		};
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	billing_getSubscriptionListV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Billing.V1.Subscription.SubscriptionCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	DNS_getSnapshotV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
				/** @description Snapshot ID */
				snapshotId: components["parameters"]["snapshotId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DNS.V1.Snapshot.SnapshotWithContentResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	DNS_getSnapshotListV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DNS.V1.Snapshot.SnapshotCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	DNS_restoreSnapshotV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
				/** @description Snapshot ID */
				snapshotId: components["parameters"]["snapshotId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	DNS_getRecordsV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["DNS.V1.Zone.RecordCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	DNS_updateZoneRecordsV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DNS.V1.Zone.UpdateRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	DNS_deleteZoneRecordsV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DNS.V1.Zone.DestroyRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	DNS_resetZoneRecordsV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DNS.V1.Zone.ResetRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	DNS_validateZoneRecordsV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["DNS.V1.Zone.UpdateRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_checkDomainAvailabilityV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Domains.V1.Availability.AvailabilityRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.Availability.AvailabilityCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_getForwardingDataV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.Forwarding.ForwardingResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_deleteForwardingDataV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_createForwardingDataV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Domains.V1.Forwarding.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.Forwarding.ForwardingResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_enableDomainLockV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_disableDomainLockV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_getDomainV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.Domain.DomainExtendedResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_getDomainListV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.Domain.DomainCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_purchaseNewDomainV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Domains.V1.Portfolio.PurchaseRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Billing.V1.Order.OrderResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_enablePrivacyProtectionV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_disablePrivacyProtectionV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_updateNameserversV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Domain name */
				domain: components["parameters"]["domain"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Domains.V1.Portfolio.UpdateNameserversRequest"];
			};
		};
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_getWHOISProfileV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description WHOIS ID */
				whoisId: components["parameters"]["whoisId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.WHOIS.ProfileResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_deleteWHOISProfileV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description WHOIS ID */
				whoisId: components["parameters"]["whoisId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_getWHOISProfileListV1: {
		parameters: {
			query?: {
				/** @description Filter by TLD (without leading dot) */
				tld?: components["parameters"]["tld"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.WHOIS.ProfileCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_createWHOISProfileV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["Domains.V1.WHOIS.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.WHOIS.ProfileResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	domains_getWHOISProfileUsageV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description WHOIS ID */
				whoisId: components["parameters"]["whoisId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Domains.V1.WHOIS.ProfileUsageResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getDataCentersListV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.DataCenter.DataCenterCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_activateFirewallV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Firewall ID */
				firewallId: components["parameters"]["firewallId"];
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_deactivateFirewallV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Firewall ID */
				firewallId: components["parameters"]["firewallId"];
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getFirewallV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Firewall ID */
				firewallId: components["parameters"]["firewallId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Firewall.FirewallResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_deleteFirewallV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Firewall ID */
				firewallId: components["parameters"]["firewallId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getFirewallListV1: {
		parameters: {
			query?: {
				/** @description Page number */
				page?: components["parameters"]["page"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						data?: components["schemas"]["VPS.V1.Firewall.FirewallCollection"];
						meta?: components["schemas"]["Common.Schema.PaginationMetaSchema"];
					};
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_createNewFirewallV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.Firewall.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Firewall.FirewallResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_updateFirewallRuleV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Firewall ID */
				firewallId: components["parameters"]["firewallId"];
				/** @description Firewall Rule ID */
				ruleId: components["parameters"]["ruleId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.Firewall.Rules.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Firewall.FirewallRuleResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_deleteFirewallRuleV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Firewall ID */
				firewallId: components["parameters"]["firewallId"];
				/** @description Firewall Rule ID */
				ruleId: components["parameters"]["ruleId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_createFirewallRuleV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Firewall ID */
				firewallId: components["parameters"]["firewallId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.Firewall.Rules.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Firewall.FirewallRuleResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_syncFirewallV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Firewall ID */
				firewallId: components["parameters"]["firewallId"];
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getPostInstallScriptV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Post-install script ID */
				postInstallScriptId: components["parameters"]["postInstallScriptId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.PostInstallScript.PostInstallScriptResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_updatePostInstallScriptV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Post-install script ID */
				postInstallScriptId: components["parameters"]["postInstallScriptId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.PostInstallScript.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.PostInstallScript.PostInstallScriptResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_deleteAPostInstallScriptV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Post-install script ID */
				postInstallScriptId: components["parameters"]["postInstallScriptId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getPostInstallScriptListV1: {
		parameters: {
			query?: {
				/** @description Page number */
				page?: components["parameters"]["page"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						data?: components["schemas"]["VPS.V1.PostInstallScript.PostInstallScriptCollection"];
						meta?: components["schemas"]["Common.Schema.PaginationMetaSchema"];
					};
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_createPostInstallScriptV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.PostInstallScript.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.PostInstallScript.PostInstallScriptResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_attachPublicKeyV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.PublicKey.AttachRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_deleteAPublicKeyV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Public Key ID */
				publicKeyId: components["parameters"]["publicKeyId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getPublicKeyListV1: {
		parameters: {
			query?: {
				/** @description Page number */
				page?: components["parameters"]["page"];
			};
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						data?: components["schemas"]["VPS.V1.PublicKey.PublicKeyCollection"];
						meta?: components["schemas"]["Common.Schema.PaginationMetaSchema"];
					};
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_createNewPublicKeyV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.PublicKey.StoreRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.PublicKey.PublicKeyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getTemplateV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Template ID */
				templateId: components["parameters"]["templateId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Template.TemplateResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getTemplateListV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Template.TemplateCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getActionV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
				/** @description Action ID */
				actionId: components["parameters"]["actionId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getActionListV1: {
		parameters: {
			query?: {
				/** @description Page number */
				page?: components["parameters"]["page"];
			};
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						data?: components["schemas"]["VPS.V1.Action.ActionCollection"];
						meta?: components["schemas"]["Common.Schema.PaginationMetaSchema"];
					};
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getAttachedPublicKeysV1: {
		parameters: {
			query?: {
				/** @description Page number */
				page?: components["parameters"]["page"];
			};
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						data?: components["schemas"]["VPS.V1.PublicKey.PublicKeyCollection"];
						meta?: components["schemas"]["Common.Schema.PaginationMetaSchema"];
					};
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_deleteBackupV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
				/** @description Backup ID */
				backupId: components["parameters"]["backupId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success empty response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Common.SuccessEmptyResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getBackupListV1: {
		parameters: {
			query?: {
				/** @description Page number */
				page?: components["parameters"]["page"];
			};
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": {
						data?: components["schemas"]["VPS.V1.Backup.BackupCollection"];
						meta?: components["schemas"]["Common.Schema.PaginationMetaSchema"];
					};
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_restoreBackupV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
				/** @description Backup ID */
				backupId: components["parameters"]["backupId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_setHostnameV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.VirtualMachine.HostnameUpdateRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_resetHostnameV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getVirtualMachineV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.VirtualMachine.VirtualMachineResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getVirtualMachineListV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.VirtualMachine.VirtualMachineCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_purchaseNewVirtualMachineV1: {
		parameters: {
			query?: never;
			header?: never;
			path?: never;
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.VirtualMachine.PurchaseRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["Billing.V1.Order.VirtualMachineOrderResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getScanMetricsV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Malware.MetricsResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_installMonarxV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_uninstallMonarxV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getMetricsV1: {
		parameters: {
			query: {
				date_from: string;
				date_to: string;
			};
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Metrics.MetricsCollection"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_setNameserversV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.VirtualMachine.NameserversUpdateRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_createPTRRecordV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_deletePTRRecordV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_setPanelPasswordV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.VirtualMachine.PanelPasswordUpdateRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_startRecoveryModeV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.VirtualMachine.Recovery.StartRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_stopRecoveryModeV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_recreateVirtualMachineV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.VirtualMachine.RecreateRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_restartVirtualMachineV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_setRootPasswordV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.VirtualMachine.RootPasswordUpdateRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_setupNewVirtualMachineV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody: {
			content: {
				"application/json": components["schemas"]["VPS.V1.VirtualMachine.SetupRequest"];
			};
		};
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.VirtualMachine.VirtualMachineResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			422: components["responses"]["Common.Response.UnprocessableContentResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_getSnapshotV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Snapshot.SnapshotResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_createSnapshotV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_deleteSnapshotV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_restoreSnapshotV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_startVirtualMachineV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
	VPS_stopVirtualMachineV1: {
		parameters: {
			query?: never;
			header?: never;
			path: {
				/** @description Virtual Machine ID */
				virtualMachineId: components["parameters"]["virtualMachineId"];
			};
			cookie?: never;
		};
		requestBody?: never;
		responses: {
			/** @description Success response */
			200: {
				headers: {
					[name: string]: unknown;
				};
				content: {
					"application/json": components["schemas"]["VPS.V1.Action.ActionResource"];
				};
			};
			401: components["responses"]["Common.Response.UnauthorizedResponse"];
			500: components["responses"]["Common.Response.ErrorResponse"];
		};
	};
}
