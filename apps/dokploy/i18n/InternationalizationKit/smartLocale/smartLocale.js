// @ts-nocheck
import fs from 'fs';
import path from 'path';

class SmartLocalePlugin {
	constructor({ inputDirectory, outputDirectory, outputImportDirectory, defaultLocale, fileType }) {
		this.inputDirectory = inputDirectory;
		this.outputDirectory = outputDirectory;
		this.outputImportDirectory = outputImportDirectory;
		this.defaultLocale = defaultLocale;
		this.fileType = fileType;
		this.name = 'smart-locale';
		this.hasRun = false; // 添加一个标志来确保只运行一次
	}

	apply(compiler) {
		compiler.hooks.emit.tapAsync(this.name, (compilation, callback) => {
			if (!this.hasRun) {
				try {
					this.generateLocalesTypes();
					this.hasRun = true; // 标志设置为 true，确保后续不会重复执行
				} catch (error) {
					console.error('Error generating locales:', error);
				}
			}
			callback();
		});
	}

	generateLocalesTypes() {
		const localeRawData = fs.readFileSync(`${this.inputDirectory}${this.defaultLocale}.${this.fileType}`, 'utf-8');
		const localeData = JSON.parse(localeRawData);

		if (!fs.existsSync(this.outputDirectory)) {
			fs.mkdirSync(this.outputDirectory, { recursive: true });
		}

		const localesKeys = new Set();
		fs.readdirSync(this.inputDirectory).forEach((file) => {
			if (file.endsWith(`.${this.fileType}`)) {
				const rawData = fs.readFileSync(`${this.inputDirectory}${file}`, 'utf-8');
				const jsonData = JSON.parse(rawData);
				Object.keys(jsonData).forEach((key) => {
					localesKeys.add(key);
				});
			}
		});

		let typeDefinitions = '/* Autogenerated file. Do not edit manually. */\n\n';
		typeDefinitions += 'interface Locales {\n';
		localesKeys.forEach((key) => {
			const text = localeData[key] || '';
			typeDefinitions += `\t/**\n\t * ${text}\n\t */\n\t'${key}': string;\n`;
		});
		typeDefinitions += '}\n\n';
		typeDefinitions += 'export default Locales;\n';

		const outputPath = path.join(this.outputDirectory, 'locales.d.ts');
		fs.writeFileSync(outputPath, typeDefinitions);

		this.generateImportStatements();
	}

	generateImportStatements() {
		const importStatements = [];
		const localeMappings = [];

		fs.readdirSync(this.inputDirectory).forEach((file) => {
			if (file.endsWith(`.${this.fileType}`)) {
				const localeName = file.replace(`.${this.fileType}`, '').replace(/-/g, '_');
				const relativePath = './' + path.relative(this.outputImportDirectory, path.join(this.inputDirectory, file)).replace(/\\/g, '/');
				localeMappings.push(`\t'${localeName.replace(/_/g, '-')}': () => import('${relativePath}').then(module => module.default)`);
			}
		});

		let importFileContent = '/* Autogenerated file. Do not edit manually. */\n\n';
		importFileContent += 'const locales = {\n' + localeMappings.join(',\n') + '\n};\n\n';
		importFileContent += 'export default locales;\n';

		const outputPath = path.join(this.outputImportDirectory, 'locales-imports.ts');
		fs.writeFileSync(outputPath, importFileContent, { encoding: 'utf-8' });
	}
}

export default SmartLocalePlugin;
