networks:
  dokploy-network:
    name: dokploy-network-dev
    driver: bridge

volumes:
  postgres_data_dev:
  redis_data_dev:
  traefik_data_dev:
  node_modules:
  dokploy_node_modules:
  schedules_node_modules:
  server_dist:

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: dokploy-postgres-dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: dokploy
      POSTGRES_USER: dokploy
      POSTGRES_PASSWORD: amukds4wi9001583845717ad2
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    networks:
      - dokploy-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dokploy -d dokploy"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache and Queue
  redis:
    image: redis:7-alpine
    container_name: dokploy-redis-dev
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis_data_dev:/data
    networks:
      - dokploy-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Traefik Reverse Proxy
  traefik:
    image: traefik:v3.1.2
    container_name: dokploy-traefik-dev
    restart: unless-stopped
    command:
      - --api.dashboard=true
      - --api.insecure=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=dokploy-network-dev
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --log.level=ERROR
      - --accesslog=false
    ports:
      - "${TRAEFIK_PORT_80:-80}:80"
      - "${TRAEFIK_PORT_443:-443}:443"
      - "8080:8080"  # Traefik dashboard
      - "${TRAEFIK_80_PORT:-80}:80"
      - "${TRAEFIK_443_PORT:-443}:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_data_dev:/letsencrypt
    networks:
      - dokploy-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.traefik.entrypoints=web"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # Main Dokploy Application (Development Mode with Hot Reloading)
  dokploy:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: dokploy-app-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      traefik:
        condition: service_started
    environment:
      DATABASE_URL: "postgres://dokploy:amukds4wi9001583845717ad2@dokploy-postgres-dev:5432/dokploy"
      REDIS_HOST: dokploy-redis-dev
      REDIS_URL: "redis://dokploy-redis-dev:6379"
      PORT: 3000
      NODE_ENV: development
      BETTER_AUTH_SECRET: "dev-better-auth-secret-key"
      NEXTAUTH_SECRET: "dev-nextauth-secret"
      NEXTAUTH_URL: "http://dokploy.localhost"
      NEXT_TELEMETRY_DISABLED: 1
      WATCHPACK_POLLING: true
      CHOKIDAR_USEPOLLING: true
    volumes:
      - .:/app
      - node_modules:/app/node_modules
      - dokploy_node_modules:/app/apps/dokploy/node_modules
      - server_dist:/app/packages/server/dist
      - /var/run/docker.sock:/var/run/docker.sock:rw
    networks:
      - dokploy-network
    ports:
      - "3000:3000"
      - "3001:3001"  # For dev server
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dokploy.rule=Host(`dokploy.localhost`)"
      - "traefik.http.routers.dokploy.entrypoints=web"
      - "traefik.http.services.dokploy.loadbalancer.server.port=3000"

  # Monitoring Service (Development Mode with Hot Reloading)
  monitoring:
    build:
      context: .
      dockerfile: Dockerfile.monitoring.dev
    container_name: dokploy-monitoring-dev
    restart: unless-stopped
    depends_on:
      - dokploy
    environment:
      PORT: 3003
      DATABASE_URL: "postgres://dokploy:amukds4wi9001583845717ad2@dokploy-postgres-dev:5432/dokploy"
      METRICS_CONFIG: |
        {
          "server": {
            "type": "monitoring",
            "refreshRate": 30,
            "port": 3003,
            "token": "dev-monitoring-token-123",
            "urlCallback": "http://dokploy-app-dev:3000/api/monitoring/callback",
            "cronJob": "0 */6 * * *",
            "retentionDays": 7,
            "thresholds": {
              "cpu": 80,
              "memory": 80
            }
          },
          "containers": {
            "refreshRate": 10,
            "services": {
              "include": ["*"],
              "exclude": []
            }
          }
        }
    volumes:
      - ./apps/monitoring:/app
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - dokploy-network
    ports:
      - "3003:3003"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.monitoring.rule=Host(`monitoring.localhost`)"
      - "traefik.http.routers.monitoring.entrypoints=web"
      - "traefik.http.services.monitoring.loadbalancer.server.port=3003"

  # Schedules Service (Development Mode with Hot Reloading)
  schedules:
    build:
      context: .
      dockerfile: Dockerfile.schedules.dev
    container_name: dokploy-schedules-dev
    restart: unless-stopped
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DATABASE_URL: "postgres://dokploy:amukds4wi9001583845717ad2@dokploy-postgres-dev:5432/dokploy"
      REDIS_URL: "redis://dokploy-redis-dev:6379"
      NODE_ENV: development
    volumes:
      - ./apps/schedules:/app/apps/schedules
      - schedules_node_modules:/app/apps/schedules/node_modules
      - server_dist:/app/packages/server/dist
    networks:
      - dokploy-network
    ports:
      - "3002:3002"
